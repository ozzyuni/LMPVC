[1728901661.3836377]: Starting tests!
[1728901661.383746]: Test #0
[1728901662.045914]: say hello

def say_hello(robot):
    robot.say('hello')

say_hello(robot)
[1728901663.1844122]: do you like puppies

def do_you_like_puppies(robot):
    robot.say('I like puppies')

do_you_like_puppies(robot)
[1728901664.748846]: tell me the first law of robotics

def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')

tell_me_the_first_law_of_robotics(robot)
[1728901666.583387]: can you find an apple

def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple.")

can_you_find_an_apple(robot)
[1728901668.2465358]: move a little left

def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

move_a_little_to_the_left(robot)
[1728901669.8563323]: move ten centimeters up

def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

move_ten_centimeters_up(robot)
[1728901671.6130197]: go one hundred and fifty millimeters backwards

def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

go_one_hundred_and_fifty_millimeters_backwards(robot)
[1728901673.3329096]: move fifteen centimeters above the die

def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

move_fifteen_centimeters_above_the_die(robot)
[1728901674.3851569]: look at the die

def look_at_the_die(robot):
    look_at(robot, 'die')

look_at_the_die(robot)
[1728901675.3968742]: pick up the die

def pick_up_the_die(robot):
    pick(robot, 'die')

pick_up_the_die(robot)
[1728901676.534741]: rotate 33 degrees clockwise

def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

rotate_33_degrees_clockwise(robot)
[1728901677.7193038]: tilt seventy degrees forwards

def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

tilt_seventy_degrees_forwards(robot)
[1728901679.8053615]: go ten centimeters up and fifteen centimeters backwards

def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot)
[1728901682.8900895]: draw an ellipse with radii five and four centimeters

def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()

draw_an_ellipse_with_radii_five_and_four_centimeters(robot)
[1728901686.956766]: move point five meters up and then draw a small pentagon

def draw_a_small_pentagon(robot):
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()



def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    draw_a_small_pentagon(robot)

move_point_five_meters_up_and_then_draw_a_small_pentagon(robot)
[1728901690.3360126]: if you find a table and a fruit basket, say dinner found, otherwise tell me what's missing

def if_you_find_a_table_and_a_fruit_basket_say_dinner_found_otherwise_tell_me_whats_missing(robot):
    (table_pose, table_found) = robot.find('table')
    (fruit_basket_pose, fruit_basket_found) = robot.find('fruit basket')
    if (table_found and fruit_basket_found):
        robot.say('Dinner found!')
    else:
        if (not table_found):
            robot.say("I can't find the table!")
        if (not fruit_basket_found):
            robot.say("I can't find the fruit basket!")

if_you_find_a_table_and_a_fruit_basket_say_dinner_found_otherwise_tell_me_whats_missing(robot)
[1728901692.8903298]: move a bit to the left at zero point one meters per second
[1728901694.491056]: what's the cube root of three rounded to two decimal points

def what_is_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))

what_is_the_cube_root_of_three_rounded_to_two_decimal_points(robot)
[1728901697.3453348]: draw a small circle

def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()

draw_a_small_circle(robot)
[1728901698.4461935]: place held item on the table

def place_held_item_on_the_table(robot):
    place(robot, 'table')

place_held_item_on_the_table(robot)
[1728901698.9492807]: Test #1
[1728901699.3391893]: say hello

def say_hello(robot):
    robot.say('hello')

say_hello(robot)
[1728901700.4849823]: do you like puppies

def do_you_like_puppies(robot):
    robot.say('I like puppies')

do_you_like_puppies(robot)
[1728901702.064836]: tell me the first law of robotics

def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')

tell_me_the_first_law_of_robotics(robot)
[1728901703.9074306]: can you find an apple

def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple.")

can_you_find_an_apple(robot)
[1728901705.5802839]: move a little left

def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

move_a_little_to_the_left(robot)
[1728901707.2032108]: move ten centimeters up

def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

move_ten_centimeters_up(robot)
[1728901708.9686763]: go one hundred and fifty millimeters backwards

def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

go_one_hundred_and_fifty_millimeters_backwards(robot)
[1728901710.7045114]: move fifteen centimeters above the die

def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

move_fifteen_centimeters_above_the_die(robot)
[1728901711.7565854]: look at the die

def look_at_the_die(robot):
    look_at(robot, 'die')

look_at_the_die(robot)
[1728901712.7672071]: pick up the die

def pick_up_the_die(robot):
    pick(robot, 'die')

pick_up_the_die(robot)
[1728901713.915598]: rotate 33 degrees clockwise

def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

rotate_33_degrees_clockwise(robot)
[1728901715.104869]: tilt seventy degrees forwards

def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

tilt_seventy_degrees_forwards(robot)
[1728901717.1989977]: go ten centimeters up and fifteen centimeters backwards

def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot)
[1728901720.2851608]: draw an ellipse with radii five and four centimeters

def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()

draw_an_ellipse_with_radii_five_and_four_centimeters(robot)
[1728901724.3604586]: move point five meters up and then draw a small pentagon

def draw_a_small_pentagon(robot):
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()



def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    draw_a_small_pentagon(robot)

move_point_five_meters_up_and_then_draw_a_small_pentagon(robot)
[1728901727.757088]: if you find a table and a fruit basket, say dinner found, otherwise tell me what's missing

def if_you_find_a_table_and_a_fruit_basket_say_dinner_found_otherwise_tell_me_whats_missing(robot):
    (table_pose, table_found) = robot.find('table')
    (fruit_basket_pose, fruit_basket_found) = robot.find('fruit basket')
    if (table_found and fruit_basket_found):
        robot.say('Dinner found!')
    else:
        if (not table_found):
            robot.say("I can't find the table!")
        if (not fruit_basket_found):
            robot.say("I can't find the fruit basket!")

if_you_find_a_table_and_a_fruit_basket_say_dinner_found_otherwise_tell_me_whats_missing(robot)
[1728901730.3058023]: move a bit to the left at zero point one meters per second
[1728901731.9073374]: what's the cube root of three rounded to two decimal points

def what_is_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))

what_is_the_cube_root_of_three_rounded_to_two_decimal_points(robot)
[1728901734.7575707]: draw a small circle

def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()

draw_a_small_circle(robot)
[1728901735.8566875]: place held item on the table

def place_held_item_on_the_table(robot):
    place(robot, 'table')

place_held_item_on_the_table(robot)
[1728901736.3587284]: Test #2
[1728901736.7494745]: say hello

def say_hello(robot):
    robot.say('hello')

say_hello(robot)
[1728901737.8938673]: do you like puppies

def do_you_like_puppies(robot):
    robot.say('I like puppies')

do_you_like_puppies(robot)
[1728901739.4757273]: tell me the first law of robotics

def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')

tell_me_the_first_law_of_robotics(robot)
[1728901741.3300598]: can you find an apple

def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple.")

can_you_find_an_apple(robot)
[1728901743.0058289]: move a little left

def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

move_a_little_to_the_left(robot)
[1728901744.6342194]: move ten centimeters up

def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

move_ten_centimeters_up(robot)
[1728901746.407065]: go one hundred and fifty millimeters backwards

def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

go_one_hundred_and_fifty_millimeters_backwards(robot)
[1728901748.1475105]: move fifteen centimeters above the die

def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

move_fifteen_centimeters_above_the_die(robot)
[1728901749.2076247]: look at the die

def look_at_the_die(robot):
    look_at(robot, 'die')

look_at_the_die(robot)
[1728901750.2217922]: pick up the die

def pick_up_the_die(robot):
    pick(robot, 'die')

pick_up_the_die(robot)
[1728901751.366528]: rotate 33 degrees clockwise

def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

rotate_33_degrees_clockwise(robot)
[1728901752.5603087]: tilt seventy degrees forwards

def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

tilt_seventy_degrees_forwards(robot)
[1728901754.6598663]: go ten centimeters up and fifteen centimeters backwards

def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot)
[1728901757.77002]: draw an ellipse with radii five and four centimeters

def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()

draw_an_ellipse_with_radii_five_and_four_centimeters(robot)
[1728901761.878734]: move point five meters up and then draw a small pentagon

def draw_a_small_pentagon(robot):
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()



def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    draw_a_small_pentagon(robot)

move_point_five_meters_up_and_then_draw_a_small_pentagon(robot)
[1728901765.2870095]: if you find a table and a fruit basket, say dinner found, otherwise tell me what's missing

def if_you_find_a_table_and_a_fruit_basket_say_dinner_found_otherwise_tell_me_whats_missing(robot):
    (table_pose, table_found) = robot.find('table')
    (fruit_basket_pose, fruit_basket_found) = robot.find('fruit basket')
    if (table_found and fruit_basket_found):
        robot.say('Dinner found!')
    else:
        if (not table_found):
            robot.say("I can't find the table!")
        if (not fruit_basket_found):
            robot.say("I can't find the fruit basket!")

if_you_find_a_table_and_a_fruit_basket_say_dinner_found_otherwise_tell_me_whats_missing(robot)
[1728901767.8518555]: move a bit to the left at zero point one meters per second
[1728901769.4592009]: what's the cube root of three rounded to two decimal points

def what_is_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))

what_is_the_cube_root_of_three_rounded_to_two_decimal_points(robot)
[1728901772.329561]: draw a small circle

def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()

draw_a_small_circle(robot)
[1728901773.4361844]: place held item on the table

def place_held_item_on_the_table(robot):
    place(robot, 'table')

place_held_item_on_the_table(robot)
[1728901773.9390194]: Test #3
[1728901774.327898]: say hello

def say_hello(robot):
    robot.say('hello')

say_hello(robot)
[1728901775.4736326]: do you like puppies

def do_you_like_puppies(robot):
    robot.say('I like puppies')

do_you_like_puppies(robot)
[1728901777.0634797]: tell me the first law of robotics

def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')

tell_me_the_first_law_of_robotics(robot)
[1728901778.9198282]: can you find an apple

def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple.")

can_you_find_an_apple(robot)
[1728901780.6024039]: move a little left

def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

move_a_little_to_the_left(robot)
[1728901782.2322803]: move ten centimeters up

def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

move_ten_centimeters_up(robot)
[1728901784.0134256]: go one hundred and fifty millimeters backwards

def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

go_one_hundred_and_fifty_millimeters_backwards(robot)
[1728901785.758437]: move fifteen centimeters above the die

def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

move_fifteen_centimeters_above_the_die(robot)
[1728901786.8183255]: look at the die

def look_at_the_die(robot):
    look_at(robot, 'die')

look_at_the_die(robot)
[1728901787.8345456]: pick up the die

def pick_up_the_die(robot):
    pick(robot, 'die')

pick_up_the_die(robot)
[1728901788.9835033]: rotate 33 degrees clockwise

def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

rotate_33_degrees_clockwise(robot)
[1728901790.1776557]: tilt seventy degrees forwards

def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

tilt_seventy_degrees_forwards(robot)
[1728901792.2856915]: go ten centimeters up and fifteen centimeters backwards

def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot)
[1728901795.4096792]: draw an ellipse with radii five and four centimeters

def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()

draw_an_ellipse_with_radii_five_and_four_centimeters(robot)
[1728901799.5234294]: move point five meters up and then draw a small pentagon

def draw_a_small_pentagon(robot):
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()



def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    draw_a_small_pentagon(robot)

move_point_five_meters_up_and_then_draw_a_small_pentagon(robot)
[1728901802.9404004]: if you find a table and a fruit basket, say dinner found, otherwise tell me what's missing

def if_you_find_a_table_and_a_fruit_basket_say_dinner_found_otherwise_tell_me_whats_missing(robot):
    (table_pose, table_found) = robot.find('table')
    (fruit_basket_pose, fruit_basket_found) = robot.find('fruit basket')
    if (table_found and fruit_basket_found):
        robot.say('Dinner found!')
    else:
        if (not table_found):
            robot.say("I can't find the table!")
        if (not fruit_basket_found):
            robot.say("I can't find the fruit basket!")

if_you_find_a_table_and_a_fruit_basket_say_dinner_found_otherwise_tell_me_whats_missing(robot)
[1728901805.5122862]: move a bit to the left at zero point one meters per second
[1728901807.1225173]: what's the cube root of three rounded to two decimal points

def what_is_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))

what_is_the_cube_root_of_three_rounded_to_two_decimal_points(robot)
[1728901809.9932468]: draw a small circle

def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()

draw_a_small_circle(robot)
[1728901811.100848]: place held item on the table

def place_held_item_on_the_table(robot):
    place(robot, 'table')

place_held_item_on_the_table(robot)
[1728901811.603965]: Test #4
[1728901811.9945538]: say hello

def say_hello(robot):
    robot.say('hello')

say_hello(robot)
[1728901813.1409602]: do you like puppies

def do_you_like_puppies(robot):
    robot.say('I like puppies')

do_you_like_puppies(robot)
[1728901814.7305458]: tell me the first law of robotics

def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')

tell_me_the_first_law_of_robotics(robot)
[1728901816.5904264]: can you find an apple

def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple.")

can_you_find_an_apple(robot)
[1728901818.2719054]: move a little left

def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

move_a_little_to_the_left(robot)
[1728901819.89962]: move ten centimeters up

def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

move_ten_centimeters_up(robot)
[1728901821.6817772]: go one hundred and fifty millimeters backwards

def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

go_one_hundred_and_fifty_millimeters_backwards(robot)
[1728901823.423812]: move fifteen centimeters above the die

def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

move_fifteen_centimeters_above_the_die(robot)
[1728901824.4824533]: look at the die

def look_at_the_die(robot):
    look_at(robot, 'die')

look_at_the_die(robot)
[1728901825.499295]: pick up the die

def pick_up_the_die(robot):
    pick(robot, 'die')

pick_up_the_die(robot)
[1728901826.6490421]: rotate 33 degrees clockwise

def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

rotate_33_degrees_clockwise(robot)
[1728901827.8407202]: tilt seventy degrees forwards

def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

tilt_seventy_degrees_forwards(robot)
[1728901829.9456942]: go ten centimeters up and fifteen centimeters backwards

def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot)
[1728901833.0704718]: draw an ellipse with radii five and four centimeters

def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()

draw_an_ellipse_with_radii_five_and_four_centimeters(robot)
[1728901837.1941311]: move point five meters up and then draw a small pentagon

def draw_a_small_pentagon(robot):
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()



def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    draw_a_small_pentagon(robot)

move_point_five_meters_up_and_then_draw_a_small_pentagon(robot)
[1728901840.6137464]: if you find a table and a fruit basket, say dinner found, otherwise tell me what's missing

def if_you_find_a_table_and_a_fruit_basket_say_dinner_found_otherwise_tell_me_whats_missing(robot):
    (table_pose, table_found) = robot.find('table')
    (fruit_basket_pose, fruit_basket_found) = robot.find('fruit basket')
    if (table_found and fruit_basket_found):
        robot.say('Dinner found!')
    else:
        if (not table_found):
            robot.say("I can't find the table!")
        if (not fruit_basket_found):
            robot.say("I can't find the fruit basket!")

if_you_find_a_table_and_a_fruit_basket_say_dinner_found_otherwise_tell_me_whats_missing(robot)
[1728901843.18429]: move a bit to the left at zero point one meters per second
[1728901844.7949495]: what's the cube root of three rounded to two decimal points

def what_is_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))

what_is_the_cube_root_of_three_rounded_to_two_decimal_points(robot)
[1728901847.6705854]: draw a small circle

def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()

draw_a_small_circle(robot)
[1728901848.771528]: place held item on the table

def place_held_item_on_the_table(robot):
    place(robot, 'table')

place_held_item_on_the_table(robot)
[1728901849.2746215]: Writing outputs!
