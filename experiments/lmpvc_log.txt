[1740574179.4874992]: Starting tests!
[1740574179.4876552]: Test #0
[1740574180.9126272]: 0 --- say hello

def say_hello(robot):
    robot.say('hello')

say_hello(robot)
[1740574182.0172873]: 1 --- do you like ice cream

def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')

do_you_like_ice_cream(robot)
[1740574183.59057]: 2 --- tell me the first law of robotics

def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')

tell_me_the_first_law_of_robotics(robot)
[1740574185.3844085]: 3 --- can you find an apple

def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")

can_you_find_an_apple(robot)
[1740574186.9070077]: 4 --- move a little left

def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

move_a_little_left(robot)
[1740574188.5077832]: 5 --- move ten centimeters up

def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

move_ten_centimeters_up(robot)
[1740574190.1952457]: 6 --- go one hundred and fifty millimeters backwards

def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

go_one_hundred_and_fifty_millimeters_backwards(robot)
[1740574191.9502046]: 7 --- move fifteen centimeters above the die

def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

move_fifteen_centimeters_above_the_die(robot)
[1740574193.0024953]: 8 --- look at the die

def look_at_the_die(robot):
    look_at(robot, 'die')

look_at_the_die(robot)
[1740574193.9718957]: 9 --- pick up the die

def pick_up_the_die(robot):
    pick(robot, 'die')

pick_up_the_die(robot)
[1740574195.06269]: 10 --- rotate 33 degrees clockwise

def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

rotate_33_degrees_clockwise(robot)
[1740574196.189201]: 11 --- tilt seventy degrees forwards

def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

tilt_seventy_degrees_forwards(robot)
[1740574198.194428]: 12 --- go ten centimeters up and fifteen centimeters backwards

def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot)
[1740574201.2063718]: 13 --- draw an ellipse with radii five and four centimeters

def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()

draw_an_ellipse_with_radii_five_and_four_centimeters(robot)
[1740574204.9206119]: 14 --- move point five meters up and then draw a small pentagon

def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()

move_point_five_meters_up_and_then_draw_a_small_pentagon(robot)
[1740574209.523107]: 15 --- if you find a hammer and nails, say tools found, otherwise tell me what's missing

def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')

if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot)
[1740574211.785923]: 16 --- five centimeters up and four down

def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

five_centimeters_up_and_four_down(robot)
[1740574213.3369966]: 17 --- move point five meters up

def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

move_point_five_meters_up(robot)
[1740574214.9050863]: 18 --- point four centimeters down

def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

point_four_centimeters_down(robot)
[1740574216.414752]: 19 --- what's the cube root of three rounded to two decimal points

def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))

whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot)
[1740574219.1893034]: 20 --- draw a small circle

def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()

draw_a_small_circle(robot)
[1740574220.2458508]: 21 --- place held item on the table

def place_held_item_on_the_table(robot):
    place(robot, 'table')

place_held_item_on_the_table(robot)
[1740574221.789082]: 22 --- move a little backwards

def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

move_a_little_backwards(robot)
[1740574223.462305]: 23 --- a bit back the other way

def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

a_bit_back_the_other_way(robot)
[1740574226.7045226]: 24 --- move a little forwards and then to the left

def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

move_a_little_forwards_and_then_to_the_left(robot)
[1740574228.8659074]: 25 --- wait five seconds, then move a little up

def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)

wait_five_seconds_then_move_a_little_up(robot)
[1740574232.8744667]: 26 --- if you can't find a banana, wait a little and try one more time

def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        robot.wait(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')

if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot)
[1740574236.592148]: 27 --- if you see a screw, move ten centimeters above item

def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()

if_you_see_a_screw_move_ten_centimeters_above_item(robot)
[1740574238.249815]: 28 --- move 1.5 centimeters up

def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

move_1_point_5_centimeters_up(robot)
[1740574239.906532]: 29 --- go 3.1 meters to the left

def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

go_3_point_1_meters_to_the_left(robot)
[1740574242.6487617]: 30 --- move a little to the left and then right, repeat three times

def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

move_a_little_to_the_left_and_then_right_repeat_three_times(robot)
[1740574244.152236]: 31 --- a little forwards

def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

a_little_forwards(robot)
[1740574245.6343157]: 32 --- a bit more

def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

a_bit_more(robot)
[1740574246.5503616]: 33 --- say cheese

def say_cheese(robot):
    robot.say('cheese')

say_cheese(robot)
[1740574247.6437824]: 34 --- do you like puppies

def do_you_like_puppies(robot):
    robot.say('I like puppies')

do_you_like_puppies(robot)
[1740574248.7156816]: 35 --- why do you like them

def why_do_you_like_them(robot):
    robot.say('Why do you like them?')

why_do_you_like_them(robot)
[1740574249.8827326]: 36 --- what's your favourite book

def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')

whats_your_favourite_book(robot)
[1740574250.875953]: 37 --- who's the author

def whos_the_author(robot):
    robot.say('I am ')

whos_the_author(robot)
[1740574252.0061283]: 38 --- rotate a quarter turn anticlockwise

def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))

rotate_a_quarter_turn_anticlockwise(robot)
[1740574253.0942533]: 39 --- rotate back the other way

def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))

rotate_back_the_other_way(robot)
[1740574254.9101653]: 40 --- move a random amount to the left, but less than a meters

def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

move_a_random_amount_to_the_left_but_less_than_a_meter(robot)
[1740574256.4795046]: 41 --- again but half the distance

def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

again_but_half_the_distance(robot)
[1740574257.5674827]: 42 --- half that again

def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()

half_that_again(robot)
[1740574258.7571087]: 43 --- do you like to work with humans

def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')

do_you_like_to_work_with_humans(robot)
[1740574259.6550705]: 44 --- good job

def good_job(robot):
    robot.say('good job')

good_job(robot)
[1740574263.619932]: 45 --- build a house

def build_a_house(robot):
    (small_bin_pose, small_bin_found) = robot.find('small bin')
    if (not small_bin_found):
        robot.say("Can't find the small bin!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        waypoint.position.y = (small_bin_pose.position.y - 0.05)
        waypoint.position.z = (small_bin_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()

build_a_house(robot)
[1740574264.656792]: 46 --- push the red button

def push_the_red_button(robot):
    robot.push_button('red')

push_the_red_button(robot)
[1740574266.0749574]: 47 --- pick up the battery and place it on the base plate

def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

pick_up_the_battery_and_place_it_on_the_base_plate(robot)
[1740574267.4311044]: 48 --- what tool should i use to tighten screws

def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')

what_tool_should_i_use_to_tighten_screws(robot)
[1740574269.0407481]: 49 --- what tool should i use to tighten bolts to correct torque

def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')

what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot)
[1740574269.543818]: Writing outputs!
