No matches in cache, generating!

Searching generated block:
# define function: say hello
def say_hello(robot):
    robot.say("hello")

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 0.39173078536987305 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like ice cream
def do_you_like_ice_cream(robot):
    robot.say("I like ice cream")

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.5838189125061035 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tell me the first law of robotics
def tell_me_the_first_law_of_robotics(robot):
    robot.say("A robot may not injure a human being or, through inaction, allow a human being to come to harm.")

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 0.9945673942565918 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: can you find an apple
def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find("apple")

    if apple_found:
        robot.say("I found an apple!")
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 1.2698779106140137 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little left
def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0063188076019287 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move ten centimeters up
def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0304319858551025 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go one hundred and fifty millimeters backwards
def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1817715167999268 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move fifteen centimeters above the die
def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1446330547332764 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: look at the die
def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.4997882843017578 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the die
def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.4632902145385742 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate 33 degrees clockwise
def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.5845422744750977 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tilt seventy degrees forwards
def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.6212685108184814 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go ten centimeters up and fifteen centimeters backwards
def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.5074095726013184 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw an ellipse with radii five and four centimeters
def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.04 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.510713815689087 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up and then draw a small pentagon
def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

    waypoints = 5

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.1 * math.cos(2 * math.pi * i / 5)
        waypoint.position.y += 0.1 * math.sin(2 * math.pi * i / 5)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.2008581161499023 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing
def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    # find the hammer
    (hammer_pose, hammer_found) = robot.find("hammer")

    # find the nails
    (nails_pose, nails_found) = robot.find("nails")

    # if both were found, say tools found
    if hammer_found and nails_found:
        robot.say("Tools found!")

    # if hammer was found but nails were not, say hammer found
    elif hammer_found and not nails_found:
        robot.say("Hammer found!")

    # if nails were found but hammer was not, say nails found
    elif not hammer_found and nails_found:
        robot.say("Nails found!")

    # if neither were found, say nothing found
    else:
        robot.say("Nothing found!")

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 4.114403247833252 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: five centimeters up and four down
def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.7404463291168213 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up
def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.040403127670288 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: point four centimeters down
def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0622179508209229 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's the cube root of three rounded to two decimal points
def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, 1/3), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 1.0038032531738281 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw a small circle
def draw_a_small_circle(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.05 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.270306348800659 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: place held item on the table
def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.5498330593109131 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little backwards
def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0369951725006104 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit back the other way
def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.100447177886963 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little forwards and then to the left
def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_forwards(robot)
def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.813138246536255 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: wait five seconds, then move a little up
def wait_five_seconds_then_move_a_little_up(robot):
    time.sleep(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    time.sleep(5)
    move_a_little_up(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_up(robot)
def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.6657609939575195 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you can't find a banana, wait a little and try one more time
def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    # find the banana
    (banana_pose, banana_found) = robot.find("banana")

    # if banana wasn't found, tell the user
    if not banana_found:
        robot.say("Can't find the banana!")
        time.sleep(1)
        (banana_pose, banana_found) = robot.find("banana")

        # if banana wasn't found, tell the user
        if not banana_found:
            robot.say("Can't find the banana!")
        else:
            robot.say("Found the banana!")
    else:
        robot.say("Found the banana!")

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        time.sleep(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 3.4560258388519287 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you see a screw, move ten centimeters above item
def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    # find the screw
    (screw_pose, screw_found) = robot.find("screw")

    # if screw wasn't found, tell the user
    if not screw_found:
        robot.say("Can't find the screw!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = screw_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.245157480239868 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move 1.5 centimeters up
def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1623802185058594 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go 3.1 meters to the left
def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1632797718048096 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little to the left and then right, repeat three times
def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.0700016021728516 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a little forwards
def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0078773498535156 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit more
def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0399880409240723 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say cheese
def say_cheese(robot):
    robot.say("cheese")

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.4146146774291992 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like puppies
def do_you_like_puppies(robot):
    robot.say("I like puppies")

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.5930800437927246 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: why do you like them
def why_do_you_like_them(robot):
    robot.say("Why do you like them?")

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.5703954696655273 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's your favourite book
def whats_your_favourite_book(robot):
    robot.say("My favourite book is The Hobbit")

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.6670005321502686 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: who's the author
def whos_the_author(robot):
    robot.say("I am ")

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.49053287506103516 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate a quarter turn anticlockwise
def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.6278328895568848 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate back the other way
def rotate_back_the_other_way(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.5847983360290527 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a random amount to the left, but less than a meter
def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meter

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.316211462020874 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: again but half the maximum distance
def again_but_half_the_maximum_distance(robot):
    robot.set_max_distance(0.5)
    robot.go()

Prompt: # define function: again but half the maximum distance

Isolated Source:


def again_but_half_the_maximum_distance(robot):
    robot.set_max_distance(0.5)
    robot.go()


Got result in 0.7435736656188965 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: check if you can see the cover, try again up to three times, waiting 3 seconds in between
def check_if_you_can_see_the_cover_try_again_up_to_three_times_waiting_3_seconds_in_between(robot):
    # try to see the cover
    (cover_pose, cover_found) = robot.find("cover")

    # if the cover wasn't found, try again
    if not cover_found:
        # try to see the cover
        (cover_pose, cover_found) = robot.find("cover")

        # if the cover wasn't found, try again
        if not cover_found:
            # try to see the cover
            (cover_pose, cover_found) = robot.find("cover")

            # if the cover wasn't found, try again
            if not cover_found:
                # try to see the cover
                (cover_pose, cover_found) = robot.find("cover")

                # if the cover wasn't found, try again
                if not cover_found:
                    # try to see the cover
                    (cover_pose, cover_found) = robot.find("cover")

                    # if the cover wasn't found, try again
                    if not cover_found:
                        # try to see the cover
                        (cover_pose, cover_found) = robot.find("cover")

                        # if the cover wasn't found, try again
                        if not cover_found:
                            # try to see the cover
                            (cover_pose, cover_found) = robot.find("cover")

                            # if the cover wasn't found, try again
                            if not cover_found:
                                # try to see the cover
                                (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again
                                if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found
Generator error:  unexpected EOF while parsing (<unknown>, line 40)  in generated source.
Prompt: # define function: check if you can see the cover, try again up to three times, waiting 3 seconds in between

Isolated Source:


Generation error: Parent function body is None.
Got result in 9.744306564331055 seconds!

Generation failed, reverting changes to cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like to work with humans
def do_you_like_to_work_with_humans(robot):
    robot.say("I like to work with humans")

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.6885251998901367 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: good job
def good_job(robot):
    robot.say("good job")

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.39280056953430176 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: build a house
def build_a_house(robot):
    # move to the table
    place_on_the_table(robot)

    # pick up the bricks
    pick_up_bricks(robot)

    # place the bricks
    place_bricks(robot)

    # pick up the roof
    pick_up_roof(robot)

    # place the roof
    place_roof(robot)

    # pick up the door
    pick_up_door(robot)

    # place the door
    place_door(robot)

    # pick up the window
    pick_up_window(robot)

    # place the window
    place_window(robot)

    # pick up the chimney
    pick_up_chimney(robot)

    # place the chimney
    place_chimney(robot)

    # pick up the foundation
    pick_up_foundation(robot)

    # place the foundation
    place_foundation(robot)

    # pick up the wall
    pick_up_wall(robot)

    # place the wall
    place_wall(robot)

    # pick up the floor
    pick_up_floor(robot)

    # place the floor
    place_floor(robot)

Prompt: # define function: build a house

Isolated Source:


def build_a_house(robot):
    place_on_the_table(robot)
    pick_up_bricks(robot)
    place_bricks(robot)
    pick_up_roof(robot)
    place_roof(robot)
    pick_up_door(robot)
    place_door(robot)
    pick_up_window(robot)
    place_window(robot)
    pick_up_chimney(robot)
    place_chimney(robot)
    pick_up_foundation(robot)
    place_foundation(robot)
    pick_up_wall(robot)
    place_wall(robot)
    pick_up_floor(robot)
    place_floor(robot)



No matches in cache, generating!

Searching generated block:
# define function: place_on_the_table(robot)
def place_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place_on_the_table(robot)
def place_on_the_table(
Isolated Source:


def place_on_the_table(robot):
    place(robot, 'table')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_bricks(robot)
def pick_up_bricks(robot):
    pick(robot, 'bricks')

Prompt: # define function: pick_up_bricks(robot)
def pick_up_bricks(
Isolated Source:


def pick_up_bricks(robot):
    pick(robot, 'bricks')



No matches in cache, generating!

Searching generated block:
# define function: place_bricks(robot)
def place_bricks(robot):
    place(robot, 'bricks')

Prompt: # define function: place_bricks(robot)
def place_bricks(
Isolated Source:


def place_bricks(robot):
    place(robot, 'bricks')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_roof(robot)
def pick_up_roof(robot):
    pick(robot, 'roof')

Prompt: # define function: pick_up_roof(robot)
def pick_up_roof(
Isolated Source:


def pick_up_roof(robot):
    pick(robot, 'roof')



No matches in cache, generating!

Searching generated block:
# define function: place_roof(robot)
def place_roof(robot):
    place(robot, 'roof')

Prompt: # define function: place_roof(robot)
def place_roof(
Isolated Source:


def place_roof(robot):
    place(robot, 'roof')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_door(robot)
def pick_up_door(robot):
    pick(robot, 'door')

Prompt: # define function: pick_up_door(robot)
def pick_up_door(
Isolated Source:


def pick_up_door(robot):
    pick(robot, 'door')



No matches in cache, generating!

Searching generated block:
# define function: place_door(robot)
def place_door(robot):
    place(robot, 'door')

Prompt: # define function: place_door(robot)
def place_door(
Isolated Source:


def place_door(robot):
    place(robot, 'door')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_window(robot)
def pick_up_window(robot):
    pick(robot, 'window')

Prompt: # define function: pick_up_window(robot)
def pick_up_window(
Isolated Source:


def pick_up_window(robot):
    pick(robot, 'window')



No matches in cache, generating!

Searching generated block:
# define function: place_window(robot)
def place_window(robot):
    place(robot, 'window')

Prompt: # define function: place_window(robot)
def place_window(
Isolated Source:


def place_window(robot):
    place(robot, 'window')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_chimney(robot)
def pick_up_chimney(robot):
    pick(robot, 'chimney')

Prompt: # define function: pick_up_chimney(robot)
def pick_up_chimney(
Isolated Source:


def pick_up_chimney(robot):
    pick(robot, 'chimney')



No matches in cache, generating!

Searching generated block:
# define function: place_chimney(robot)
def place_chimney(robot):
    place(robot, 'chimney')

Prompt: # define function: place_chimney(robot)
def place_chimney(
Isolated Source:


def place_chimney(robot):
    place(robot, 'chimney')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_foundation(robot)
def pick_up_foundation(robot):
    pick(robot, 'foundation')

Prompt: # define function: pick_up_foundation(robot)
def pick_up_foundation(
Isolated Source:


def pick_up_foundation(robot):
    pick(robot, 'foundation')



No matches in cache, generating!

Searching generated block:
# define function: place_foundation(robot)
def place_foundation(robot):
    place(robot, 'foundation')

Prompt: # define function: place_foundation(robot)
def place_foundation(
Isolated Source:


def place_foundation(robot):
    place(robot, 'foundation')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_wall(robot)
def pick_up_wall(robot):
    pick(robot, 'wall')

Prompt: # define function: pick_up_wall(robot)
def pick_up_wall(
Isolated Source:


def pick_up_wall(robot):
    pick(robot, 'wall')



No matches in cache, generating!

Searching generated block:
# define function: place_wall(robot)
def place_wall(robot):
    place(robot, 'wall')

Prompt: # define function: place_wall(robot)
def place_wall(
Isolated Source:


def place_wall(robot):
    place(robot, 'wall')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_floor(robot)
def pick_up_floor(robot):
    pick(robot, 'floor')

Prompt: # define function: pick_up_floor(robot)
def pick_up_floor(
Isolated Source:


def pick_up_floor(robot):
    pick(robot, 'floor')



No matches in cache, generating!

Searching generated block:
# define function: place_floor(robot)
def place_floor(robot):
    place(robot, 'floor')

Prompt: # define function: place_floor(robot)
def place_floor(
Isolated Source:


def place_floor(robot):
    place(robot, 'floor')


Got result in 10.351590871810913 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: push the red button
def push_the_red_button(robot):
    robot.set_digital_output(0, True)
    time.sleep(0.5)
    robot.set_digital_output(0, False)

Prompt: # define function: push the red button

Isolated Source:


def push_the_red_button(robot):
    robot.set_digital_output(0, True)
    time.sleep(0.5)
    robot.set_digital_output(0, False)


Got result in 0.9905862808227539 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the battery and place it on the base plate
def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

Prompt: # define function: pick up the battery and place it on the base plate

Isolated Source:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')


Got result in 0.9170715808868408 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten screws
def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say("I should use a screwdriver to tighten screws")

Prompt: # define function: what tool should i use to tighten screws

Isolated Source:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')


Got result in 0.8561615943908691 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten bolts to correct torque
def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say("I would use a torque wrench to tighten bolts to the correct torque.")

Prompt: # define function: what tool should i use to tighten bolts to correct torque

Isolated Source:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')


Got result in 1.1101999282836914 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say hello
def say_hello(robot):
    robot.say("hello")

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 0.3913133144378662 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like ice cream
def do_you_like_ice_cream(robot):
    robot.say("I like ice cream")

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.592585563659668 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tell me the first law of robotics
def tell_me_the_first_law_of_robotics(robot):
    robot.say("A robot may not injure a human being or, through inaction, allow a human being to come to harm.")

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 1.0110244750976562 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: can you find an apple
def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find("apple")

    if apple_found:
        robot.say("I found an apple!")
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 1.2797815799713135 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little left
def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0266258716583252 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move ten centimeters up
def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0510129928588867 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go one hundred and fifty millimeters backwards
def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.2033021450042725 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move fifteen centimeters above the die
def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.166715145111084 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: look at the die
def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.5088624954223633 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the die
def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.471158504486084 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate 33 degrees clockwise
def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.5931499004364014 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tilt seventy degrees forwards
def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.6331632137298584 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go ten centimeters up and fifteen centimeters backwards
def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.527590036392212 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw an ellipse with radii five and four centimeters
def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.04 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.5442161560058594 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up and then draw a small pentagon
def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

    waypoints = 5

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.1 * math.cos(2 * math.pi * i / 5)
        waypoint.position.y += 0.1 * math.sin(2 * math.pi * i / 5)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.244262933731079 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing
def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    # find the hammer
    (hammer_pose, hammer_found) = robot.find("hammer")

    # find the nails
    (nails_pose, nails_found) = robot.find("nails")

    # if both were found, say tools found
    if hammer_found and nails_found:
        robot.say("Tools found!")

    # if hammer was found but nails were not, say hammer found
    elif hammer_found and not nails_found:
        robot.say("Hammer found!")

    # if nails were found but hammer was not, say nails found
    elif not hammer_found and nails_found:
        robot.say("Nails found!")

    # if neither were found, say nothing found
    else:
        robot.say("Nothing found!")

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 4.1588873863220215 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: five centimeters up and four down
def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.7573354244232178 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up
def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0505445003509521 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: point four centimeters down
def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0707099437713623 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's the cube root of three rounded to two decimal points
def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, 1/3), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 1.013249397277832 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw a small circle
def draw_a_small_circle(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.05 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.2905380725860596 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: place held item on the table
def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.5530009269714355 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little backwards
def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0449538230895996 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit back the other way
def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1095316410064697 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little forwards and then to the left
def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_forwards(robot)
def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.8344948291778564 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: wait five seconds, then move a little up
def wait_five_seconds_then_move_a_little_up(robot):
    time.sleep(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    time.sleep(5)
    move_a_little_up(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_up(robot)
def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.6788444519042969 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you can't find a banana, wait a little and try one more time
def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    # find the banana
    (banana_pose, banana_found) = robot.find("banana")

    # if banana wasn't found, tell the user
    if not banana_found:
        robot.say("Can't find the banana!")
        time.sleep(1)
        (banana_pose, banana_found) = robot.find("banana")

        # if banana wasn't found, tell the user
        if not banana_found:
            robot.say("Can't find the banana!")
        else:
            robot.say("Found the banana!")
    else:
        robot.say("Found the banana!")

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        time.sleep(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 3.4785091876983643 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you see a screw, move ten centimeters above item
def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    # find the screw
    (screw_pose, screw_found) = robot.find("screw")

    # if screw wasn't found, tell the user
    if not screw_found:
        robot.say("Can't find the screw!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = screw_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.2624714374542236 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move 1.5 centimeters up
def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1677155494689941 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go 3.1 meters to the left
def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1665570735931396 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little to the left and then right, repeat three times
def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.081683397293091 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a little forwards
def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0079560279846191 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit more
def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0430564880371094 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say cheese
def say_cheese(robot):
    robot.say("cheese")

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.4152259826660156 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like puppies
def do_you_like_puppies(robot):
    robot.say("I like puppies")

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.5936989784240723 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: why do you like them
def why_do_you_like_them(robot):
    robot.say("Why do you like them?")

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.5716478824615479 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's your favourite book
def whats_your_favourite_book(robot):
    robot.say("My favourite book is The Hobbit")

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.6674187183380127 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: who's the author
def whos_the_author(robot):
    robot.say("I am ")

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.4910609722137451 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate a quarter turn anticlockwise
def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.6290221214294434 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate back the other way
def rotate_back_the_other_way(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.5850603580474854 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a random amount to the left, but less than a meter
def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meter

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.3189663887023926 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: again but half the maximum distance
def again_but_half_the_maximum_distance(robot):
    robot.set_max_distance(0.5)
    robot.go()

Prompt: # define function: again but half the maximum distance

Isolated Source:


def again_but_half_the_maximum_distance(robot):
    robot.set_max_distance(0.5)
    robot.go()


Got result in 0.7433977127075195 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: check if you can see the cover, try again up to three times, waiting 3 seconds in between
def check_if_you_can_see_the_cover_try_again_up_to_three_times_waiting_3_seconds_in_between(robot):
    # try to see the cover
    (cover_pose, cover_found) = robot.find("cover")

    # if the cover wasn't found, try again
    if not cover_found:
        # try to see the cover
        (cover_pose, cover_found) = robot.find("cover")

        # if the cover wasn't found, try again
        if not cover_found:
            # try to see the cover
            (cover_pose, cover_found) = robot.find("cover")

            # if the cover wasn't found, try again
            if not cover_found:
                # try to see the cover
                (cover_pose, cover_found) = robot.find("cover")

                # if the cover wasn't found, try again
                if not cover_found:
                    # try to see the cover
                    (cover_pose, cover_found) = robot.find("cover")

                    # if the cover wasn't found, try again
                    if not cover_found:
                        # try to see the cover
                        (cover_pose, cover_found) = robot.find("cover")

                        # if the cover wasn't found, try again
                        if not cover_found:
                            # try to see the cover
                            (cover_pose, cover_found) = robot.find("cover")

                            # if the cover wasn't found, try again
                            if not cover_found:
                                # try to see the cover
                                (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again
                                if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found
Generator error:  unexpected EOF while parsing (<unknown>, line 40)  in generated source.
Prompt: # define function: check if you can see the cover, try again up to three times, waiting 3 seconds in between

Isolated Source:


Generation error: Parent function body is None.
Got result in 9.762634038925171 seconds!

Generation failed, reverting changes to cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like to work with humans
def do_you_like_to_work_with_humans(robot):
    robot.say("I like to work with humans")

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.68939208984375 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: good job
def good_job(robot):
    robot.say("good job")

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.39348840713500977 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: build a house
def build_a_house(robot):
    # move to the table
    place_on_the_table(robot)

    # pick up the bricks
    pick_up_bricks(robot)

    # place the bricks
    place_bricks(robot)

    # pick up the roof
    pick_up_roof(robot)

    # place the roof
    place_roof(robot)

    # pick up the door
    pick_up_door(robot)

    # place the door
    place_door(robot)

    # pick up the window
    pick_up_window(robot)

    # place the window
    place_window(robot)

    # pick up the chimney
    pick_up_chimney(robot)

    # place the chimney
    place_chimney(robot)

    # pick up the foundation
    pick_up_foundation(robot)

    # place the foundation
    place_foundation(robot)

    # pick up the wall
    pick_up_wall(robot)

    # place the wall
    place_wall(robot)

    # pick up the floor
    pick_up_floor(robot)

    # place the floor
    place_floor(robot)

Prompt: # define function: build a house

Isolated Source:


def build_a_house(robot):
    place_on_the_table(robot)
    pick_up_bricks(robot)
    place_bricks(robot)
    pick_up_roof(robot)
    place_roof(robot)
    pick_up_door(robot)
    place_door(robot)
    pick_up_window(robot)
    place_window(robot)
    pick_up_chimney(robot)
    place_chimney(robot)
    pick_up_foundation(robot)
    place_foundation(robot)
    pick_up_wall(robot)
    place_wall(robot)
    pick_up_floor(robot)
    place_floor(robot)



No matches in cache, generating!

Searching generated block:
# define function: place_on_the_table(robot)
def place_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place_on_the_table(robot)
def place_on_the_table(
Isolated Source:


def place_on_the_table(robot):
    place(robot, 'table')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_bricks(robot)
def pick_up_bricks(robot):
    pick(robot, 'bricks')

Prompt: # define function: pick_up_bricks(robot)
def pick_up_bricks(
Isolated Source:


def pick_up_bricks(robot):
    pick(robot, 'bricks')



No matches in cache, generating!

Searching generated block:
# define function: place_bricks(robot)
def place_bricks(robot):
    place(robot, 'bricks')

Prompt: # define function: place_bricks(robot)
def place_bricks(
Isolated Source:


def place_bricks(robot):
    place(robot, 'bricks')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_roof(robot)
def pick_up_roof(robot):
    pick(robot, 'roof')

Prompt: # define function: pick_up_roof(robot)
def pick_up_roof(
Isolated Source:


def pick_up_roof(robot):
    pick(robot, 'roof')



No matches in cache, generating!

Searching generated block:
# define function: place_roof(robot)
def place_roof(robot):
    place(robot, 'roof')

Prompt: # define function: place_roof(robot)
def place_roof(
Isolated Source:


def place_roof(robot):
    place(robot, 'roof')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_door(robot)
def pick_up_door(robot):
    pick(robot, 'door')

Prompt: # define function: pick_up_door(robot)
def pick_up_door(
Isolated Source:


def pick_up_door(robot):
    pick(robot, 'door')



No matches in cache, generating!

Searching generated block:
# define function: place_door(robot)
def place_door(robot):
    place(robot, 'door')

Prompt: # define function: place_door(robot)
def place_door(
Isolated Source:


def place_door(robot):
    place(robot, 'door')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_window(robot)
def pick_up_window(robot):
    pick(robot, 'window')

Prompt: # define function: pick_up_window(robot)
def pick_up_window(
Isolated Source:


def pick_up_window(robot):
    pick(robot, 'window')



No matches in cache, generating!

Searching generated block:
# define function: place_window(robot)
def place_window(robot):
    place(robot, 'window')

Prompt: # define function: place_window(robot)
def place_window(
Isolated Source:


def place_window(robot):
    place(robot, 'window')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_chimney(robot)
def pick_up_chimney(robot):
    pick(robot, 'chimney')

Prompt: # define function: pick_up_chimney(robot)
def pick_up_chimney(
Isolated Source:


def pick_up_chimney(robot):
    pick(robot, 'chimney')



No matches in cache, generating!

Searching generated block:
# define function: place_chimney(robot)
def place_chimney(robot):
    place(robot, 'chimney')

Prompt: # define function: place_chimney(robot)
def place_chimney(
Isolated Source:


def place_chimney(robot):
    place(robot, 'chimney')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_foundation(robot)
def pick_up_foundation(robot):
    pick(robot, 'foundation')

Prompt: # define function: pick_up_foundation(robot)
def pick_up_foundation(
Isolated Source:


def pick_up_foundation(robot):
    pick(robot, 'foundation')



No matches in cache, generating!

Searching generated block:
# define function: place_foundation(robot)
def place_foundation(robot):
    place(robot, 'foundation')

Prompt: # define function: place_foundation(robot)
def place_foundation(
Isolated Source:


def place_foundation(robot):
    place(robot, 'foundation')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_wall(robot)
def pick_up_wall(robot):
    pick(robot, 'wall')

Prompt: # define function: pick_up_wall(robot)
def pick_up_wall(
Isolated Source:


def pick_up_wall(robot):
    pick(robot, 'wall')



No matches in cache, generating!

Searching generated block:
# define function: place_wall(robot)
def place_wall(robot):
    place(robot, 'wall')

Prompt: # define function: place_wall(robot)
def place_wall(
Isolated Source:


def place_wall(robot):
    place(robot, 'wall')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_floor(robot)
def pick_up_floor(robot):
    pick(robot, 'floor')

Prompt: # define function: pick_up_floor(robot)
def pick_up_floor(
Isolated Source:


def pick_up_floor(robot):
    pick(robot, 'floor')



No matches in cache, generating!

Searching generated block:
# define function: place_floor(robot)
def place_floor(robot):
    place(robot, 'floor')

Prompt: # define function: place_floor(robot)
def place_floor(
Isolated Source:


def place_floor(robot):
    place(robot, 'floor')


Got result in 10.372761011123657 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: push the red button
def push_the_red_button(robot):
    robot.set_digital_output(0, True)
    time.sleep(0.5)
    robot.set_digital_output(0, False)

Prompt: # define function: push the red button

Isolated Source:


def push_the_red_button(robot):
    robot.set_digital_output(0, True)
    time.sleep(0.5)
    robot.set_digital_output(0, False)


Got result in 0.9914207458496094 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the battery and place it on the base plate
def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

Prompt: # define function: pick up the battery and place it on the base plate

Isolated Source:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')


Got result in 0.9171969890594482 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten screws
def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say("I should use a screwdriver to tighten screws")

Prompt: # define function: what tool should i use to tighten screws

Isolated Source:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')


Got result in 0.8583800792694092 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten bolts to correct torque
def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say("I would use a torque wrench to tighten bolts to the correct torque.")

Prompt: # define function: what tool should i use to tighten bolts to correct torque

Isolated Source:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')


Got result in 1.111128807067871 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say hello
def say_hello(robot):
    robot.say("hello")

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 0.3968241214752197 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like ice cream
def do_you_like_ice_cream(robot):
    robot.say("I like ice cream")

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.591761589050293 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tell me the first law of robotics
def tell_me_the_first_law_of_robotics(robot):
    robot.say("A robot may not injure a human being or, through inaction, allow a human being to come to harm.")

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 1.0126068592071533 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: can you find an apple
def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find("apple")

    if apple_found:
        robot.say("I found an apple!")
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 1.2813000679016113 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little left
def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0279154777526855 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move ten centimeters up
def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0518624782562256 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go one hundred and fifty millimeters backwards
def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.204206943511963 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move fifteen centimeters above the die
def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1670129299163818 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: look at the die
def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.5109226703643799 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the die
def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.4729797840118408 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate 33 degrees clockwise
def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.594475507736206 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tilt seventy degrees forwards
def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.6325385570526123 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go ten centimeters up and fifteen centimeters backwards
def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.5281591415405273 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw an ellipse with radii five and four centimeters
def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.04 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.5443780422210693 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up and then draw a small pentagon
def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

    waypoints = 5

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.1 * math.cos(2 * math.pi * i / 5)
        waypoint.position.y += 0.1 * math.sin(2 * math.pi * i / 5)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.2386724948883057 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing
def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    # find the hammer
    (hammer_pose, hammer_found) = robot.find("hammer")

    # find the nails
    (nails_pose, nails_found) = robot.find("nails")

    # if both were found, say tools found
    if hammer_found and nails_found:
        robot.say("Tools found!")

    # if hammer was found but nails were not, say hammer found
    elif hammer_found and not nails_found:
        robot.say("Hammer found!")

    # if nails were found but hammer was not, say nails found
    elif not hammer_found and nails_found:
        robot.say("Nails found!")

    # if neither were found, say nothing found
    else:
        robot.say("Nothing found!")

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 4.164032936096191 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: five centimeters up and four down
def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.7582526206970215 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up
def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0509638786315918 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: point four centimeters down
def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0723838806152344 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's the cube root of three rounded to two decimal points
def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, 1/3), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 1.0140860080718994 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw a small circle
def draw_a_small_circle(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.05 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.2933661937713623 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: place held item on the table
def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.5522427558898926 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little backwards
def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0462279319763184 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit back the other way
def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1111881732940674 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little forwards and then to the left
def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_forwards(robot)
def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.8305702209472656 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: wait five seconds, then move a little up
def wait_five_seconds_then_move_a_little_up(robot):
    time.sleep(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    time.sleep(5)
    move_a_little_up(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_up(robot)
def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.6800715923309326 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you can't find a banana, wait a little and try one more time
def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    # find the banana
    (banana_pose, banana_found) = robot.find("banana")

    # if banana wasn't found, tell the user
    if not banana_found:
        robot.say("Can't find the banana!")
        time.sleep(1)
        (banana_pose, banana_found) = robot.find("banana")

        # if banana wasn't found, tell the user
        if not banana_found:
            robot.say("Can't find the banana!")
        else:
            robot.say("Found the banana!")
    else:
        robot.say("Found the banana!")

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        time.sleep(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 3.481234073638916 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you see a screw, move ten centimeters above item
def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    # find the screw
    (screw_pose, screw_found) = robot.find("screw")

    # if screw wasn't found, tell the user
    if not screw_found:
        robot.say("Can't find the screw!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = screw_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.2722554206848145 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move 1.5 centimeters up
def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1701128482818604 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go 3.1 meters to the left
def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.168808937072754 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little to the left and then right, repeat three times
def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.0911078453063965 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a little forwards
def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0134379863739014 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit more
def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0346803665161133 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say cheese
def say_cheese(robot):
    robot.say("cheese")

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.41442108154296875 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like puppies
def do_you_like_puppies(robot):
    robot.say("I like puppies")

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.5949735641479492 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: why do you like them
def why_do_you_like_them(robot):
    robot.say("Why do you like them?")

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.5710573196411133 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's your favourite book
def whats_your_favourite_book(robot):
    robot.say("My favourite book is The Hobbit")

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.6671874523162842 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: who's the author
def whos_the_author(robot):
    robot.say("I am ")

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.49140357971191406 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate a quarter turn anticlockwise
def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.6286242008209229 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate back the other way
def rotate_back_the_other_way(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.5859320163726807 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a random amount to the left, but less than a meter
def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meter

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.3194823265075684 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: again but half the maximum distance
def again_but_half_the_maximum_distance(robot):
    robot.set_max_distance(0.5)
    robot.go()

Prompt: # define function: again but half the maximum distance

Isolated Source:


def again_but_half_the_maximum_distance(robot):
    robot.set_max_distance(0.5)
    robot.go()


Got result in 0.7453312873840332 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: check if you can see the cover, try again up to three times, waiting 3 seconds in between
def check_if_you_can_see_the_cover_try_again_up_to_three_times_waiting_3_seconds_in_between(robot):
    # try to see the cover
    (cover_pose, cover_found) = robot.find("cover")

    # if the cover wasn't found, try again
    if not cover_found:
        # try to see the cover
        (cover_pose, cover_found) = robot.find("cover")

        # if the cover wasn't found, try again
        if not cover_found:
            # try to see the cover
            (cover_pose, cover_found) = robot.find("cover")

            # if the cover wasn't found, try again
            if not cover_found:
                # try to see the cover
                (cover_pose, cover_found) = robot.find("cover")

                # if the cover wasn't found, try again
                if not cover_found:
                    # try to see the cover
                    (cover_pose, cover_found) = robot.find("cover")

                    # if the cover wasn't found, try again
                    if not cover_found:
                        # try to see the cover
                        (cover_pose, cover_found) = robot.find("cover")

                        # if the cover wasn't found, try again
                        if not cover_found:
                            # try to see the cover
                            (cover_pose, cover_found) = robot.find("cover")

                            # if the cover wasn't found, try again
                            if not cover_found:
                                # try to see the cover
                                (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again
                                if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found
Generator error:  unexpected EOF while parsing (<unknown>, line 40)  in generated source.
Prompt: # define function: check if you can see the cover, try again up to three times, waiting 3 seconds in between

Isolated Source:


Generation error: Parent function body is None.
Got result in 9.825260162353516 seconds!

Generation failed, reverting changes to cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like to work with humans
def do_you_like_to_work_with_humans(robot):
    robot.say("I like to work with humans")

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.7118713855743408 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: good job
def good_job(robot):
    robot.say("good job")

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.4303145408630371 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: build a house
def build_a_house(robot):
    # move to the table
    place_on_the_table(robot)

    # pick up the bricks
    pick_up_bricks(robot)

    # place the bricks
    place_bricks(robot)

    # pick up the roof
    pick_up_roof(robot)

    # place the roof
    place_roof(robot)

    # pick up the door
    pick_up_door(robot)

    # place the door
    place_door(robot)

    # pick up the window
    pick_up_window(robot)

    # place the window
    place_window(robot)

    # pick up the chimney
    pick_up_chimney(robot)

    # place the chimney
    place_chimney(robot)

    # pick up the foundation
    pick_up_foundation(robot)

    # place the foundation
    place_foundation(robot)

    # pick up the wall
    pick_up_wall(robot)

    # place the wall
    place_wall(robot)

    # pick up the floor
    pick_up_floor(robot)

    # place the floor
    place_floor(robot)

Prompt: # define function: build a house

Isolated Source:


def build_a_house(robot):
    place_on_the_table(robot)
    pick_up_bricks(robot)
    place_bricks(robot)
    pick_up_roof(robot)
    place_roof(robot)
    pick_up_door(robot)
    place_door(robot)
    pick_up_window(robot)
    place_window(robot)
    pick_up_chimney(robot)
    place_chimney(robot)
    pick_up_foundation(robot)
    place_foundation(robot)
    pick_up_wall(robot)
    place_wall(robot)
    pick_up_floor(robot)
    place_floor(robot)



No matches in cache, generating!

Searching generated block:
# define function: place_on_the_table(robot)
def place_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place_on_the_table(robot)
def place_on_the_table(
Isolated Source:


def place_on_the_table(robot):
    place(robot, 'table')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_bricks(robot)
def pick_up_bricks(robot):
    pick(robot, 'bricks')

Prompt: # define function: pick_up_bricks(robot)
def pick_up_bricks(
Isolated Source:


def pick_up_bricks(robot):
    pick(robot, 'bricks')



No matches in cache, generating!

Searching generated block:
# define function: place_bricks(robot)
def place_bricks(robot):
    place(robot, 'bricks')

Prompt: # define function: place_bricks(robot)
def place_bricks(
Isolated Source:


def place_bricks(robot):
    place(robot, 'bricks')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_roof(robot)
def pick_up_roof(robot):
    pick(robot, 'roof')

Prompt: # define function: pick_up_roof(robot)
def pick_up_roof(
Isolated Source:


def pick_up_roof(robot):
    pick(robot, 'roof')



No matches in cache, generating!

Searching generated block:
# define function: place_roof(robot)
def place_roof(robot):
    place(robot, 'roof')

Prompt: # define function: place_roof(robot)
def place_roof(
Isolated Source:


def place_roof(robot):
    place(robot, 'roof')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_door(robot)
def pick_up_door(robot):
    pick(robot, 'door')

Prompt: # define function: pick_up_door(robot)
def pick_up_door(
Isolated Source:


def pick_up_door(robot):
    pick(robot, 'door')



No matches in cache, generating!

Searching generated block:
# define function: place_door(robot)
def place_door(robot):
    place(robot, 'door')

Prompt: # define function: place_door(robot)
def place_door(
Isolated Source:


def place_door(robot):
    place(robot, 'door')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_window(robot)
def pick_up_window(robot):
    pick(robot, 'window')

Prompt: # define function: pick_up_window(robot)
def pick_up_window(
Isolated Source:


def pick_up_window(robot):
    pick(robot, 'window')



No matches in cache, generating!

Searching generated block:
# define function: place_window(robot)
def place_window(robot):
    place(robot, 'window')

Prompt: # define function: place_window(robot)
def place_window(
Isolated Source:


def place_window(robot):
    place(robot, 'window')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_chimney(robot)
def pick_up_chimney(robot):
    pick(robot, 'chimney')

Prompt: # define function: pick_up_chimney(robot)
def pick_up_chimney(
Isolated Source:


def pick_up_chimney(robot):
    pick(robot, 'chimney')



No matches in cache, generating!

Searching generated block:
# define function: place_chimney(robot)
def place_chimney(robot):
    place(robot, 'chimney')

Prompt: # define function: place_chimney(robot)
def place_chimney(
Isolated Source:


def place_chimney(robot):
    place(robot, 'chimney')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_foundation(robot)
def pick_up_foundation(robot):
    pick(robot, 'foundation')

Prompt: # define function: pick_up_foundation(robot)
def pick_up_foundation(
Isolated Source:


def pick_up_foundation(robot):
    pick(robot, 'foundation')



No matches in cache, generating!

Searching generated block:
# define function: place_foundation(robot)
def place_foundation(robot):
    place(robot, 'foundation')

Prompt: # define function: place_foundation(robot)
def place_foundation(
Isolated Source:


def place_foundation(robot):
    place(robot, 'foundation')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_wall(robot)
def pick_up_wall(robot):
    pick(robot, 'wall')

Prompt: # define function: pick_up_wall(robot)
def pick_up_wall(
Isolated Source:


def pick_up_wall(robot):
    pick(robot, 'wall')



No matches in cache, generating!

Searching generated block:
# define function: place_wall(robot)
def place_wall(robot):
    place(robot, 'wall')

Prompt: # define function: place_wall(robot)
def place_wall(
Isolated Source:


def place_wall(robot):
    place(robot, 'wall')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_floor(robot)
def pick_up_floor(robot):
    pick(robot, 'floor')

Prompt: # define function: pick_up_floor(robot)
def pick_up_floor(
Isolated Source:


def pick_up_floor(robot):
    pick(robot, 'floor')



No matches in cache, generating!

Searching generated block:
# define function: place_floor(robot)
def place_floor(robot):
    place(robot, 'floor')

Prompt: # define function: place_floor(robot)
def place_floor(
Isolated Source:


def place_floor(robot):
    place(robot, 'floor')


Got result in 10.502212047576904 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: push the red button
def push_the_red_button(robot):
    robot.set_digital_output(0, True)
    time.sleep(0.5)
    robot.set_digital_output(0, False)

Prompt: # define function: push the red button

Isolated Source:


def push_the_red_button(robot):
    robot.set_digital_output(0, True)
    time.sleep(0.5)
    robot.set_digital_output(0, False)


Got result in 0.9947750568389893 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the battery and place it on the base plate
def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

Prompt: # define function: pick up the battery and place it on the base plate

Isolated Source:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')


Got result in 0.9221992492675781 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten screws
def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say("I should use a screwdriver to tighten screws")

Prompt: # define function: what tool should i use to tighten screws

Isolated Source:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')


Got result in 0.8628466129302979 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten bolts to correct torque
def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say("I would use a torque wrench to tighten bolts to the correct torque.")

Prompt: # define function: what tool should i use to tighten bolts to correct torque

Isolated Source:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')


Got result in 1.1159048080444336 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say hello
def say_hello(robot):
    robot.say("hello")

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 0.3761868476867676 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like ice cream
def do_you_like_ice_cream(robot):
    robot.say("I like ice cream")

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.5946710109710693 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tell me the first law of robotics
def tell_me_the_first_law_of_robotics(robot):
    robot.say("A robot may not injure a human being or, through inaction, allow a human being to come to harm.")

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 1.0155775547027588 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: can you find an apple
def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find("apple")

    if apple_found:
        robot.say("I found an apple!")
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 1.2839045524597168 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little left
def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0303678512573242 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move ten centimeters up
def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0515952110290527 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go one hundred and fifty millimeters backwards
def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.2068231105804443 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move fifteen centimeters above the die
def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1687138080596924 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: look at the die
def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.509624719619751 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the die
def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.47185826301574707 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate 33 degrees clockwise
def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.5940132141113281 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tilt seventy degrees forwards
def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.63034987449646 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go ten centimeters up and fifteen centimeters backwards
def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.5296940803527832 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw an ellipse with radii five and four centimeters
def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.04 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.546107769012451 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up and then draw a small pentagon
def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

    waypoints = 5

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.1 * math.cos(2 * math.pi * i / 5)
        waypoint.position.y += 0.1 * math.sin(2 * math.pi * i / 5)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.1856279373168945 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing
def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    # find the hammer
    (hammer_pose, hammer_found) = robot.find("hammer")

    # find the nails
    (nails_pose, nails_found) = robot.find("nails")

    # if both were found, say tools found
    if hammer_found and nails_found:
        robot.say("Tools found!")

    # if hammer was found but nails were not, say hammer found
    elif hammer_found and not nails_found:
        robot.say("Hammer found!")

    # if nails were found but hammer was not, say nails found
    elif not hammer_found and nails_found:
        robot.say("Nails found!")

    # if neither were found, say nothing found
    else:
        robot.say("Nothing found!")

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 4.173595666885376 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: five centimeters up and four down
def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.7630069255828857 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up
def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0538105964660645 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: point four centimeters down
def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.074153184890747 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's the cube root of three rounded to two decimal points
def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, 1/3), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 1.0143680572509766 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw a small circle
def draw_a_small_circle(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.05 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.2957963943481445 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: place held item on the table
def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.5537493228912354 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little backwards
def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0469961166381836 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit back the other way
def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1109619140625 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little forwards and then to the left
def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_forwards(robot)
def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.7747294902801514 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: wait five seconds, then move a little up
def wait_five_seconds_then_move_a_little_up(robot):
    time.sleep(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    time.sleep(5)
    move_a_little_up(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_up(robot)
def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.681262731552124 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you can't find a banana, wait a little and try one more time
def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    # find the banana
    (banana_pose, banana_found) = robot.find("banana")

    # if banana wasn't found, tell the user
    if not banana_found:
        robot.say("Can't find the banana!")
        time.sleep(1)
        (banana_pose, banana_found) = robot.find("banana")

        # if banana wasn't found, tell the user
        if not banana_found:
            robot.say("Can't find the banana!")
        else:
            robot.say("Found the banana!")
    else:
        robot.say("Found the banana!")

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        time.sleep(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 3.490152359008789 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you see a screw, move ten centimeters above item
def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    # find the screw
    (screw_pose, screw_found) = robot.find("screw")

    # if screw wasn't found, tell the user
    if not screw_found:
        robot.say("Can't find the screw!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = screw_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.271108388900757 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move 1.5 centimeters up
def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1707336902618408 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go 3.1 meters to the left
def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1692376136779785 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little to the left and then right, repeat three times
def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.0880794525146484 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a little forwards
def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.012425184249878 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit more
def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.9880030155181885 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say cheese
def say_cheese(robot):
    robot.say("cheese")

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.41533660888671875 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like puppies
def do_you_like_puppies(robot):
    robot.say("I like puppies")

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.5940778255462646 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: why do you like them
def why_do_you_like_them(robot):
    robot.say("Why do you like them?")

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.5692360401153564 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's your favourite book
def whats_your_favourite_book(robot):
    robot.say("My favourite book is The Hobbit")

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.6671764850616455 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: who's the author
def whos_the_author(robot):
    robot.say("I am ")

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.48999691009521484 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate a quarter turn anticlockwise
def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.6289904117584229 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate back the other way
def rotate_back_the_other_way(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.5846188068389893 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a random amount to the left, but less than a meter
def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meter

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.3195712566375732 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: again but half the maximum distance
def again_but_half_the_maximum_distance(robot):
    robot.set_max_distance(0.5)
    robot.go()

Prompt: # define function: again but half the maximum distance

Isolated Source:


def again_but_half_the_maximum_distance(robot):
    robot.set_max_distance(0.5)
    robot.go()


Got result in 0.7435219287872314 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: check if you can see the cover, try again up to three times, waiting 3 seconds in between
def check_if_you_can_see_the_cover_try_again_up_to_three_times_waiting_3_seconds_in_between(robot):
    # try to see the cover
    (cover_pose, cover_found) = robot.find("cover")

    # if the cover wasn't found, try again
    if not cover_found:
        # try to see the cover
        (cover_pose, cover_found) = robot.find("cover")

        # if the cover wasn't found, try again
        if not cover_found:
            # try to see the cover
            (cover_pose, cover_found) = robot.find("cover")

            # if the cover wasn't found, try again
            if not cover_found:
                # try to see the cover
                (cover_pose, cover_found) = robot.find("cover")

                # if the cover wasn't found, try again
                if not cover_found:
                    # try to see the cover
                    (cover_pose, cover_found) = robot.find("cover")

                    # if the cover wasn't found, try again
                    if not cover_found:
                        # try to see the cover
                        (cover_pose, cover_found) = robot.find("cover")

                        # if the cover wasn't found, try again
                        if not cover_found:
                            # try to see the cover
                            (cover_pose, cover_found) = robot.find("cover")

                            # if the cover wasn't found, try again
                            if not cover_found:
                                # try to see the cover
                                (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again
                                if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found
Generator error:  unexpected EOF while parsing (<unknown>, line 40)  in generated source.
Prompt: # define function: check if you can see the cover, try again up to three times, waiting 3 seconds in between

Isolated Source:


Generation error: Parent function body is None.
Got result in 9.779109954833984 seconds!

Generation failed, reverting changes to cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like to work with humans
def do_you_like_to_work_with_humans(robot):
    robot.say("I like to work with humans")

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.6927323341369629 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: good job
def good_job(robot):
    robot.say("good job")

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.39406681060791016 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: build a house
def build_a_house(robot):
    # move to the table
    place_on_the_table(robot)

    # pick up the bricks
    pick_up_bricks(robot)

    # place the bricks
    place_bricks(robot)

    # pick up the roof
    pick_up_roof(robot)

    # place the roof
    place_roof(robot)

    # pick up the door
    pick_up_door(robot)

    # place the door
    place_door(robot)

    # pick up the window
    pick_up_window(robot)

    # place the window
    place_window(robot)

    # pick up the chimney
    pick_up_chimney(robot)

    # place the chimney
    place_chimney(robot)

    # pick up the foundation
    pick_up_foundation(robot)

    # place the foundation
    place_foundation(robot)

    # pick up the wall
    pick_up_wall(robot)

    # place the wall
    place_wall(robot)

    # pick up the floor
    pick_up_floor(robot)

    # place the floor
    place_floor(robot)

Prompt: # define function: build a house

Isolated Source:


def build_a_house(robot):
    place_on_the_table(robot)
    pick_up_bricks(robot)
    place_bricks(robot)
    pick_up_roof(robot)
    place_roof(robot)
    pick_up_door(robot)
    place_door(robot)
    pick_up_window(robot)
    place_window(robot)
    pick_up_chimney(robot)
    place_chimney(robot)
    pick_up_foundation(robot)
    place_foundation(robot)
    pick_up_wall(robot)
    place_wall(robot)
    pick_up_floor(robot)
    place_floor(robot)



No matches in cache, generating!

Searching generated block:
# define function: place_on_the_table(robot)
def place_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place_on_the_table(robot)
def place_on_the_table(
Isolated Source:


def place_on_the_table(robot):
    place(robot, 'table')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_bricks(robot)
def pick_up_bricks(robot):
    pick(robot, 'bricks')

Prompt: # define function: pick_up_bricks(robot)
def pick_up_bricks(
Isolated Source:


def pick_up_bricks(robot):
    pick(robot, 'bricks')



No matches in cache, generating!

Searching generated block:
# define function: place_bricks(robot)
def place_bricks(robot):
    place(robot, 'bricks')

Prompt: # define function: place_bricks(robot)
def place_bricks(
Isolated Source:


def place_bricks(robot):
    place(robot, 'bricks')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_roof(robot)
def pick_up_roof(robot):
    pick(robot, 'roof')

Prompt: # define function: pick_up_roof(robot)
def pick_up_roof(
Isolated Source:


def pick_up_roof(robot):
    pick(robot, 'roof')



No matches in cache, generating!

Searching generated block:
# define function: place_roof(robot)
def place_roof(robot):
    place(robot, 'roof')

Prompt: # define function: place_roof(robot)
def place_roof(
Isolated Source:


def place_roof(robot):
    place(robot, 'roof')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_door(robot)
def pick_up_door(robot):
    pick(robot, 'door')

Prompt: # define function: pick_up_door(robot)
def pick_up_door(
Isolated Source:


def pick_up_door(robot):
    pick(robot, 'door')



No matches in cache, generating!

Searching generated block:
# define function: place_door(robot)
def place_door(robot):
    place(robot, 'door')

Prompt: # define function: place_door(robot)
def place_door(
Isolated Source:


def place_door(robot):
    place(robot, 'door')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_window(robot)
def pick_up_window(robot):
    pick(robot, 'window')

Prompt: # define function: pick_up_window(robot)
def pick_up_window(
Isolated Source:


def pick_up_window(robot):
    pick(robot, 'window')



No matches in cache, generating!

Searching generated block:
# define function: place_window(robot)
def place_window(robot):
    place(robot, 'window')

Prompt: # define function: place_window(robot)
def place_window(
Isolated Source:


def place_window(robot):
    place(robot, 'window')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_chimney(robot)
def pick_up_chimney(robot):
    pick(robot, 'chimney')

Prompt: # define function: pick_up_chimney(robot)
def pick_up_chimney(
Isolated Source:


def pick_up_chimney(robot):
    pick(robot, 'chimney')



No matches in cache, generating!

Searching generated block:
# define function: place_chimney(robot)
def place_chimney(robot):
    place(robot, 'chimney')

Prompt: # define function: place_chimney(robot)
def place_chimney(
Isolated Source:


def place_chimney(robot):
    place(robot, 'chimney')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_foundation(robot)
def pick_up_foundation(robot):
    pick(robot, 'foundation')

Prompt: # define function: pick_up_foundation(robot)
def pick_up_foundation(
Isolated Source:


def pick_up_foundation(robot):
    pick(robot, 'foundation')



No matches in cache, generating!

Searching generated block:
# define function: place_foundation(robot)
def place_foundation(robot):
    place(robot, 'foundation')

Prompt: # define function: place_foundation(robot)
def place_foundation(
Isolated Source:


def place_foundation(robot):
    place(robot, 'foundation')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_wall(robot)
def pick_up_wall(robot):
    pick(robot, 'wall')

Prompt: # define function: pick_up_wall(robot)
def pick_up_wall(
Isolated Source:


def pick_up_wall(robot):
    pick(robot, 'wall')



No matches in cache, generating!

Searching generated block:
# define function: place_wall(robot)
def place_wall(robot):
    place(robot, 'wall')

Prompt: # define function: place_wall(robot)
def place_wall(
Isolated Source:


def place_wall(robot):
    place(robot, 'wall')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_floor(robot)
def pick_up_floor(robot):
    pick(robot, 'floor')

Prompt: # define function: pick_up_floor(robot)
def pick_up_floor(
Isolated Source:


def pick_up_floor(robot):
    pick(robot, 'floor')



No matches in cache, generating!

Searching generated block:
# define function: place_floor(robot)
def place_floor(robot):
    place(robot, 'floor')

Prompt: # define function: place_floor(robot)
def place_floor(
Isolated Source:


def place_floor(robot):
    place(robot, 'floor')


Got result in 10.328065156936646 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: push the red button
def push_the_red_button(robot):
    robot.set_digital_output(0, True)
    time.sleep(0.5)
    robot.set_digital_output(0, False)

Prompt: # define function: push the red button

Isolated Source:


def push_the_red_button(robot):
    robot.set_digital_output(0, True)
    time.sleep(0.5)
    robot.set_digital_output(0, False)


Got result in 0.9937441349029541 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the battery and place it on the base plate
def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

Prompt: # define function: pick up the battery and place it on the base plate

Isolated Source:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')


Got result in 0.9208636283874512 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten screws
def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say("I should use a screwdriver to tighten screws")

Prompt: # define function: what tool should i use to tighten screws

Isolated Source:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')


Got result in 0.8629648685455322 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten bolts to correct torque
def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say("I would use a torque wrench to tighten bolts to the correct torque.")

Prompt: # define function: what tool should i use to tighten bolts to correct torque

Isolated Source:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')


Got result in 1.1119122505187988 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say hello
def say_hello(robot):
    robot.say("hello")

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 0.3769998550415039 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like ice cream
def do_you_like_ice_cream(robot):
    robot.say("I like ice cream")

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.5933680534362793 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tell me the first law of robotics
def tell_me_the_first_law_of_robotics(robot):
    robot.say("A robot may not injure a human being or, through inaction, allow a human being to come to harm.")

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 1.0133914947509766 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: can you find an apple
def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find("apple")

    if apple_found:
        robot.say("I found an apple!")
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 1.2836744785308838 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little left
def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0280768871307373 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move ten centimeters up
def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0525743961334229 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go one hundred and fifty millimeters backwards
def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.2057504653930664 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move fifteen centimeters above the die
def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1681256294250488 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: look at the die
def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.5102224349975586 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the die
def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.47316765785217285 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate 33 degrees clockwise
def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.5937035083770752 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tilt seventy degrees forwards
def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.6334478855133057 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go ten centimeters up and fifteen centimeters backwards
def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.5284788608551025 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw an ellipse with radii five and four centimeters
def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.04 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.5456771850585938 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up and then draw a small pentagon
def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

    waypoints = 5

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.1 * math.cos(2 * math.pi * i / 5)
        waypoint.position.y += 0.1 * math.sin(2 * math.pi * i / 5)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.185222864151001 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing
def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    # find the hammer
    (hammer_pose, hammer_found) = robot.find("hammer")

    # find the nails
    (nails_pose, nails_found) = robot.find("nails")

    # if both were found, say tools found
    if hammer_found and nails_found:
        robot.say("Tools found!")

    # if hammer was found but nails were not, say hammer found
    elif hammer_found and not nails_found:
        robot.say("Hammer found!")

    # if nails were found but hammer was not, say nails found
    elif not hammer_found and nails_found:
        robot.say("Nails found!")

    # if neither were found, say nothing found
    else:
        robot.say("Nothing found!")

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 4.171788692474365 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: five centimeters up and four down
def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.7638700008392334 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up
def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.057898759841919 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: point four centimeters down
def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.073509931564331 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's the cube root of three rounded to two decimal points
def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, 1/3), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 1.0150203704833984 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw a small circle
def draw_a_small_circle(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.05 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.296039581298828 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: place held item on the table
def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.554924488067627 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little backwards
def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0471525192260742 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit back the other way
def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1117589473724365 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little forwards and then to the left
def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_forwards(robot)
def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.779075860977173 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: wait five seconds, then move a little up
def wait_five_seconds_then_move_a_little_up(robot):
    time.sleep(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    time.sleep(5)
    move_a_little_up(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_up(robot)
def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.6862430572509766 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you can't find a banana, wait a little and try one more time
def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    # find the banana
    (banana_pose, banana_found) = robot.find("banana")

    # if banana wasn't found, tell the user
    if not banana_found:
        robot.say("Can't find the banana!")
        time.sleep(1)
        (banana_pose, banana_found) = robot.find("banana")

        # if banana wasn't found, tell the user
        if not banana_found:
            robot.say("Can't find the banana!")
        else:
            robot.say("Found the banana!")
    else:
        robot.say("Found the banana!")

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        time.sleep(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 3.4887161254882812 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you see a screw, move ten centimeters above item
def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    # find the screw
    (screw_pose, screw_found) = robot.find("screw")

    # if screw wasn't found, tell the user
    if not screw_found:
        robot.say("Can't find the screw!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = screw_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.273893356323242 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move 1.5 centimeters up
def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1701416969299316 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go 3.1 meters to the left
def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1708238124847412 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little to the left and then right, repeat three times
def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.089536428451538 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a little forwards
def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0116991996765137 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit more
def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.9896283149719238 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say cheese
def say_cheese(robot):
    robot.say("cheese")

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.41522908210754395 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like puppies
def do_you_like_puppies(robot):
    robot.say("I like puppies")

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.5940122604370117 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: why do you like them
def why_do_you_like_them(robot):
    robot.say("Why do you like them?")

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.5717554092407227 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's your favourite book
def whats_your_favourite_book(robot):
    robot.say("My favourite book is The Hobbit")

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.669316291809082 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: who's the author
def whos_the_author(robot):
    robot.say("I am ")

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.49052906036376953 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate a quarter turn anticlockwise
def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.6288747787475586 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate back the other way
def rotate_back_the_other_way(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.5868573188781738 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a random amount to the left, but less than a meter
def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meter

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.3190608024597168 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: again but half the maximum distance
def again_but_half_the_maximum_distance(robot):
    robot.set_max_distance(0.5)
    robot.go()

Prompt: # define function: again but half the maximum distance

Isolated Source:


def again_but_half_the_maximum_distance(robot):
    robot.set_max_distance(0.5)
    robot.go()


Got result in 0.7440738677978516 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: check if you can see the cover, try again up to three times, waiting 3 seconds in between
def check_if_you_can_see_the_cover_try_again_up_to_three_times_waiting_3_seconds_in_between(robot):
    # try to see the cover
    (cover_pose, cover_found) = robot.find("cover")

    # if the cover wasn't found, try again
    if not cover_found:
        # try to see the cover
        (cover_pose, cover_found) = robot.find("cover")

        # if the cover wasn't found, try again
        if not cover_found:
            # try to see the cover
            (cover_pose, cover_found) = robot.find("cover")

            # if the cover wasn't found, try again
            if not cover_found:
                # try to see the cover
                (cover_pose, cover_found) = robot.find("cover")

                # if the cover wasn't found, try again
                if not cover_found:
                    # try to see the cover
                    (cover_pose, cover_found) = robot.find("cover")

                    # if the cover wasn't found, try again
                    if not cover_found:
                        # try to see the cover
                        (cover_pose, cover_found) = robot.find("cover")

                        # if the cover wasn't found, try again
                        if not cover_found:
                            # try to see the cover
                            (cover_pose, cover_found) = robot.find("cover")

                            # if the cover wasn't found, try again
                            if not cover_found:
                                # try to see the cover
                                (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again
                                if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found
Generator error:  unexpected EOF while parsing (<unknown>, line 40)  in generated source.
Prompt: # define function: check if you can see the cover, try again up to three times, waiting 3 seconds in between

Isolated Source:


Generation error: Parent function body is None.
Got result in 9.781182765960693 seconds!

Generation failed, reverting changes to cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like to work with humans
def do_you_like_to_work_with_humans(robot):
    robot.say("I like to work with humans")

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.692194938659668 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: good job
def good_job(robot):
    robot.say("good job")

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.3950004577636719 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: build a house
def build_a_house(robot):
    # move to the table
    place_on_the_table(robot)

    # pick up the bricks
    pick_up_bricks(robot)

    # place the bricks
    place_bricks(robot)

    # pick up the roof
    pick_up_roof(robot)

    # place the roof
    place_roof(robot)

    # pick up the door
    pick_up_door(robot)

    # place the door
    place_door(robot)

    # pick up the window
    pick_up_window(robot)

    # place the window
    place_window(robot)

    # pick up the chimney
    pick_up_chimney(robot)

    # place the chimney
    place_chimney(robot)

    # pick up the foundation
    pick_up_foundation(robot)

    # place the foundation
    place_foundation(robot)

    # pick up the wall
    pick_up_wall(robot)

    # place the wall
    place_wall(robot)

    # pick up the floor
    pick_up_floor(robot)

    # place the floor
    place_floor(robot)

Prompt: # define function: build a house

Isolated Source:


def build_a_house(robot):
    place_on_the_table(robot)
    pick_up_bricks(robot)
    place_bricks(robot)
    pick_up_roof(robot)
    place_roof(robot)
    pick_up_door(robot)
    place_door(robot)
    pick_up_window(robot)
    place_window(robot)
    pick_up_chimney(robot)
    place_chimney(robot)
    pick_up_foundation(robot)
    place_foundation(robot)
    pick_up_wall(robot)
    place_wall(robot)
    pick_up_floor(robot)
    place_floor(robot)



No matches in cache, generating!

Searching generated block:
# define function: place_on_the_table(robot)
def place_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place_on_the_table(robot)
def place_on_the_table(
Isolated Source:


def place_on_the_table(robot):
    place(robot, 'table')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_bricks(robot)
def pick_up_bricks(robot):
    pick(robot, 'bricks')

Prompt: # define function: pick_up_bricks(robot)
def pick_up_bricks(
Isolated Source:


def pick_up_bricks(robot):
    pick(robot, 'bricks')



No matches in cache, generating!

Searching generated block:
# define function: place_bricks(robot)
def place_bricks(robot):
    place(robot, 'bricks')

Prompt: # define function: place_bricks(robot)
def place_bricks(
Isolated Source:


def place_bricks(robot):
    place(robot, 'bricks')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_roof(robot)
def pick_up_roof(robot):
    pick(robot, 'roof')

Prompt: # define function: pick_up_roof(robot)
def pick_up_roof(
Isolated Source:


def pick_up_roof(robot):
    pick(robot, 'roof')



No matches in cache, generating!

Searching generated block:
# define function: place_roof(robot)
def place_roof(robot):
    place(robot, 'roof')

Prompt: # define function: place_roof(robot)
def place_roof(
Isolated Source:


def place_roof(robot):
    place(robot, 'roof')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_door(robot)
def pick_up_door(robot):
    pick(robot, 'door')

Prompt: # define function: pick_up_door(robot)
def pick_up_door(
Isolated Source:


def pick_up_door(robot):
    pick(robot, 'door')



No matches in cache, generating!

Searching generated block:
# define function: place_door(robot)
def place_door(robot):
    place(robot, 'door')

Prompt: # define function: place_door(robot)
def place_door(
Isolated Source:


def place_door(robot):
    place(robot, 'door')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_window(robot)
def pick_up_window(robot):
    pick(robot, 'window')

Prompt: # define function: pick_up_window(robot)
def pick_up_window(
Isolated Source:


def pick_up_window(robot):
    pick(robot, 'window')



No matches in cache, generating!

Searching generated block:
# define function: place_window(robot)
def place_window(robot):
    place(robot, 'window')

Prompt: # define function: place_window(robot)
def place_window(
Isolated Source:


def place_window(robot):
    place(robot, 'window')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_chimney(robot)
def pick_up_chimney(robot):
    pick(robot, 'chimney')

Prompt: # define function: pick_up_chimney(robot)
def pick_up_chimney(
Isolated Source:


def pick_up_chimney(robot):
    pick(robot, 'chimney')



No matches in cache, generating!

Searching generated block:
# define function: place_chimney(robot)
def place_chimney(robot):
    place(robot, 'chimney')

Prompt: # define function: place_chimney(robot)
def place_chimney(
Isolated Source:


def place_chimney(robot):
    place(robot, 'chimney')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_foundation(robot)
def pick_up_foundation(robot):
    pick(robot, 'foundation')

Prompt: # define function: pick_up_foundation(robot)
def pick_up_foundation(
Isolated Source:


def pick_up_foundation(robot):
    pick(robot, 'foundation')



No matches in cache, generating!

Searching generated block:
# define function: place_foundation(robot)
def place_foundation(robot):
    place(robot, 'foundation')

Prompt: # define function: place_foundation(robot)
def place_foundation(
Isolated Source:


def place_foundation(robot):
    place(robot, 'foundation')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_wall(robot)
def pick_up_wall(robot):
    pick(robot, 'wall')

Prompt: # define function: pick_up_wall(robot)
def pick_up_wall(
Isolated Source:


def pick_up_wall(robot):
    pick(robot, 'wall')



No matches in cache, generating!

Searching generated block:
# define function: place_wall(robot)
def place_wall(robot):
    place(robot, 'wall')

Prompt: # define function: place_wall(robot)
def place_wall(
Isolated Source:


def place_wall(robot):
    place(robot, 'wall')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_floor(robot)
def pick_up_floor(robot):
    pick(robot, 'floor')

Prompt: # define function: pick_up_floor(robot)
def pick_up_floor(
Isolated Source:


def pick_up_floor(robot):
    pick(robot, 'floor')



No matches in cache, generating!

Searching generated block:
# define function: place_floor(robot)
def place_floor(robot):
    place(robot, 'floor')

Prompt: # define function: place_floor(robot)
def place_floor(
Isolated Source:


def place_floor(robot):
    place(robot, 'floor')


Got result in 10.330037593841553 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: push the red button
def push_the_red_button(robot):
    robot.set_digital_output(0, True)
    time.sleep(0.5)
    robot.set_digital_output(0, False)

Prompt: # define function: push the red button

Isolated Source:


def push_the_red_button(robot):
    robot.set_digital_output(0, True)
    time.sleep(0.5)
    robot.set_digital_output(0, False)


Got result in 0.9935410022735596 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the battery and place it on the base plate
def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

Prompt: # define function: pick up the battery and place it on the base plate

Isolated Source:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')


Got result in 0.9201195240020752 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten screws
def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say("I should use a screwdriver to tighten screws")

Prompt: # define function: what tool should i use to tighten screws

Isolated Source:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')


Got result in 0.8615074157714844 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten bolts to correct torque
def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say("I would use a torque wrench to tighten bolts to the correct torque.")

Prompt: # define function: what tool should i use to tighten bolts to correct torque

Isolated Source:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')


Got result in 1.1128969192504883 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say hello
def say_hello(robot):
    robot.say("hello")

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 0.3762788772583008 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like ice cream
def do_you_like_ice_cream(robot):
    robot.say("I like ice cream")

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.5943608283996582 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tell me the first law of robotics
def tell_me_the_first_law_of_robotics(robot):
    robot.say("A robot may not injure a human being or, through inaction, allow a human being to come to harm.")

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 1.015151023864746 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: can you find an apple
def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find("apple")

    if apple_found:
        robot.say("I found an apple!")
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 1.2836110591888428 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little left
def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0301368236541748 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move ten centimeters up
def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.052807331085205 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go one hundred and fifty millimeters backwards
def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.206815242767334 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move fifteen centimeters above the die
def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.169541358947754 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: look at the die
def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.510674238204956 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the die
def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.47192907333374023 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate 33 degrees clockwise
def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.5939090251922607 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tilt seventy degrees forwards
def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.633087158203125 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go ten centimeters up and fifteen centimeters backwards
def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.529930830001831 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw an ellipse with radii five and four centimeters
def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.04 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.5503501892089844 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up and then draw a small pentagon
def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

    waypoints = 5

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.1 * math.cos(2 * math.pi * i / 5)
        waypoint.position.y += 0.1 * math.sin(2 * math.pi * i / 5)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.1910150051116943 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing
def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    # find the hammer
    (hammer_pose, hammer_found) = robot.find("hammer")

    # find the nails
    (nails_pose, nails_found) = robot.find("nails")

    # if both were found, say tools found
    if hammer_found and nails_found:
        robot.say("Tools found!")

    # if hammer was found but nails were not, say hammer found
    elif hammer_found and not nails_found:
        robot.say("Hammer found!")

    # if nails were found but hammer was not, say nails found
    elif not hammer_found and nails_found:
        robot.say("Nails found!")

    # if neither were found, say nothing found
    else:
        robot.say("Nothing found!")

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 4.171406269073486 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: five centimeters up and four down
def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.76358962059021 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up
def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0540904998779297 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: point four centimeters down
def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.074960708618164 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's the cube root of three rounded to two decimal points
def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, 1/3), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 1.0161259174346924 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw a small circle
def draw_a_small_circle(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.05 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.2982590198516846 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: place held item on the table
def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.5561096668243408 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little backwards
def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0491900444030762 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit back the other way
def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.114443063735962 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little forwards and then to the left
def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_forwards(robot)
def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.780433416366577 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: wait five seconds, then move a little up
def wait_five_seconds_then_move_a_little_up(robot):
    time.sleep(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    time.sleep(5)
    move_a_little_up(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_up(robot)
def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.6864230632781982 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you can't find a banana, wait a little and try one more time
def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    # find the banana
    (banana_pose, banana_found) = robot.find("banana")

    # if banana wasn't found, tell the user
    if not banana_found:
        robot.say("Can't find the banana!")
        time.sleep(1)
        (banana_pose, banana_found) = robot.find("banana")

        # if banana wasn't found, tell the user
        if not banana_found:
            robot.say("Can't find the banana!")
        else:
            robot.say("Found the banana!")
    else:
        robot.say("Found the banana!")

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        time.sleep(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 3.490440845489502 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you see a screw, move ten centimeters above item
def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    # find the screw
    (screw_pose, screw_found) = robot.find("screw")

    # if screw wasn't found, tell the user
    if not screw_found:
        robot.say("Can't find the screw!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = screw_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.271407127380371 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move 1.5 centimeters up
def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.169248342514038 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go 3.1 meters to the left
def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1702213287353516 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little to the left and then right, repeat three times
def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.0891623497009277 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a little forwards
def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0117027759552002 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit more
def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.9910790920257568 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say cheese
def say_cheese(robot):
    robot.say("cheese")

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.4159891605377197 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like puppies
def do_you_like_puppies(robot):
    robot.say("I like puppies")

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.596980094909668 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: why do you like them
def why_do_you_like_them(robot):
    robot.say("Why do you like them?")

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.5736138820648193 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's your favourite book
def whats_your_favourite_book(robot):
    robot.say("My favourite book is The Hobbit")

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.6695466041564941 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: who's the author
def whos_the_author(robot):
    robot.say("I am ")

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.4917607307434082 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate a quarter turn anticlockwise
def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.6312503814697266 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate back the other way
def rotate_back_the_other_way(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.5875263214111328 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a random amount to the left, but less than a meter
def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meter

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.3194985389709473 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: again but half the maximum distance
def again_but_half_the_maximum_distance(robot):
    robot.set_max_distance(0.5)
    robot.go()

Prompt: # define function: again but half the maximum distance

Isolated Source:


def again_but_half_the_maximum_distance(robot):
    robot.set_max_distance(0.5)
    robot.go()


Got result in 0.7461154460906982 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: check if you can see the cover, try again up to three times, waiting 3 seconds in between
def check_if_you_can_see_the_cover_try_again_up_to_three_times_waiting_3_seconds_in_between(robot):
    # try to see the cover
    (cover_pose, cover_found) = robot.find("cover")

    # if the cover wasn't found, try again
    if not cover_found:
        # try to see the cover
        (cover_pose, cover_found) = robot.find("cover")

        # if the cover wasn't found, try again
        if not cover_found:
            # try to see the cover
            (cover_pose, cover_found) = robot.find("cover")

            # if the cover wasn't found, try again
            if not cover_found:
                # try to see the cover
                (cover_pose, cover_found) = robot.find("cover")

                # if the cover wasn't found, try again
                if not cover_found:
                    # try to see the cover
                    (cover_pose, cover_found) = robot.find("cover")

                    # if the cover wasn't found, try again
                    if not cover_found:
                        # try to see the cover
                        (cover_pose, cover_found) = robot.find("cover")

                        # if the cover wasn't found, try again
                        if not cover_found:
                            # try to see the cover
                            (cover_pose, cover_found) = robot.find("cover")

                            # if the cover wasn't found, try again
                            if not cover_found:
                                # try to see the cover
                                (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again
                                if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found
Generator error:  unexpected EOF while parsing (<unknown>, line 40)  in generated source.
Prompt: # define function: check if you can see the cover, try again up to three times, waiting 3 seconds in between

Isolated Source:


Generation error: Parent function body is None.
Got result in 9.798028230667114 seconds!

Generation failed, reverting changes to cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like to work with humans
def do_you_like_to_work_with_humans(robot):
    robot.say("I like to work with humans")

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.6930139064788818 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: good job
def good_job(robot):
    robot.say("good job")

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.3953700065612793 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: build a house
def build_a_house(robot):
    # move to the table
    place_on_the_table(robot)

    # pick up the bricks
    pick_up_bricks(robot)

    # place the bricks
    place_bricks(robot)

    # pick up the roof
    pick_up_roof(robot)

    # place the roof
    place_roof(robot)

    # pick up the door
    pick_up_door(robot)

    # place the door
    place_door(robot)

    # pick up the window
    pick_up_window(robot)

    # place the window
    place_window(robot)

    # pick up the chimney
    pick_up_chimney(robot)

    # place the chimney
    place_chimney(robot)

    # pick up the foundation
    pick_up_foundation(robot)

    # place the foundation
    place_foundation(robot)

    # pick up the wall
    pick_up_wall(robot)

    # place the wall
    place_wall(robot)

    # pick up the floor
    pick_up_floor(robot)

    # place the floor
    place_floor(robot)

Prompt: # define function: build a house

Isolated Source:


def build_a_house(robot):
    place_on_the_table(robot)
    pick_up_bricks(robot)
    place_bricks(robot)
    pick_up_roof(robot)
    place_roof(robot)
    pick_up_door(robot)
    place_door(robot)
    pick_up_window(robot)
    place_window(robot)
    pick_up_chimney(robot)
    place_chimney(robot)
    pick_up_foundation(robot)
    place_foundation(robot)
    pick_up_wall(robot)
    place_wall(robot)
    pick_up_floor(robot)
    place_floor(robot)



No matches in cache, generating!

Searching generated block:
# define function: place_on_the_table(robot)
def place_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place_on_the_table(robot)
def place_on_the_table(
Isolated Source:


def place_on_the_table(robot):
    place(robot, 'table')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_bricks(robot)
def pick_up_bricks(robot):
    pick(robot, 'bricks')

Prompt: # define function: pick_up_bricks(robot)
def pick_up_bricks(
Isolated Source:


def pick_up_bricks(robot):
    pick(robot, 'bricks')



No matches in cache, generating!

Searching generated block:
# define function: place_bricks(robot)
def place_bricks(robot):
    place(robot, 'bricks')

Prompt: # define function: place_bricks(robot)
def place_bricks(
Isolated Source:


def place_bricks(robot):
    place(robot, 'bricks')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_roof(robot)
def pick_up_roof(robot):
    pick(robot, 'roof')

Prompt: # define function: pick_up_roof(robot)
def pick_up_roof(
Isolated Source:


def pick_up_roof(robot):
    pick(robot, 'roof')



No matches in cache, generating!

Searching generated block:
# define function: place_roof(robot)
def place_roof(robot):
    place(robot, 'roof')

Prompt: # define function: place_roof(robot)
def place_roof(
Isolated Source:


def place_roof(robot):
    place(robot, 'roof')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_door(robot)
def pick_up_door(robot):
    pick(robot, 'door')

Prompt: # define function: pick_up_door(robot)
def pick_up_door(
Isolated Source:


def pick_up_door(robot):
    pick(robot, 'door')



No matches in cache, generating!

Searching generated block:
# define function: place_door(robot)
def place_door(robot):
    place(robot, 'door')

Prompt: # define function: place_door(robot)
def place_door(
Isolated Source:


def place_door(robot):
    place(robot, 'door')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_window(robot)
def pick_up_window(robot):
    pick(robot, 'window')

Prompt: # define function: pick_up_window(robot)
def pick_up_window(
Isolated Source:


def pick_up_window(robot):
    pick(robot, 'window')



No matches in cache, generating!

Searching generated block:
# define function: place_window(robot)
def place_window(robot):
    place(robot, 'window')

Prompt: # define function: place_window(robot)
def place_window(
Isolated Source:


def place_window(robot):
    place(robot, 'window')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_chimney(robot)
def pick_up_chimney(robot):
    pick(robot, 'chimney')

Prompt: # define function: pick_up_chimney(robot)
def pick_up_chimney(
Isolated Source:


def pick_up_chimney(robot):
    pick(robot, 'chimney')



No matches in cache, generating!

Searching generated block:
# define function: place_chimney(robot)
def place_chimney(robot):
    place(robot, 'chimney')

Prompt: # define function: place_chimney(robot)
def place_chimney(
Isolated Source:


def place_chimney(robot):
    place(robot, 'chimney')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_foundation(robot)
def pick_up_foundation(robot):
    pick(robot, 'foundation')

Prompt: # define function: pick_up_foundation(robot)
def pick_up_foundation(
Isolated Source:


def pick_up_foundation(robot):
    pick(robot, 'foundation')



No matches in cache, generating!

Searching generated block:
# define function: place_foundation(robot)
def place_foundation(robot):
    place(robot, 'foundation')

Prompt: # define function: place_foundation(robot)
def place_foundation(
Isolated Source:


def place_foundation(robot):
    place(robot, 'foundation')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_wall(robot)
def pick_up_wall(robot):
    pick(robot, 'wall')

Prompt: # define function: pick_up_wall(robot)
def pick_up_wall(
Isolated Source:


def pick_up_wall(robot):
    pick(robot, 'wall')



No matches in cache, generating!

Searching generated block:
# define function: place_wall(robot)
def place_wall(robot):
    place(robot, 'wall')

Prompt: # define function: place_wall(robot)
def place_wall(
Isolated Source:


def place_wall(robot):
    place(robot, 'wall')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_floor(robot)
def pick_up_floor(robot):
    pick(robot, 'floor')

Prompt: # define function: pick_up_floor(robot)
def pick_up_floor(
Isolated Source:


def pick_up_floor(robot):
    pick(robot, 'floor')



No matches in cache, generating!

Searching generated block:
# define function: place_floor(robot)
def place_floor(robot):
    place(robot, 'floor')

Prompt: # define function: place_floor(robot)
def place_floor(
Isolated Source:


def place_floor(robot):
    place(robot, 'floor')


Got result in 10.337955713272095 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: push the red button
def push_the_red_button(robot):
    robot.set_digital_output(0, True)
    time.sleep(0.5)
    robot.set_digital_output(0, False)

Prompt: # define function: push the red button

Isolated Source:


def push_the_red_button(robot):
    robot.set_digital_output(0, True)
    time.sleep(0.5)
    robot.set_digital_output(0, False)


Got result in 0.9928672313690186 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the battery and place it on the base plate
def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

Prompt: # define function: pick up the battery and place it on the base plate

Isolated Source:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')


Got result in 0.9197292327880859 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten screws
def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say("I should use a screwdriver to tighten screws")

Prompt: # define function: what tool should i use to tighten screws

Isolated Source:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')


Got result in 0.8630950450897217 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten bolts to correct torque
def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say("I would use a torque wrench to tighten bolts to the correct torque.")

Prompt: # define function: what tool should i use to tighten bolts to correct torque

Isolated Source:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')


Got result in 1.115142822265625 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say hello
def say_hello(robot):
    robot.say("hello")

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 0.37715959548950195 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like ice cream
def do_you_like_ice_cream(robot):
    robot.say("I like ice cream")

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.5945713520050049 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tell me the first law of robotics
def tell_me_the_first_law_of_robotics(robot):
    robot.say("A robot may not injure a human being or, through inaction, allow a human being to come to harm.")

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 1.0143673419952393 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: can you find an apple
def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find("apple")

    if apple_found:
        robot.say("I found an apple!")
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 1.2846605777740479 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little left
def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0315687656402588 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move ten centimeters up
def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0549747943878174 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go one hundred and fifty millimeters backwards
def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.2060792446136475 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move fifteen centimeters above the die
def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1705660820007324 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: look at the die
def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.5111498832702637 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the die
def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.4732332229614258 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate 33 degrees clockwise
def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.5945949554443359 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tilt seventy degrees forwards
def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.6334235668182373 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go ten centimeters up and fifteen centimeters backwards
def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.5330040454864502 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw an ellipse with radii five and four centimeters
def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.04 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.5519208908081055 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up and then draw a small pentagon
def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

    waypoints = 5

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.1 * math.cos(2 * math.pi * i / 5)
        waypoint.position.y += 0.1 * math.sin(2 * math.pi * i / 5)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.1923046112060547 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing
def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    # find the hammer
    (hammer_pose, hammer_found) = robot.find("hammer")

    # find the nails
    (nails_pose, nails_found) = robot.find("nails")

    # if both were found, say tools found
    if hammer_found and nails_found:
        robot.say("Tools found!")

    # if hammer was found but nails were not, say hammer found
    elif hammer_found and not nails_found:
        robot.say("Hammer found!")

    # if nails were found but hammer was not, say nails found
    elif not hammer_found and nails_found:
        robot.say("Nails found!")

    # if neither were found, say nothing found
    else:
        robot.say("Nothing found!")

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 4.172210693359375 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: five centimeters up and four down
def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.7632904052734375 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up
def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0544281005859375 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: point four centimeters down
def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.074955701828003 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's the cube root of three rounded to two decimal points
def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, 1/3), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 1.0171880722045898 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw a small circle
def draw_a_small_circle(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.05 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.2967395782470703 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: place held item on the table
def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.5557446479797363 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little backwards
def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0481579303741455 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit back the other way
def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1133766174316406 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little forwards and then to the left
def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_forwards(robot)
def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.7794132232666016 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: wait five seconds, then move a little up
def wait_five_seconds_then_move_a_little_up(robot):
    time.sleep(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    time.sleep(5)
    move_a_little_up(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_up(robot)
def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.68599271774292 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you can't find a banana, wait a little and try one more time
def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    # find the banana
    (banana_pose, banana_found) = robot.find("banana")

    # if banana wasn't found, tell the user
    if not banana_found:
        robot.say("Can't find the banana!")
        time.sleep(1)
        (banana_pose, banana_found) = robot.find("banana")

        # if banana wasn't found, tell the user
        if not banana_found:
            robot.say("Can't find the banana!")
        else:
            robot.say("Found the banana!")
    else:
        robot.say("Found the banana!")

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        time.sleep(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 3.4884376525878906 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you see a screw, move ten centimeters above item
def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    # find the screw
    (screw_pose, screw_found) = robot.find("screw")

    # if screw wasn't found, tell the user
    if not screw_found:
        robot.say("Can't find the screw!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = screw_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.273012161254883 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move 1.5 centimeters up
def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1694765090942383 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go 3.1 meters to the left
def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1698296070098877 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little to the left and then right, repeat three times
def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.0880579948425293 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a little forwards
def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0105175971984863 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit more
def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.9902451038360596 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say cheese
def say_cheese(robot):
    robot.say("cheese")

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.41556644439697266 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like puppies
def do_you_like_puppies(robot):
    robot.say("I like puppies")

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.5958702564239502 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: why do you like them
def why_do_you_like_them(robot):
    robot.say("Why do you like them?")

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.5724689960479736 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's your favourite book
def whats_your_favourite_book(robot):
    robot.say("My favourite book is The Hobbit")

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.668287992477417 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: who's the author
def whos_the_author(robot):
    robot.say("I am ")

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.4900631904602051 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate a quarter turn anticlockwise
def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.6285319328308105 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate back the other way
def rotate_back_the_other_way(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.5857322216033936 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a random amount to the left, but less than a meter
def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meter

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.318389654159546 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: again but half the maximum distance
def again_but_half_the_maximum_distance(robot):
    robot.set_max_distance(0.5)
    robot.go()

Prompt: # define function: again but half the maximum distance

Isolated Source:


def again_but_half_the_maximum_distance(robot):
    robot.set_max_distance(0.5)
    robot.go()


Got result in 0.745628833770752 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: check if you can see the cover, try again up to three times, waiting 3 seconds in between
def check_if_you_can_see_the_cover_try_again_up_to_three_times_waiting_3_seconds_in_between(robot):
    # try to see the cover
    (cover_pose, cover_found) = robot.find("cover")

    # if the cover wasn't found, try again
    if not cover_found:
        # try to see the cover
        (cover_pose, cover_found) = robot.find("cover")

        # if the cover wasn't found, try again
        if not cover_found:
            # try to see the cover
            (cover_pose, cover_found) = robot.find("cover")

            # if the cover wasn't found, try again
            if not cover_found:
                # try to see the cover
                (cover_pose, cover_found) = robot.find("cover")

                # if the cover wasn't found, try again
                if not cover_found:
                    # try to see the cover
                    (cover_pose, cover_found) = robot.find("cover")

                    # if the cover wasn't found, try again
                    if not cover_found:
                        # try to see the cover
                        (cover_pose, cover_found) = robot.find("cover")

                        # if the cover wasn't found, try again
                        if not cover_found:
                            # try to see the cover
                            (cover_pose, cover_found) = robot.find("cover")

                            # if the cover wasn't found, try again
                            if not cover_found:
                                # try to see the cover
                                (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again
                                if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found
Generator error:  unexpected EOF while parsing (<unknown>, line 40)  in generated source.
Prompt: # define function: check if you can see the cover, try again up to three times, waiting 3 seconds in between

Isolated Source:


Generation error: Parent function body is None.
Got result in 9.78822922706604 seconds!

Generation failed, reverting changes to cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like to work with humans
def do_you_like_to_work_with_humans(robot):
    robot.say("I like to work with humans")

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.6933486461639404 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: good job
def good_job(robot):
    robot.say("good job")

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.3956286907196045 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: build a house
def build_a_house(robot):
    # move to the table
    place_on_the_table(robot)

    # pick up the bricks
    pick_up_bricks(robot)

    # place the bricks
    place_bricks(robot)

    # pick up the roof
    pick_up_roof(robot)

    # place the roof
    place_roof(robot)

    # pick up the door
    pick_up_door(robot)

    # place the door
    place_door(robot)

    # pick up the window
    pick_up_window(robot)

    # place the window
    place_window(robot)

    # pick up the chimney
    pick_up_chimney(robot)

    # place the chimney
    place_chimney(robot)

    # pick up the foundation
    pick_up_foundation(robot)

    # place the foundation
    place_foundation(robot)

    # pick up the wall
    pick_up_wall(robot)

    # place the wall
    place_wall(robot)

    # pick up the floor
    pick_up_floor(robot)

    # place the floor
    place_floor(robot)

Prompt: # define function: build a house

Isolated Source:


def build_a_house(robot):
    place_on_the_table(robot)
    pick_up_bricks(robot)
    place_bricks(robot)
    pick_up_roof(robot)
    place_roof(robot)
    pick_up_door(robot)
    place_door(robot)
    pick_up_window(robot)
    place_window(robot)
    pick_up_chimney(robot)
    place_chimney(robot)
    pick_up_foundation(robot)
    place_foundation(robot)
    pick_up_wall(robot)
    place_wall(robot)
    pick_up_floor(robot)
    place_floor(robot)



No matches in cache, generating!

Searching generated block:
# define function: place_on_the_table(robot)
def place_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place_on_the_table(robot)
def place_on_the_table(
Isolated Source:


def place_on_the_table(robot):
    place(robot, 'table')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_bricks(robot)
def pick_up_bricks(robot):
    pick(robot, 'bricks')

Prompt: # define function: pick_up_bricks(robot)
def pick_up_bricks(
Isolated Source:


def pick_up_bricks(robot):
    pick(robot, 'bricks')



No matches in cache, generating!

Searching generated block:
# define function: place_bricks(robot)
def place_bricks(robot):
    place(robot, 'bricks')

Prompt: # define function: place_bricks(robot)
def place_bricks(
Isolated Source:


def place_bricks(robot):
    place(robot, 'bricks')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_roof(robot)
def pick_up_roof(robot):
    pick(robot, 'roof')

Prompt: # define function: pick_up_roof(robot)
def pick_up_roof(
Isolated Source:


def pick_up_roof(robot):
    pick(robot, 'roof')



No matches in cache, generating!

Searching generated block:
# define function: place_roof(robot)
def place_roof(robot):
    place(robot, 'roof')

Prompt: # define function: place_roof(robot)
def place_roof(
Isolated Source:


def place_roof(robot):
    place(robot, 'roof')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_door(robot)
def pick_up_door(robot):
    pick(robot, 'door')

Prompt: # define function: pick_up_door(robot)
def pick_up_door(
Isolated Source:


def pick_up_door(robot):
    pick(robot, 'door')



No matches in cache, generating!

Searching generated block:
# define function: place_door(robot)
def place_door(robot):
    place(robot, 'door')

Prompt: # define function: place_door(robot)
def place_door(
Isolated Source:


def place_door(robot):
    place(robot, 'door')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_window(robot)
def pick_up_window(robot):
    pick(robot, 'window')

Prompt: # define function: pick_up_window(robot)
def pick_up_window(
Isolated Source:


def pick_up_window(robot):
    pick(robot, 'window')



No matches in cache, generating!

Searching generated block:
# define function: place_window(robot)
def place_window(robot):
    place(robot, 'window')

Prompt: # define function: place_window(robot)
def place_window(
Isolated Source:


def place_window(robot):
    place(robot, 'window')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_chimney(robot)
def pick_up_chimney(robot):
    pick(robot, 'chimney')

Prompt: # define function: pick_up_chimney(robot)
def pick_up_chimney(
Isolated Source:


def pick_up_chimney(robot):
    pick(robot, 'chimney')



No matches in cache, generating!

Searching generated block:
# define function: place_chimney(robot)
def place_chimney(robot):
    place(robot, 'chimney')

Prompt: # define function: place_chimney(robot)
def place_chimney(
Isolated Source:


def place_chimney(robot):
    place(robot, 'chimney')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_foundation(robot)
def pick_up_foundation(robot):
    pick(robot, 'foundation')

Prompt: # define function: pick_up_foundation(robot)
def pick_up_foundation(
Isolated Source:


def pick_up_foundation(robot):
    pick(robot, 'foundation')



No matches in cache, generating!

Searching generated block:
# define function: place_foundation(robot)
def place_foundation(robot):
    place(robot, 'foundation')

Prompt: # define function: place_foundation(robot)
def place_foundation(
Isolated Source:


def place_foundation(robot):
    place(robot, 'foundation')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_wall(robot)
def pick_up_wall(robot):
    pick(robot, 'wall')

Prompt: # define function: pick_up_wall(robot)
def pick_up_wall(
Isolated Source:


def pick_up_wall(robot):
    pick(robot, 'wall')



No matches in cache, generating!

Searching generated block:
# define function: place_wall(robot)
def place_wall(robot):
    place(robot, 'wall')

Prompt: # define function: place_wall(robot)
def place_wall(
Isolated Source:


def place_wall(robot):
    place(robot, 'wall')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_floor(robot)
def pick_up_floor(robot):
    pick(robot, 'floor')

Prompt: # define function: pick_up_floor(robot)
def pick_up_floor(
Isolated Source:


def pick_up_floor(robot):
    pick(robot, 'floor')



No matches in cache, generating!

Searching generated block:
# define function: place_floor(robot)
def place_floor(robot):
    place(robot, 'floor')

Prompt: # define function: place_floor(robot)
def place_floor(
Isolated Source:


def place_floor(robot):
    place(robot, 'floor')


Got result in 10.332636594772339 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: push the red button
def push_the_red_button(robot):
    robot.set_digital_output(0, True)
    time.sleep(0.5)
    robot.set_digital_output(0, False)

Prompt: # define function: push the red button

Isolated Source:


def push_the_red_button(robot):
    robot.set_digital_output(0, True)
    time.sleep(0.5)
    robot.set_digital_output(0, False)


Got result in 0.9932794570922852 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the battery and place it on the base plate
def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

Prompt: # define function: pick up the battery and place it on the base plate

Isolated Source:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')


Got result in 0.9205417633056641 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten screws
def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say("I should use a screwdriver to tighten screws")

Prompt: # define function: what tool should i use to tighten screws

Isolated Source:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')


Got result in 0.8628067970275879 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten bolts to correct torque
def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say("I would use a torque wrench to tighten bolts to the correct torque.")

Prompt: # define function: what tool should i use to tighten bolts to correct torque

Isolated Source:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')


Got result in 1.113804817199707 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say hello
def say_hello(robot):
    robot.say("hello")

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 0.3765723705291748 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like ice cream
def do_you_like_ice_cream(robot):
    robot.say("I like ice cream")

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.5949580669403076 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tell me the first law of robotics
def tell_me_the_first_law_of_robotics(robot):
    robot.say("A robot may not injure a human being or, through inaction, allow a human being to come to harm.")

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 1.0145907402038574 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: can you find an apple
def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find("apple")

    if apple_found:
        robot.say("I found an apple!")
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 1.2835605144500732 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little left
def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.030306100845337 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move ten centimeters up
def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0536377429962158 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go one hundred and fifty millimeters backwards
def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.205803394317627 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move fifteen centimeters above the die
def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1687521934509277 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: look at the die
def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.5110299587249756 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the die
def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.4723942279815674 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate 33 degrees clockwise
def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.5942990779876709 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tilt seventy degrees forwards
def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.6326062679290771 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go ten centimeters up and fifteen centimeters backwards
def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.52933669090271 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw an ellipse with radii five and four centimeters
def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.04 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.5502331256866455 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up and then draw a small pentagon
def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

    waypoints = 5

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.1 * math.cos(2 * math.pi * i / 5)
        waypoint.position.y += 0.1 * math.sin(2 * math.pi * i / 5)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.1895968914031982 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing
def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    # find the hammer
    (hammer_pose, hammer_found) = robot.find("hammer")

    # find the nails
    (nails_pose, nails_found) = robot.find("nails")

    # if both were found, say tools found
    if hammer_found and nails_found:
        robot.say("Tools found!")

    # if hammer was found but nails were not, say hammer found
    elif hammer_found and not nails_found:
        robot.say("Hammer found!")

    # if nails were found but hammer was not, say nails found
    elif not hammer_found and nails_found:
        robot.say("Nails found!")

    # if neither were found, say nothing found
    else:
        robot.say("Nothing found!")

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 4.170961856842041 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: five centimeters up and four down
def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.7639636993408203 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up
def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0532031059265137 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: point four centimeters down
def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0727856159210205 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's the cube root of three rounded to two decimal points
def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, 1/3), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 1.0163872241973877 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw a small circle
def draw_a_small_circle(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.05 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.29819655418396 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: place held item on the table
def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.5560219287872314 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little backwards
def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.048638105392456 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit back the other way
def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1141064167022705 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little forwards and then to the left
def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_forwards(robot)
def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.7789063453674316 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: wait five seconds, then move a little up
def wait_five_seconds_then_move_a_little_up(robot):
    time.sleep(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    time.sleep(5)
    move_a_little_up(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_up(robot)
def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.6853983402252197 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you can't find a banana, wait a little and try one more time
def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    # find the banana
    (banana_pose, banana_found) = robot.find("banana")

    # if banana wasn't found, tell the user
    if not banana_found:
        robot.say("Can't find the banana!")
        time.sleep(1)
        (banana_pose, banana_found) = robot.find("banana")

        # if banana wasn't found, tell the user
        if not banana_found:
            robot.say("Can't find the banana!")
        else:
            robot.say("Found the banana!")
    else:
        robot.say("Found the banana!")

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        time.sleep(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 3.4878528118133545 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you see a screw, move ten centimeters above item
def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    # find the screw
    (screw_pose, screw_found) = robot.find("screw")

    # if screw wasn't found, tell the user
    if not screw_found:
        robot.say("Can't find the screw!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = screw_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.271357774734497 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move 1.5 centimeters up
def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.169752597808838 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go 3.1 meters to the left
def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1696445941925049 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little to the left and then right, repeat three times
def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.0902271270751953 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a little forwards
def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0114936828613281 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit more
def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.9910509586334229 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say cheese
def say_cheese(robot):
    robot.say("cheese")

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.415355920791626 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like puppies
def do_you_like_puppies(robot):
    robot.say("I like puppies")

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.5963995456695557 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: why do you like them
def why_do_you_like_them(robot):
    robot.say("Why do you like them?")

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.5725336074829102 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's your favourite book
def whats_your_favourite_book(robot):
    robot.say("My favourite book is The Hobbit")

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.6708621978759766 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: who's the author
def whos_the_author(robot):
    robot.say("I am ")

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.49188780784606934 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate a quarter turn anticlockwise
def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.6301259994506836 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate back the other way
def rotate_back_the_other_way(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.5860669612884521 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a random amount to the left, but less than a meter
def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meter

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.3201117515563965 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: again but half the maximum distance
def again_but_half_the_maximum_distance(robot):
    robot.set_max_distance(0.5)
    robot.go()

Prompt: # define function: again but half the maximum distance

Isolated Source:


def again_but_half_the_maximum_distance(robot):
    robot.set_max_distance(0.5)
    robot.go()


Got result in 0.7445518970489502 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: check if you can see the cover, try again up to three times, waiting 3 seconds in between
def check_if_you_can_see_the_cover_try_again_up_to_three_times_waiting_3_seconds_in_between(robot):
    # try to see the cover
    (cover_pose, cover_found) = robot.find("cover")

    # if the cover wasn't found, try again
    if not cover_found:
        # try to see the cover
        (cover_pose, cover_found) = robot.find("cover")

        # if the cover wasn't found, try again
        if not cover_found:
            # try to see the cover
            (cover_pose, cover_found) = robot.find("cover")

            # if the cover wasn't found, try again
            if not cover_found:
                # try to see the cover
                (cover_pose, cover_found) = robot.find("cover")

                # if the cover wasn't found, try again
                if not cover_found:
                    # try to see the cover
                    (cover_pose, cover_found) = robot.find("cover")

                    # if the cover wasn't found, try again
                    if not cover_found:
                        # try to see the cover
                        (cover_pose, cover_found) = robot.find("cover")

                        # if the cover wasn't found, try again
                        if not cover_found:
                            # try to see the cover
                            (cover_pose, cover_found) = robot.find("cover")

                            # if the cover wasn't found, try again
                            if not cover_found:
                                # try to see the cover
                                (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again
                                if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found
Generator error:  unexpected EOF while parsing (<unknown>, line 40)  in generated source.
Prompt: # define function: check if you can see the cover, try again up to three times, waiting 3 seconds in between

Isolated Source:


Generation error: Parent function body is None.
Got result in 9.792614221572876 seconds!

Generation failed, reverting changes to cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like to work with humans
def do_you_like_to_work_with_humans(robot):
    robot.say("I like to work with humans")

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.6930837631225586 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: good job
def good_job(robot):
    robot.say("good job")

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.3947129249572754 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: build a house
def build_a_house(robot):
    # move to the table
    place_on_the_table(robot)

    # pick up the bricks
    pick_up_bricks(robot)

    # place the bricks
    place_bricks(robot)

    # pick up the roof
    pick_up_roof(robot)

    # place the roof
    place_roof(robot)

    # pick up the door
    pick_up_door(robot)

    # place the door
    place_door(robot)

    # pick up the window
    pick_up_window(robot)

    # place the window
    place_window(robot)

    # pick up the chimney
    pick_up_chimney(robot)

    # place the chimney
    place_chimney(robot)

    # pick up the foundation
    pick_up_foundation(robot)

    # place the foundation
    place_foundation(robot)

    # pick up the wall
    pick_up_wall(robot)

    # place the wall
    place_wall(robot)

    # pick up the floor
    pick_up_floor(robot)

    # place the floor
    place_floor(robot)

Prompt: # define function: build a house

Isolated Source:


def build_a_house(robot):
    place_on_the_table(robot)
    pick_up_bricks(robot)
    place_bricks(robot)
    pick_up_roof(robot)
    place_roof(robot)
    pick_up_door(robot)
    place_door(robot)
    pick_up_window(robot)
    place_window(robot)
    pick_up_chimney(robot)
    place_chimney(robot)
    pick_up_foundation(robot)
    place_foundation(robot)
    pick_up_wall(robot)
    place_wall(robot)
    pick_up_floor(robot)
    place_floor(robot)



No matches in cache, generating!

Searching generated block:
# define function: place_on_the_table(robot)
def place_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place_on_the_table(robot)
def place_on_the_table(
Isolated Source:


def place_on_the_table(robot):
    place(robot, 'table')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_bricks(robot)
def pick_up_bricks(robot):
    pick(robot, 'bricks')

Prompt: # define function: pick_up_bricks(robot)
def pick_up_bricks(
Isolated Source:


def pick_up_bricks(robot):
    pick(robot, 'bricks')



No matches in cache, generating!

Searching generated block:
# define function: place_bricks(robot)
def place_bricks(robot):
    place(robot, 'bricks')

Prompt: # define function: place_bricks(robot)
def place_bricks(
Isolated Source:


def place_bricks(robot):
    place(robot, 'bricks')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_roof(robot)
def pick_up_roof(robot):
    pick(robot, 'roof')

Prompt: # define function: pick_up_roof(robot)
def pick_up_roof(
Isolated Source:


def pick_up_roof(robot):
    pick(robot, 'roof')



No matches in cache, generating!

Searching generated block:
# define function: place_roof(robot)
def place_roof(robot):
    place(robot, 'roof')

Prompt: # define function: place_roof(robot)
def place_roof(
Isolated Source:


def place_roof(robot):
    place(robot, 'roof')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_door(robot)
def pick_up_door(robot):
    pick(robot, 'door')

Prompt: # define function: pick_up_door(robot)
def pick_up_door(
Isolated Source:


def pick_up_door(robot):
    pick(robot, 'door')



No matches in cache, generating!

Searching generated block:
# define function: place_door(robot)
def place_door(robot):
    place(robot, 'door')

Prompt: # define function: place_door(robot)
def place_door(
Isolated Source:


def place_door(robot):
    place(robot, 'door')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_window(robot)
def pick_up_window(robot):
    pick(robot, 'window')

Prompt: # define function: pick_up_window(robot)
def pick_up_window(
Isolated Source:


def pick_up_window(robot):
    pick(robot, 'window')



No matches in cache, generating!

Searching generated block:
# define function: place_window(robot)
def place_window(robot):
    place(robot, 'window')

Prompt: # define function: place_window(robot)
def place_window(
Isolated Source:


def place_window(robot):
    place(robot, 'window')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_chimney(robot)
def pick_up_chimney(robot):
    pick(robot, 'chimney')

Prompt: # define function: pick_up_chimney(robot)
def pick_up_chimney(
Isolated Source:


def pick_up_chimney(robot):
    pick(robot, 'chimney')



No matches in cache, generating!

Searching generated block:
# define function: place_chimney(robot)
def place_chimney(robot):
    place(robot, 'chimney')

Prompt: # define function: place_chimney(robot)
def place_chimney(
Isolated Source:


def place_chimney(robot):
    place(robot, 'chimney')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_foundation(robot)
def pick_up_foundation(robot):
    pick(robot, 'foundation')

Prompt: # define function: pick_up_foundation(robot)
def pick_up_foundation(
Isolated Source:


def pick_up_foundation(robot):
    pick(robot, 'foundation')



No matches in cache, generating!

Searching generated block:
# define function: place_foundation(robot)
def place_foundation(robot):
    place(robot, 'foundation')

Prompt: # define function: place_foundation(robot)
def place_foundation(
Isolated Source:


def place_foundation(robot):
    place(robot, 'foundation')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_wall(robot)
def pick_up_wall(robot):
    pick(robot, 'wall')

Prompt: # define function: pick_up_wall(robot)
def pick_up_wall(
Isolated Source:


def pick_up_wall(robot):
    pick(robot, 'wall')



No matches in cache, generating!

Searching generated block:
# define function: place_wall(robot)
def place_wall(robot):
    place(robot, 'wall')

Prompt: # define function: place_wall(robot)
def place_wall(
Isolated Source:


def place_wall(robot):
    place(robot, 'wall')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_floor(robot)
def pick_up_floor(robot):
    pick(robot, 'floor')

Prompt: # define function: pick_up_floor(robot)
def pick_up_floor(
Isolated Source:


def pick_up_floor(robot):
    pick(robot, 'floor')



No matches in cache, generating!

Searching generated block:
# define function: place_floor(robot)
def place_floor(robot):
    place(robot, 'floor')

Prompt: # define function: place_floor(robot)
def place_floor(
Isolated Source:


def place_floor(robot):
    place(robot, 'floor')


Got result in 10.33297848701477 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: push the red button
def push_the_red_button(robot):
    robot.set_digital_output(0, True)
    time.sleep(0.5)
    robot.set_digital_output(0, False)

Prompt: # define function: push the red button

Isolated Source:


def push_the_red_button(robot):
    robot.set_digital_output(0, True)
    time.sleep(0.5)
    robot.set_digital_output(0, False)


Got result in 0.9935019016265869 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the battery and place it on the base plate
def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

Prompt: # define function: pick up the battery and place it on the base plate

Isolated Source:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')


Got result in 0.9205763339996338 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten screws
def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say("I should use a screwdriver to tighten screws")

Prompt: # define function: what tool should i use to tighten screws

Isolated Source:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')


Got result in 0.8623232841491699 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten bolts to correct torque
def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say("I would use a torque wrench to tighten bolts to the correct torque.")

Prompt: # define function: what tool should i use to tighten bolts to correct torque

Isolated Source:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')


Got result in 1.1132748126983643 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say hello
def say_hello(robot):
    robot.say("hello")

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 0.37662172317504883 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like ice cream
def do_you_like_ice_cream(robot):
    robot.say("I like ice cream")

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.5948479175567627 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tell me the first law of robotics
def tell_me_the_first_law_of_robotics(robot):
    robot.say("A robot may not injure a human being or, through inaction, allow a human being to come to harm.")

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 1.0152387619018555 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: can you find an apple
def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find("apple")

    if apple_found:
        robot.say("I found an apple!")
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 1.2844629287719727 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little left
def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0306580066680908 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move ten centimeters up
def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.05517578125 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go one hundred and fifty millimeters backwards
def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.2077455520629883 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move fifteen centimeters above the die
def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1696650981903076 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: look at the die
def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.5109057426452637 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the die
def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.47292160987854004 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate 33 degrees clockwise
def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.5950484275817871 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tilt seventy degrees forwards
def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.6336877346038818 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go ten centimeters up and fifteen centimeters backwards
def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.532740831375122 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw an ellipse with radii five and four centimeters
def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.04 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.5521039962768555 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up and then draw a small pentagon
def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

    waypoints = 5

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.1 * math.cos(2 * math.pi * i / 5)
        waypoint.position.y += 0.1 * math.sin(2 * math.pi * i / 5)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.1941030025482178 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing
def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    # find the hammer
    (hammer_pose, hammer_found) = robot.find("hammer")

    # find the nails
    (nails_pose, nails_found) = robot.find("nails")

    # if both were found, say tools found
    if hammer_found and nails_found:
        robot.say("Tools found!")

    # if hammer was found but nails were not, say hammer found
    elif hammer_found and not nails_found:
        robot.say("Hammer found!")

    # if nails were found but hammer was not, say nails found
    elif not hammer_found and nails_found:
        robot.say("Nails found!")

    # if neither were found, say nothing found
    else:
        robot.say("Nothing found!")

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 4.174286842346191 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: five centimeters up and four down
def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.7643866539001465 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up
def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.054490566253662 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: point four centimeters down
def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0745279788970947 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's the cube root of three rounded to two decimal points
def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, 1/3), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 1.0172576904296875 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw a small circle
def draw_a_small_circle(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.05 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.2982327938079834 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: place held item on the table
def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.5566287040710449 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little backwards
def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0507299900054932 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit back the other way
def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1131651401519775 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little forwards and then to the left
def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_forwards(robot)
def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.7809877395629883 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: wait five seconds, then move a little up
def wait_five_seconds_then_move_a_little_up(robot):
    time.sleep(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    time.sleep(5)
    move_a_little_up(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_up(robot)
def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.6856331825256348 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you can't find a banana, wait a little and try one more time
def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    # find the banana
    (banana_pose, banana_found) = robot.find("banana")

    # if banana wasn't found, tell the user
    if not banana_found:
        robot.say("Can't find the banana!")
        time.sleep(1)
        (banana_pose, banana_found) = robot.find("banana")

        # if banana wasn't found, tell the user
        if not banana_found:
            robot.say("Can't find the banana!")
        else:
            robot.say("Found the banana!")
    else:
        robot.say("Found the banana!")

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        time.sleep(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 3.4917702674865723 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you see a screw, move ten centimeters above item
def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    # find the screw
    (screw_pose, screw_found) = robot.find("screw")

    # if screw wasn't found, tell the user
    if not screw_found:
        robot.say("Can't find the screw!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = screw_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.2739856243133545 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move 1.5 centimeters up
def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.170515775680542 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go 3.1 meters to the left
def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.170229196548462 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little to the left and then right, repeat three times
def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.089216947555542 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a little forwards
def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0118179321289062 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit more
def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.990788459777832 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say cheese
def say_cheese(robot):
    robot.say("cheese")

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.4146080017089844 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like puppies
def do_you_like_puppies(robot):
    robot.say("I like puppies")

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.597597599029541 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: why do you like them
def why_do_you_like_them(robot):
    robot.say("Why do you like them?")

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.5733213424682617 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's your favourite book
def whats_your_favourite_book(robot):
    robot.say("My favourite book is The Hobbit")

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.6699330806732178 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: who's the author
def whos_the_author(robot):
    robot.say("I am ")

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.49121522903442383 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate a quarter turn anticlockwise
def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.6285755634307861 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate back the other way
def rotate_back_the_other_way(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.5858008861541748 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a random amount to the left, but less than a meter
def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meter

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.3204424381256104 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: again but half the maximum distance
def again_but_half_the_maximum_distance(robot):
    robot.set_max_distance(0.5)
    robot.go()

Prompt: # define function: again but half the maximum distance

Isolated Source:


def again_but_half_the_maximum_distance(robot):
    robot.set_max_distance(0.5)
    robot.go()


Got result in 0.7459931373596191 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: check if you can see the cover, try again up to three times, waiting 3 seconds in between
def check_if_you_can_see_the_cover_try_again_up_to_three_times_waiting_3_seconds_in_between(robot):
    # try to see the cover
    (cover_pose, cover_found) = robot.find("cover")

    # if the cover wasn't found, try again
    if not cover_found:
        # try to see the cover
        (cover_pose, cover_found) = robot.find("cover")

        # if the cover wasn't found, try again
        if not cover_found:
            # try to see the cover
            (cover_pose, cover_found) = robot.find("cover")

            # if the cover wasn't found, try again
            if not cover_found:
                # try to see the cover
                (cover_pose, cover_found) = robot.find("cover")

                # if the cover wasn't found, try again
                if not cover_found:
                    # try to see the cover
                    (cover_pose, cover_found) = robot.find("cover")

                    # if the cover wasn't found, try again
                    if not cover_found:
                        # try to see the cover
                        (cover_pose, cover_found) = robot.find("cover")

                        # if the cover wasn't found, try again
                        if not cover_found:
                            # try to see the cover
                            (cover_pose, cover_found) = robot.find("cover")

                            # if the cover wasn't found, try again
                            if not cover_found:
                                # try to see the cover
                                (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again
                                if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found
Generator error:  unexpected EOF while parsing (<unknown>, line 40)  in generated source.
Prompt: # define function: check if you can see the cover, try again up to three times, waiting 3 seconds in between

Isolated Source:


Generation error: Parent function body is None.
Got result in 9.791098594665527 seconds!

Generation failed, reverting changes to cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like to work with humans
def do_you_like_to_work_with_humans(robot):
    robot.say("I like to work with humans")

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.6939554214477539 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: good job
def good_job(robot):
    robot.say("good job")

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.39564037322998047 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: build a house
def build_a_house(robot):
    # move to the table
    place_on_the_table(robot)

    # pick up the bricks
    pick_up_bricks(robot)

    # place the bricks
    place_bricks(robot)

    # pick up the roof
    pick_up_roof(robot)

    # place the roof
    place_roof(robot)

    # pick up the door
    pick_up_door(robot)

    # place the door
    place_door(robot)

    # pick up the window
    pick_up_window(robot)

    # place the window
    place_window(robot)

    # pick up the chimney
    pick_up_chimney(robot)

    # place the chimney
    place_chimney(robot)

    # pick up the foundation
    pick_up_foundation(robot)

    # place the foundation
    place_foundation(robot)

    # pick up the wall
    pick_up_wall(robot)

    # place the wall
    place_wall(robot)

    # pick up the floor
    pick_up_floor(robot)

    # place the floor
    place_floor(robot)

Prompt: # define function: build a house

Isolated Source:


def build_a_house(robot):
    place_on_the_table(robot)
    pick_up_bricks(robot)
    place_bricks(robot)
    pick_up_roof(robot)
    place_roof(robot)
    pick_up_door(robot)
    place_door(robot)
    pick_up_window(robot)
    place_window(robot)
    pick_up_chimney(robot)
    place_chimney(robot)
    pick_up_foundation(robot)
    place_foundation(robot)
    pick_up_wall(robot)
    place_wall(robot)
    pick_up_floor(robot)
    place_floor(robot)



No matches in cache, generating!

Searching generated block:
# define function: place_on_the_table(robot)
def place_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place_on_the_table(robot)
def place_on_the_table(
Isolated Source:


def place_on_the_table(robot):
    place(robot, 'table')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_bricks(robot)
def pick_up_bricks(robot):
    pick(robot, 'bricks')

Prompt: # define function: pick_up_bricks(robot)
def pick_up_bricks(
Isolated Source:


def pick_up_bricks(robot):
    pick(robot, 'bricks')



No matches in cache, generating!

Searching generated block:
# define function: place_bricks(robot)
def place_bricks(robot):
    place(robot, 'bricks')

Prompt: # define function: place_bricks(robot)
def place_bricks(
Isolated Source:


def place_bricks(robot):
    place(robot, 'bricks')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_roof(robot)
def pick_up_roof(robot):
    pick(robot, 'roof')

Prompt: # define function: pick_up_roof(robot)
def pick_up_roof(
Isolated Source:


def pick_up_roof(robot):
    pick(robot, 'roof')



No matches in cache, generating!

Searching generated block:
# define function: place_roof(robot)
def place_roof(robot):
    place(robot, 'roof')

Prompt: # define function: place_roof(robot)
def place_roof(
Isolated Source:


def place_roof(robot):
    place(robot, 'roof')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_door(robot)
def pick_up_door(robot):
    pick(robot, 'door')

Prompt: # define function: pick_up_door(robot)
def pick_up_door(
Isolated Source:


def pick_up_door(robot):
    pick(robot, 'door')



No matches in cache, generating!

Searching generated block:
# define function: place_door(robot)
def place_door(robot):
    place(robot, 'door')

Prompt: # define function: place_door(robot)
def place_door(
Isolated Source:


def place_door(robot):
    place(robot, 'door')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_window(robot)
def pick_up_window(robot):
    pick(robot, 'window')

Prompt: # define function: pick_up_window(robot)
def pick_up_window(
Isolated Source:


def pick_up_window(robot):
    pick(robot, 'window')



No matches in cache, generating!

Searching generated block:
# define function: place_window(robot)
def place_window(robot):
    place(robot, 'window')

Prompt: # define function: place_window(robot)
def place_window(
Isolated Source:


def place_window(robot):
    place(robot, 'window')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_chimney(robot)
def pick_up_chimney(robot):
    pick(robot, 'chimney')

Prompt: # define function: pick_up_chimney(robot)
def pick_up_chimney(
Isolated Source:


def pick_up_chimney(robot):
    pick(robot, 'chimney')



No matches in cache, generating!

Searching generated block:
# define function: place_chimney(robot)
def place_chimney(robot):
    place(robot, 'chimney')

Prompt: # define function: place_chimney(robot)
def place_chimney(
Isolated Source:


def place_chimney(robot):
    place(robot, 'chimney')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_foundation(robot)
def pick_up_foundation(robot):
    pick(robot, 'foundation')

Prompt: # define function: pick_up_foundation(robot)
def pick_up_foundation(
Isolated Source:


def pick_up_foundation(robot):
    pick(robot, 'foundation')



No matches in cache, generating!

Searching generated block:
# define function: place_foundation(robot)
def place_foundation(robot):
    place(robot, 'foundation')

Prompt: # define function: place_foundation(robot)
def place_foundation(
Isolated Source:


def place_foundation(robot):
    place(robot, 'foundation')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_wall(robot)
def pick_up_wall(robot):
    pick(robot, 'wall')

Prompt: # define function: pick_up_wall(robot)
def pick_up_wall(
Isolated Source:


def pick_up_wall(robot):
    pick(robot, 'wall')



No matches in cache, generating!

Searching generated block:
# define function: place_wall(robot)
def place_wall(robot):
    place(robot, 'wall')

Prompt: # define function: place_wall(robot)
def place_wall(
Isolated Source:


def place_wall(robot):
    place(robot, 'wall')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_floor(robot)
def pick_up_floor(robot):
    pick(robot, 'floor')

Prompt: # define function: pick_up_floor(robot)
def pick_up_floor(
Isolated Source:


def pick_up_floor(robot):
    pick(robot, 'floor')



No matches in cache, generating!

Searching generated block:
# define function: place_floor(robot)
def place_floor(robot):
    place(robot, 'floor')

Prompt: # define function: place_floor(robot)
def place_floor(
Isolated Source:


def place_floor(robot):
    place(robot, 'floor')


Got result in 10.327958106994629 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: push the red button
def push_the_red_button(robot):
    robot.set_digital_output(0, True)
    time.sleep(0.5)
    robot.set_digital_output(0, False)

Prompt: # define function: push the red button

Isolated Source:


def push_the_red_button(robot):
    robot.set_digital_output(0, True)
    time.sleep(0.5)
    robot.set_digital_output(0, False)


Got result in 0.9933586120605469 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the battery and place it on the base plate
def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

Prompt: # define function: pick up the battery and place it on the base plate

Isolated Source:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')


Got result in 0.9199576377868652 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten screws
def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say("I should use a screwdriver to tighten screws")

Prompt: # define function: what tool should i use to tighten screws

Isolated Source:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')


Got result in 0.8623931407928467 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten bolts to correct torque
def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say("I would use a torque wrench to tighten bolts to the correct torque.")

Prompt: # define function: what tool should i use to tighten bolts to correct torque

Isolated Source:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')


Got result in 1.1136345863342285 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say hello
def say_hello(robot):
    robot.say("hello")

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 0.37656068801879883 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like ice cream
def do_you_like_ice_cream(robot):
    robot.say("I like ice cream")

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.5956323146820068 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tell me the first law of robotics
def tell_me_the_first_law_of_robotics(robot):
    robot.say("A robot may not injure a human being or, through inaction, allow a human being to come to harm.")

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 1.0142076015472412 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: can you find an apple
def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find("apple")

    if apple_found:
        robot.say("I found an apple!")
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 1.2830719947814941 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little left
def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0300686359405518 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move ten centimeters up
def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0531933307647705 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go one hundred and fifty millimeters backwards
def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.2061271667480469 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move fifteen centimeters above the die
def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.169712781906128 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: look at the die
def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.5106182098388672 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the die
def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.4723660945892334 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate 33 degrees clockwise
def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.5954480171203613 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tilt seventy degrees forwards
def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.6332154273986816 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go ten centimeters up and fifteen centimeters backwards
def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.5324556827545166 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw an ellipse with radii five and four centimeters
def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.04 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.5503053665161133 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up and then draw a small pentagon
def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

    waypoints = 5

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.1 * math.cos(2 * math.pi * i / 5)
        waypoint.position.y += 0.1 * math.sin(2 * math.pi * i / 5)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.191567897796631 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing
def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    # find the hammer
    (hammer_pose, hammer_found) = robot.find("hammer")

    # find the nails
    (nails_pose, nails_found) = robot.find("nails")

    # if both were found, say tools found
    if hammer_found and nails_found:
        robot.say("Tools found!")

    # if hammer was found but nails were not, say hammer found
    elif hammer_found and not nails_found:
        robot.say("Hammer found!")

    # if nails were found but hammer was not, say nails found
    elif not hammer_found and nails_found:
        robot.say("Nails found!")

    # if neither were found, say nothing found
    else:
        robot.say("Nothing found!")

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 4.1719746589660645 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: five centimeters up and four down
def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.7640156745910645 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up
def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.054253339767456 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: point four centimeters down
def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0743622779846191 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's the cube root of three rounded to two decimal points
def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, 1/3), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 1.0170941352844238 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw a small circle
def draw_a_small_circle(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.05 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.297456979751587 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: place held item on the table
def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.5573325157165527 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little backwards
def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0481548309326172 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit back the other way
def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1125106811523438 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little forwards and then to the left
def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_forwards(robot)
def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.779799699783325 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: wait five seconds, then move a little up
def wait_five_seconds_then_move_a_little_up(robot):
    time.sleep(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    time.sleep(5)
    move_a_little_up(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_up(robot)
def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.6862411499023438 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you can't find a banana, wait a little and try one more time
def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    # find the banana
    (banana_pose, banana_found) = robot.find("banana")

    # if banana wasn't found, tell the user
    if not banana_found:
        robot.say("Can't find the banana!")
        time.sleep(1)
        (banana_pose, banana_found) = robot.find("banana")

        # if banana wasn't found, tell the user
        if not banana_found:
            robot.say("Can't find the banana!")
        else:
            robot.say("Found the banana!")
    else:
        robot.say("Found the banana!")

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        time.sleep(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 3.489790201187134 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you see a screw, move ten centimeters above item
def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    # find the screw
    (screw_pose, screw_found) = robot.find("screw")

    # if screw wasn't found, tell the user
    if not screw_found:
        robot.say("Can't find the screw!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = screw_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.2715365886688232 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move 1.5 centimeters up
def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1697735786437988 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go 3.1 meters to the left
def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1697697639465332 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little to the left and then right, repeat three times
def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.088066339492798 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a little forwards
def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0114123821258545 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit more
def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.9900104999542236 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say cheese
def say_cheese(robot):
    robot.say("cheese")

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.4157998561859131 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like puppies
def do_you_like_puppies(robot):
    robot.say("I like puppies")

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.5978715419769287 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: why do you like them
def why_do_you_like_them(robot):
    robot.say("Why do you like them?")

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.5734028816223145 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's your favourite book
def whats_your_favourite_book(robot):
    robot.say("My favourite book is The Hobbit")

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.6706211566925049 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: who's the author
def whos_the_author(robot):
    robot.say("I am ")

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.4909532070159912 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate a quarter turn anticlockwise
def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.6315360069274902 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate back the other way
def rotate_back_the_other_way(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.5887296199798584 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a random amount to the left, but less than a meter
def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meter

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.3218128681182861 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: again but half the maximum distance
def again_but_half_the_maximum_distance(robot):
    robot.set_max_distance(0.5)
    robot.go()

Prompt: # define function: again but half the maximum distance

Isolated Source:


def again_but_half_the_maximum_distance(robot):
    robot.set_max_distance(0.5)
    robot.go()


Got result in 0.7484757900238037 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: check if you can see the cover, try again up to three times, waiting 3 seconds in between
def check_if_you_can_see_the_cover_try_again_up_to_three_times_waiting_3_seconds_in_between(robot):
    # try to see the cover
    (cover_pose, cover_found) = robot.find("cover")

    # if the cover wasn't found, try again
    if not cover_found:
        # try to see the cover
        (cover_pose, cover_found) = robot.find("cover")

        # if the cover wasn't found, try again
        if not cover_found:
            # try to see the cover
            (cover_pose, cover_found) = robot.find("cover")

            # if the cover wasn't found, try again
            if not cover_found:
                # try to see the cover
                (cover_pose, cover_found) = robot.find("cover")

                # if the cover wasn't found, try again
                if not cover_found:
                    # try to see the cover
                    (cover_pose, cover_found) = robot.find("cover")

                    # if the cover wasn't found, try again
                    if not cover_found:
                        # try to see the cover
                        (cover_pose, cover_found) = robot.find("cover")

                        # if the cover wasn't found, try again
                        if not cover_found:
                            # try to see the cover
                            (cover_pose, cover_found) = robot.find("cover")

                            # if the cover wasn't found, try again
                            if not cover_found:
                                # try to see the cover
                                (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again
                                if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found: # try to see the cover (cover_pose, cover_found) = robot.find("cover") # if the cover wasn't found, try again if not cover_found
Generator error:  unexpected EOF while parsing (<unknown>, line 40)  in generated source.
Prompt: # define function: check if you can see the cover, try again up to three times, waiting 3 seconds in between

Isolated Source:


Generation error: Parent function body is None.
Got result in 9.792809247970581 seconds!

Generation failed, reverting changes to cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like to work with humans
def do_you_like_to_work_with_humans(robot):
    robot.say("I like to work with humans")

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.6930005550384521 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: good job
def good_job(robot):
    robot.say("good job")

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.3953590393066406 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: build a house
def build_a_house(robot):
    # move to the table
    place_on_the_table(robot)

    # pick up the bricks
    pick_up_bricks(robot)

    # place the bricks
    place_bricks(robot)

    # pick up the roof
    pick_up_roof(robot)

    # place the roof
    place_roof(robot)

    # pick up the door
    pick_up_door(robot)

    # place the door
    place_door(robot)

    # pick up the window
    pick_up_window(robot)

    # place the window
    place_window(robot)

    # pick up the chimney
    pick_up_chimney(robot)

    # place the chimney
    place_chimney(robot)

    # pick up the foundation
    pick_up_foundation(robot)

    # place the foundation
    place_foundation(robot)

    # pick up the wall
    pick_up_wall(robot)

    # place the wall
    place_wall(robot)

    # pick up the floor
    pick_up_floor(robot)

    # place the floor
    place_floor(robot)

Prompt: # define function: build a house

Isolated Source:


def build_a_house(robot):
    place_on_the_table(robot)
    pick_up_bricks(robot)
    place_bricks(robot)
    pick_up_roof(robot)
    place_roof(robot)
    pick_up_door(robot)
    place_door(robot)
    pick_up_window(robot)
    place_window(robot)
    pick_up_chimney(robot)
    place_chimney(robot)
    pick_up_foundation(robot)
    place_foundation(robot)
    pick_up_wall(robot)
    place_wall(robot)
    pick_up_floor(robot)
    place_floor(robot)



No matches in cache, generating!

Searching generated block:
# define function: place_on_the_table(robot)
def place_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place_on_the_table(robot)
def place_on_the_table(
Isolated Source:


def place_on_the_table(robot):
    place(robot, 'table')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_bricks(robot)
def pick_up_bricks(robot):
    pick(robot, 'bricks')

Prompt: # define function: pick_up_bricks(robot)
def pick_up_bricks(
Isolated Source:


def pick_up_bricks(robot):
    pick(robot, 'bricks')



No matches in cache, generating!

Searching generated block:
# define function: place_bricks(robot)
def place_bricks(robot):
    place(robot, 'bricks')

Prompt: # define function: place_bricks(robot)
def place_bricks(
Isolated Source:


def place_bricks(robot):
    place(robot, 'bricks')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_roof(robot)
def pick_up_roof(robot):
    pick(robot, 'roof')

Prompt: # define function: pick_up_roof(robot)
def pick_up_roof(
Isolated Source:


def pick_up_roof(robot):
    pick(robot, 'roof')



No matches in cache, generating!

Searching generated block:
# define function: place_roof(robot)
def place_roof(robot):
    place(robot, 'roof')

Prompt: # define function: place_roof(robot)
def place_roof(
Isolated Source:


def place_roof(robot):
    place(robot, 'roof')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_door(robot)
def pick_up_door(robot):
    pick(robot, 'door')

Prompt: # define function: pick_up_door(robot)
def pick_up_door(
Isolated Source:


def pick_up_door(robot):
    pick(robot, 'door')



No matches in cache, generating!

Searching generated block:
# define function: place_door(robot)
def place_door(robot):
    place(robot, 'door')

Prompt: # define function: place_door(robot)
def place_door(
Isolated Source:


def place_door(robot):
    place(robot, 'door')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_window(robot)
def pick_up_window(robot):
    pick(robot, 'window')

Prompt: # define function: pick_up_window(robot)
def pick_up_window(
Isolated Source:


def pick_up_window(robot):
    pick(robot, 'window')



No matches in cache, generating!

Searching generated block:
# define function: place_window(robot)
def place_window(robot):
    place(robot, 'window')

Prompt: # define function: place_window(robot)
def place_window(
Isolated Source:


def place_window(robot):
    place(robot, 'window')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_chimney(robot)
def pick_up_chimney(robot):
    pick(robot, 'chimney')

Prompt: # define function: pick_up_chimney(robot)
def pick_up_chimney(
Isolated Source:


def pick_up_chimney(robot):
    pick(robot, 'chimney')



No matches in cache, generating!

Searching generated block:
# define function: place_chimney(robot)
def place_chimney(robot):
    place(robot, 'chimney')

Prompt: # define function: place_chimney(robot)
def place_chimney(
Isolated Source:


def place_chimney(robot):
    place(robot, 'chimney')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_foundation(robot)
def pick_up_foundation(robot):
    pick(robot, 'foundation')

Prompt: # define function: pick_up_foundation(robot)
def pick_up_foundation(
Isolated Source:


def pick_up_foundation(robot):
    pick(robot, 'foundation')



No matches in cache, generating!

Searching generated block:
# define function: place_foundation(robot)
def place_foundation(robot):
    place(robot, 'foundation')

Prompt: # define function: place_foundation(robot)
def place_foundation(
Isolated Source:


def place_foundation(robot):
    place(robot, 'foundation')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_wall(robot)
def pick_up_wall(robot):
    pick(robot, 'wall')

Prompt: # define function: pick_up_wall(robot)
def pick_up_wall(
Isolated Source:


def pick_up_wall(robot):
    pick(robot, 'wall')



No matches in cache, generating!

Searching generated block:
# define function: place_wall(robot)
def place_wall(robot):
    place(robot, 'wall')

Prompt: # define function: place_wall(robot)
def place_wall(
Isolated Source:


def place_wall(robot):
    place(robot, 'wall')



No matches in cache, generating!

Searching generated block:
# define function: pick_up_floor(robot)
def pick_up_floor(robot):
    pick(robot, 'floor')

Prompt: # define function: pick_up_floor(robot)
def pick_up_floor(
Isolated Source:


def pick_up_floor(robot):
    pick(robot, 'floor')



No matches in cache, generating!

Searching generated block:
# define function: place_floor(robot)
def place_floor(robot):
    place(robot, 'floor')

Prompt: # define function: place_floor(robot)
def place_floor(
Isolated Source:


def place_floor(robot):
    place(robot, 'floor')


Got result in 10.333153009414673 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: push the red button
def push_the_red_button(robot):
    robot.set_digital_output(0, True)
    time.sleep(0.5)
    robot.set_digital_output(0, False)

Prompt: # define function: push the red button

Isolated Source:


def push_the_red_button(robot):
    robot.set_digital_output(0, True)
    time.sleep(0.5)
    robot.set_digital_output(0, False)


Got result in 0.9925289154052734 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the battery and place it on the base plate
def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

Prompt: # define function: pick up the battery and place it on the base plate

Isolated Source:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')


Got result in 0.9200732707977295 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten screws
def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say("I should use a screwdriver to tighten screws")

Prompt: # define function: what tool should i use to tighten screws

Isolated Source:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')


Got result in 0.8630566596984863 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                # define function: what tool should i use to tighten bolts to correct torque
def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say("I would use a torque wrench to tighten bolts to the correct torque.")

Prompt: # define function: what tool should i use to tighten bolts to correct torque

Isolated Source:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')


Got result in 1.1131372451782227 seconds!

Generation successful, saving cache!
