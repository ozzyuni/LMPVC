1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eno1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
    link/ether 88:ae:dd:41:db:1b brd ff:ff:ff:ff:ff:ff
    altname enp6s0f0
    inet 130.230.37.119/26 brd 130.230.37.127 scope global dynamic noprefixroute eno1
       valid_lft 6490sec preferred_lft 6490sec
    inet6 fe80::deb9:3e55:9518:d77c/64 scope link noprefixroute 
       valid_lft forever preferred_lft forever
3: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default 
    link/ether 02:42:d0:c3:8c:18 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0
       valid_lft forever preferred_lft forever
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eno1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
    link/ether 88:ae:dd:41:db:1b brd ff:ff:ff:ff:ff:ff
    altname enp6s0f0
    inet 130.230.37.119/26 brd 130.230.37.127 scope global dynamic noprefixroute eno1
       valid_lft 6478sec preferred_lft 6478sec
    inet6 fe80::deb9:3e55:9518:d77c/64 scope link noprefixroute 
       valid_lft forever preferred_lft forever
3: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default 
    link/ether 02:42:d0:c3:8c:18 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0
       valid_lft forever preferred_lft forever
Filename not defined, loading from temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: say hello
def say_hello(robot):
    robot.say("hello")

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 1.4135839939117432 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: do you like ice cream
def do_you_like_ice_cream(robot):
    robot.say("I like ice cream")

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.5939874649047852 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: tell me the first law of robotics
def tell_me_the_first_law_of_robotics(robot):
    robot.say("A robot may not injure a human being or, through inaction, allow a human being to come to harm.")

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 1.0623631477355957 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: can you find an apple
def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find("apple")

    if apple_found:
        robot.say("I found an apple!")
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 1.2829718589782715 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: move a little left
def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0093457698822021 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: move ten centimeters up
def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.091184139251709 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: go one hundred and fifty millimeters backwards
def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1766879558563232 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: move fifteen centimeters above the die
def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.2459115982055664 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: look at the die
def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.5422372817993164 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: pick up the die
def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.4593632221221924 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: rotate 33 degrees clockwise
def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.5796995162963867 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: tilt seventy degrees forwards
def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.6157851219177246 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: go ten centimeters up and fifteen centimeters backwards
def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.4938926696777344 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: draw an ellipse with radii five and four centimeters
def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.04 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.4991865158081055 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up and then draw a small pentagon
def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

    waypoints = 5

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.1 * math.cos(2 * math.pi * i / 5)
        waypoint.position.y += 0.1 * math.sin(2 * math.pi * i / 5)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.2042083740234375 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing
def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    # find the hammer
    (hammer_pose, hammer_found) = robot.find("hammer")

    # find the nails
    (nails_pose, nails_found) = robot.find("nails")

    # if both were found, say tools found
    if hammer_found and nails_found:
        robot.say("Tools found!")

    # if hammer was found but nails were not, say hammer found
    elif hammer_found and not nails_found:
        robot.say("Hammer found!")

    # if nails were found but hammer was not, say nails found
    elif not hammer_found and nails_found:
        robot.say("Nails found!")

    # if neither were found, say nothing found
    else:
        robot.say("Nothing found!")

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 4.0928053855896 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: five centimeters up and four down
def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.752387285232544 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up
def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0404179096221924 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: point four centimeters down
def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0571982860565186 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: what's the cube root of three rounded to two decimal points
def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, 1/3), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 0.9986996650695801 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: draw a small circle
def draw_a_small_circle(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.05 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.2636122703552246 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: place held item on the table
def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.5456554889678955 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: move a little backwards
def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0321180820465088 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: a bit back the other way
def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1623859405517578 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: move a little forwards and then to the left
def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_forwards(robot)
def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.7312052249908447 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: wait five seconds, then move a little up
def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_up(robot)
def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.650588035583496 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: if you can't find a banana, wait a little and try one more time
def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    # find the banana
    (banana_pose, banana_found) = robot.find("banana")

    # if banana wasn't found, tell the user
    if not banana_found:
        robot.say("Can't find the banana!")
        robot.wait(1)
        # try again
        (banana_pose, banana_found) = robot.find("banana")

        # if banana wasn't found, tell the user
        if not banana_found:
            robot.say("Can't find the banana!")
        else:
            robot.say("Found the banana!")
    else:
        robot.say("Found the banana!")

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        robot.wait(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 3.4975574016571045 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: if you see a screw, move ten centimeters above item
def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    # find the screw
    (screw_pose, screw_found) = robot.find("screw")

    # if screw wasn't found, tell the user
    if not screw_found:
        robot.say("Can't find the screw!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = screw_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.206792116165161 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: move 1.5 centimeters up
def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1467087268829346 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: go 3.1 meters to the left
def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1460113525390625 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: move a little to the left and then right, repeat three times
def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



Found cached result!

Searching generated block:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.2310636043548584 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: a little forwards
def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.9928476810455322 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: a bit more
def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.9715871810913086 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: say cheese
def say_cheese(robot):
    robot.say("cheese")

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.40529870986938477 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: do you like puppies
def do_you_like_puppies(robot):
    robot.say("I like puppies")

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.5831170082092285 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: why do you like them
def why_do_you_like_them(robot):
    robot.say("Why do you like them?")

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.5610029697418213 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: what's your favourite book
def whats_your_favourite_book(robot):
    robot.say("My favourite book is The Hobbit")

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.6559193134307861 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: who's the author
def whos_the_author(robot):
    robot.say("I am ")

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.48232555389404297 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: rotate a quarter turn anticlockwise
def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.618981122970581 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: rotate back the other way
def rotate_back_the_other_way(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.5771431922912598 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: move a random amount to the left, but less than a meters
def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meters

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.3050401210784912 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: again but half the distance
def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: again but half the distance

Isolated Source:


def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0583343505859375 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: half that again
def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()

Prompt: # define function: half that again

Isolated Source:


def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()


Got result in 0.5769116878509521 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: do you like to work with humans
def do_you_like_to_work_with_humans(robot):
    robot.say("I like to work with humans")

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.6804976463317871 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: good job
def good_job(robot):
    robot.say("good job")

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.3872182369232178 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: build a house
def build_a_house(robot):
    # find the bin
    (small_bin_pose, small_bin_found) = robot.find("small bin")

    # if bin wasn't found, tell the user
    if not small_bin_found:
        robot.say("Can't find the small bin!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        # five centimeters left of the bin
        waypoint.position.y = small_bin_pose.position.y - 0.05
        # ten centimeters above the bin
        waypoint.position.z = small_bin_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: build a house

Isolated Source:


def build_a_house(robot):
    (small_bin_pose, small_bin_found) = robot.find('small bin')
    if (not small_bin_found):
        robot.say("Can't find the small bin!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        waypoint.position.y = (small_bin_pose.position.y - 0.05)
        waypoint.position.z = (small_bin_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.453885793685913 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: push the red button
def push_the_red_button(robot):
    robot.push_button("red")

Prompt: # define function: push the red button

Isolated Source:


def push_the_red_button(robot):
    robot.push_button('red')


Got result in 0.5259637832641602 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: pick up the battery and place it on the base plate
def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

Prompt: # define function: pick up the battery and place it on the base plate

Isolated Source:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')


Got result in 0.9070312976837158 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten screws
def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say("I should use a screwdriver to tighten screws")

Prompt: # define function: what tool should i use to tighten screws

Isolated Source:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')


Got result in 0.846430778503418 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten bolts to correct torque
def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say("I would use a torque wrench to tighten bolts to the correct torque.")

Prompt: # define function: what tool should i use to tighten bolts to correct torque

Isolated Source:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')


Got result in 1.0984890460968018 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def say_hello(robot):
    robot.say('hello')

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 0.00014495849609375 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.00014352798461914062 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 0.0001475811004638672 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 0.0002372264862060547 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.0002396106719970703 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.00023603439331054688 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.00023436546325683594 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.00023818016052246094 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.0001614093780517578 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.00015997886657714844 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.00016689300537109375 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.00016951560974121094 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.00026726722717285156 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.0005049705505371094 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.0005786418914794922 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 0.0004451274871826172 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.0003204345703125 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.00023412704467773438 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.00023651123046875 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 0.00023102760314941406 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.0005056858062744141 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.0001595020294189453 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.0002357959747314453 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.00023651123046875 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



Found cached result!

Searching generated block:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



Found cached result!

Searching generated block:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.0005435943603515625 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)



Found cached result!

Searching generated block:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.00036835670471191406 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        robot.wait(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        robot.wait(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 0.0004162788391113281 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 0.0004379749298095703 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.00023984909057617188 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.0002391338348388672 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



Found cached result!

Searching generated block:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



Found cached result!

Searching generated block:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.0005888938903808594 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.00023484230041503906 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.00023627281188964844 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def say_cheese(robot):
    robot.say('cheese')

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.00014138221740722656 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def do_you_like_puppies(robot):
    robot.say('I like puppies')

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.0001423358917236328 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.0001456737518310547 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.00014472007751464844 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def whos_the_author(robot):
    robot.say('I am ')

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.00014352798461914062 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.00018358230590820312 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.0001838207244873047 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meters

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.00022840499877929688 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: again but half the distance

Isolated Source:


def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.0002377033233642578 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()

Prompt: # define function: half that again

Isolated Source:


def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()


Got result in 0.00016498565673828125 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.00014638900756835938 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def good_job(robot):
    robot.say('good job')

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.0001442432403564453 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def build_a_house(robot):
    (small_bin_pose, small_bin_found) = robot.find('small bin')
    if (not small_bin_found):
        robot.say("Can't find the small bin!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        waypoint.position.y = (small_bin_pose.position.y - 0.05)
        waypoint.position.z = (small_bin_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: build a house

Isolated Source:


def build_a_house(robot):
    (small_bin_pose, small_bin_found) = robot.find('small bin')
    if (not small_bin_found):
        robot.say("Can't find the small bin!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        waypoint.position.y = (small_bin_pose.position.y - 0.05)
        waypoint.position.z = (small_bin_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 0.0005254745483398438 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def push_the_red_button(robot):
    robot.push_button('red')

Prompt: # define function: push the red button

Isolated Source:


def push_the_red_button(robot):
    robot.push_button('red')


Got result in 0.00014448165893554688 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

Prompt: # define function: pick up the battery and place it on the base plate

Isolated Source:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')


Got result in 0.00020074844360351562 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')

Prompt: # define function: what tool should i use to tighten screws

Isolated Source:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')


Got result in 0.00014543533325195312 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')

Prompt: # define function: what tool should i use to tighten bolts to correct torque

Isolated Source:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')


Got result in 0.00014543533325195312 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def say_hello(robot):
    robot.say('hello')

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 0.00014472007751464844 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.0001437664031982422 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 0.00014543533325195312 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 0.0002696514129638672 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.0002353191375732422 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.00023627281188964844 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.00023174285888671875 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.00023865699768066406 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.0001595020294189453 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.00015926361083984375 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.0001671314239501953 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.00016760826110839844 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.0002713203430175781 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.0004725456237792969 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.0005996227264404297 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 0.0004487037658691406 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.00032520294189453125 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.00024056434631347656 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.0002338886260986328 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

Found cached result!

Searching generated block:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 0.0002288818359375 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!
Filename not defined, loading from temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: say hello
def say_hello(robot):
    robot.say("hello")

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 1.1479063034057617 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like ice cream
def do_you_like_ice_cream(robot):
    robot.say("I like ice cream")

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.586359977722168 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tell me the first law of robotics
def tell_me_the_first_law_of_robotics(robot):
    robot.say("A robot may not injure a human being or, through inaction, allow a human being to come to harm.")

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 0.9942314624786377 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: can you find an apple
def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find("apple")

    if apple_found:
        robot.say("I found an apple!")
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 1.2505269050598145 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little left
def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.004608154296875 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move ten centimeters up
def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0265326499938965 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go one hundred and fifty millimeters backwards
def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1781482696533203 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move fifteen centimeters above the die
def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.141237735748291 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: look at the die
def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.49860620498657227 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the die
def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.4623143672943115 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate 33 degrees clockwise
def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.5808999538421631 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tilt seventy degrees forwards
def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.6186604499816895 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go ten centimeters up and fifteen centimeters backwards
def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.503204584121704 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw an ellipse with radii five and four centimeters
def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.04 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.504570484161377 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up and then draw a small pentagon
def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

    waypoints = 5

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.1 * math.cos(2 * math.pi * i / 5)
        waypoint.position.y += 0.1 * math.sin(2 * math.pi * i / 5)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.135629892349243 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing
def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    # find the hammer
    (hammer_pose, hammer_found) = robot.find("hammer")

    # find the nails
    (nails_pose, nails_found) = robot.find("nails")

    # if both were found, say tools found
    if hammer_found and nails_found:
        robot.say("Tools found!")

    # if hammer was found but nails were not, say hammer found
    elif hammer_found and not nails_found:
        robot.say("Hammer found!")

    # if nails were found but hammer was not, say nails found
    elif not hammer_found and nails_found:
        robot.say("Nails found!")

    # if neither were found, say nothing found
    else:
        robot.say("Nothing found!")

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 4.090196371078491 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: five centimeters up and four down
def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.7227249145507812 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up
def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0300884246826172 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: point four centimeters down
def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0480663776397705 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's the cube root of three rounded to two decimal points
def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, 1/3), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 0.992609977722168 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw a small circle
def draw_a_small_circle(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.05 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.245370864868164 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: place held item on the table
def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.5433194637298584 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little backwards
def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0244877338409424 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit back the other way
def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0891363620758057 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little forwards and then to the left
def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_forwards(robot)
def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.7190327644348145 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: wait five seconds, then move a little up
def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_up(robot)
def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.6542043685913086 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you can't find a banana, wait a little and try one more time
def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    # find the banana
    (banana_pose, banana_found) = robot.find("banana")

    # if banana wasn't found, tell the user
    if not banana_found:
        robot.say("Can't find the banana!")
        robot.wait(1)
        # try again
        (banana_pose, banana_found) = robot.find("banana")

        # if banana wasn't found, tell the user
        if not banana_found:
            robot.say("Can't find the banana!")
        else:
            robot.say("Found the banana!")
    else:
        robot.say("Found the banana!")

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        robot.wait(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 3.5064914226531982 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you see a screw, move ten centimeters above item
def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    # find the screw
    (screw_pose, screw_found) = robot.find("screw")

    # if screw wasn't found, tell the user
    if not screw_found:
        robot.say("Can't find the screw!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = screw_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.2178027629852295 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move 1.5 centimeters up
def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.151543140411377 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go 3.1 meters to the left
def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1525864601135254 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little to the left and then right, repeat three times
def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.0417730808258057 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a little forwards
def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.9978978633880615 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit more
def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.9730226993560791 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say cheese
def say_cheese(robot):
    robot.say("cheese")

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.4096486568450928 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like puppies
def do_you_like_puppies(robot):
    robot.say("I like puppies")

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.5863304138183594 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: why do you like them
def why_do_you_like_them(robot):
    robot.say("Why do you like them?")

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.5652785301208496 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's your favourite book
def whats_your_favourite_book(robot):
    robot.say("My favourite book is The Hobbit")

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.6626243591308594 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: who's the author
def whos_the_author(robot):
    robot.say("I am ")

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.48538732528686523 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate a quarter turn anticlockwise
def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.6228756904602051 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate back the other way
def rotate_back_the_other_way(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.5796418190002441 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a random amount to the left, but less than a meters
def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meters

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.3041927814483643 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: again but half the distance
def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: again but half the distance

Isolated Source:


def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0588457584381104 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: half that again
def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()

Prompt: # define function: half that again

Isolated Source:


def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()


Got result in 0.5810327529907227 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like to work with humans
def do_you_like_to_work_with_humans(robot):
    robot.say("I like to work with humans")

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.6845488548278809 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: good job
def good_job(robot):
    robot.say("good job")

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.39026951789855957 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: build a house
def build_a_house(robot):
    # find the bin
    (small_bin_pose, small_bin_found) = robot.find("small bin")

    # if bin wasn't found, tell the user
    if not small_bin_found:
        robot.say("Can't find the small bin!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        # five centimeters left of the bin
        waypoint.position.y = small_bin_pose.position.y - 0.05
        # ten centimeters above the bin
        waypoint.position.z = small_bin_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: build a house

Isolated Source:


def build_a_house(robot):
    (small_bin_pose, small_bin_found) = robot.find('small bin')
    if (not small_bin_found):
        robot.say("Can't find the small bin!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        waypoint.position.y = (small_bin_pose.position.y - 0.05)
        waypoint.position.z = (small_bin_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.4542925357818604 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: push the red button
def push_the_red_button(robot):
    robot.push_button("red")

Prompt: # define function: push the red button

Isolated Source:


def push_the_red_button(robot):
    robot.push_button('red')


Got result in 0.4877157211303711 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the battery and place it on the base plate
def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

Prompt: # define function: pick up the battery and place it on the base plate

Isolated Source:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')


Got result in 0.908137321472168 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten screws
def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say("I should use a screwdriver to tighten screws")

Prompt: # define function: what tool should i use to tighten screws

Isolated Source:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')


Got result in 0.8507192134857178 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten bolts to correct torque
def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say("I would use a torque wrench to tighten bolts to the correct torque.")

Prompt: # define function: what tool should i use to tighten bolts to correct torque

Isolated Source:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')


Got result in 1.1014280319213867 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say hello
def say_hello(robot):
    robot.say("hello")

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 0.370316743850708 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like ice cream
def do_you_like_ice_cream(robot):
    robot.say("I like ice cream")

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.5872933864593506 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tell me the first law of robotics
def tell_me_the_first_law_of_robotics(robot):
    robot.say("A robot may not injure a human being or, through inaction, allow a human being to come to harm.")

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 1.0048096179962158 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: can you find an apple
def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find("apple")

    if apple_found:
        robot.say("I found an apple!")
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 1.2704460620880127 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little left
def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0185229778289795 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move ten centimeters up
def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0436112880706787 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go one hundred and fifty millimeters backwards
def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1961827278137207 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move fifteen centimeters above the die
def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1590168476104736 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: look at the die
def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.5049166679382324 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the die
def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.4669606685638428 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate 33 degrees clockwise
def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.5893638134002686 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tilt seventy degrees forwards
def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.6268336772918701 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go ten centimeters up and fifteen centimeters backwards
def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.5232396125793457 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw an ellipse with radii five and four centimeters
def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.04 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.5364181995391846 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up and then draw a small pentagon
def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

    waypoints = 5

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.1 * math.cos(2 * math.pi * i / 5)
        waypoint.position.y += 0.1 * math.sin(2 * math.pi * i / 5)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.184915065765381 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing
def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    # find the hammer
    (hammer_pose, hammer_found) = robot.find("hammer")

    # find the nails
    (nails_pose, nails_found) = robot.find("nails")

    # if both were found, say tools found
    if hammer_found and nails_found:
        robot.say("Tools found!")

    # if hammer was found but nails were not, say hammer found
    elif hammer_found and not nails_found:
        robot.say("Hammer found!")

    # if nails were found but hammer was not, say nails found
    elif not hammer_found and nails_found:
        robot.say("Nails found!")

    # if neither were found, say nothing found
    else:
        robot.say("Nothing found!")

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 4.1561572551727295 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: five centimeters up and four down
def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.7559401988983154 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up
def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0491745471954346 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: point four centimeters down
def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0705187320709229 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's the cube root of three rounded to two decimal points
def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, 1/3), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 1.0121967792510986 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw a small circle
def draw_a_small_circle(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.05 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.288449764251709 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: place held item on the table
def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.5536277294158936 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little backwards
def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0451762676239014 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit back the other way
def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.10957670211792 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little forwards and then to the left
def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_forwards(robot)
def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.768159866333008 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: wait five seconds, then move a little up
def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_up(robot)
def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.6773490905761719 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you can't find a banana, wait a little and try one more time
def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    # find the banana
    (banana_pose, banana_found) = robot.find("banana")

    # if banana wasn't found, tell the user
    if not banana_found:
        robot.say("Can't find the banana!")
        robot.wait(1)
        # try again
        (banana_pose, banana_found) = robot.find("banana")

        # if banana wasn't found, tell the user
        if not banana_found:
            robot.say("Can't find the banana!")
        else:
            robot.say("Found the banana!")
    else:
        robot.say("Found the banana!")

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        robot.wait(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 3.5550484657287598 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you see a screw, move ten centimeters above item
def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    # find the screw
    (screw_pose, screw_found) = robot.find("screw")

    # if screw wasn't found, tell the user
    if not screw_found:
        robot.say("Can't find the screw!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = screw_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.259838581085205 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move 1.5 centimeters up
def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.16737699508667 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go 3.1 meters to the left
def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1662638187408447 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little to the left and then right, repeat three times
def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.079803943634033 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a little forwards
def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0087049007415771 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit more
def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.9861228466033936 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say cheese
def say_cheese(robot):
    robot.say("cheese")

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.41426706314086914 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like puppies
def do_you_like_puppies(robot):
    robot.say("I like puppies")

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.5946519374847412 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: why do you like them
def why_do_you_like_them(robot):
    robot.say("Why do you like them?")

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.5709969997406006 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's your favourite book
def whats_your_favourite_book(robot):
    robot.say("My favourite book is The Hobbit")

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.6686699390411377 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: who's the author
def whos_the_author(robot):
    robot.say("I am ")

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.4910149574279785 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate a quarter turn anticlockwise
def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.6282618045806885 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate back the other way
def rotate_back_the_other_way(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.5861783027648926 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a random amount to the left, but less than a meters
def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meters

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.3175640106201172 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: again but half the distance
def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: again but half the distance

Isolated Source:


def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0680122375488281 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: half that again
def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()

Prompt: # define function: half that again

Isolated Source:


def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()


Got result in 0.5855722427368164 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like to work with humans
def do_you_like_to_work_with_humans(robot):
    robot.say("I like to work with humans")

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.688568115234375 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: good job
def good_job(robot):
    robot.say("good job")

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.3930034637451172 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: build a house
def build_a_house(robot):
    # find the bin
    (small_bin_pose, small_bin_found) = robot.find("small bin")

    # if bin wasn't found, tell the user
    if not small_bin_found:
        robot.say("Can't find the small bin!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        # five centimeters left of the bin
        waypoint.position.y = small_bin_pose.position.y - 0.05
        # ten centimeters above the bin
        waypoint.position.z = small_bin_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: build a house

Isolated Source:


def build_a_house(robot):
    (small_bin_pose, small_bin_found) = robot.find('small bin')
    if (not small_bin_found):
        robot.say("Can't find the small bin!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        waypoint.position.y = (small_bin_pose.position.y - 0.05)
        waypoint.position.z = (small_bin_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.4777448177337646 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: push the red button
def push_the_red_button(robot):
    robot.push_button("red")

Prompt: # define function: push the red button

Isolated Source:


def push_the_red_button(robot):
    robot.push_button('red')


Got result in 0.49079370498657227 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the battery and place it on the base plate
def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

Prompt: # define function: pick up the battery and place it on the base plate

Isolated Source:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')


Got result in 0.9162418842315674 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten screws
def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say("I should use a screwdriver to tighten screws")

Prompt: # define function: what tool should i use to tighten screws

Isolated Source:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')


Got result in 0.8571920394897461 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten bolts to correct torque
def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say("I would use a torque wrench to tighten bolts to the correct torque.")

Prompt: # define function: what tool should i use to tighten bolts to correct torque

Isolated Source:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')


Got result in 1.107039451599121 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say hello
def say_hello(robot):
    robot.say("hello")

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 0.3739504814147949 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like ice cream
def do_you_like_ice_cream(robot):
    robot.say("I like ice cream")

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.5906567573547363 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tell me the first law of robotics
def tell_me_the_first_law_of_robotics(robot):
    robot.say("A robot may not injure a human being or, through inaction, allow a human being to come to harm.")

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 1.0107638835906982 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: can you find an apple
def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find("apple")

    if apple_found:
        robot.say("I found an apple!")
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 1.2784059047698975 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little left
def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0244171619415283 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move ten centimeters up
def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.049039363861084 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go one hundred and fifty millimeters backwards
def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.2027256488800049 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move fifteen centimeters above the die
def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1638283729553223 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: look at the die
def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.509894609451294 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the die
def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.47144079208374023 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate 33 degrees clockwise
def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.5952153205871582 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tilt seventy degrees forwards
def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.6317057609558105 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go ten centimeters up and fifteen centimeters backwards
def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.5270323753356934 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw an ellipse with radii five and four centimeters
def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.04 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.5430006980895996 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up and then draw a small pentagon
def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

    waypoints = 5

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.1 * math.cos(2 * math.pi * i / 5)
        waypoint.position.y += 0.1 * math.sin(2 * math.pi * i / 5)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.179168939590454 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing
def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    # find the hammer
    (hammer_pose, hammer_found) = robot.find("hammer")

    # find the nails
    (nails_pose, nails_found) = robot.find("nails")

    # if both were found, say tools found
    if hammer_found and nails_found:
        robot.say("Tools found!")

    # if hammer was found but nails were not, say hammer found
    elif hammer_found and not nails_found:
        robot.say("Hammer found!")

    # if nails were found but hammer was not, say nails found
    elif not hammer_found and nails_found:
        robot.say("Nails found!")

    # if neither were found, say nothing found
    else:
        robot.say("Nothing found!")

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 4.158419370651245 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: five centimeters up and four down
def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.7573413848876953 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up
def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.049689769744873 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: point four centimeters down
def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0698878765106201 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's the cube root of three rounded to two decimal points
def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, 1/3), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 1.0140800476074219 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw a small circle
def draw_a_small_circle(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.05 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.2910242080688477 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: place held item on the table
def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.5519053936004639 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little backwards
def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.044792652130127 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit back the other way
def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1103222370147705 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little forwards and then to the left
def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_forwards(robot)
def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.7667250633239746 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: wait five seconds, then move a little up
def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_up(robot)
def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.679779291152954 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you can't find a banana, wait a little and try one more time
def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    # find the banana
    (banana_pose, banana_found) = robot.find("banana")

    # if banana wasn't found, tell the user
    if not banana_found:
        robot.say("Can't find the banana!")
        robot.wait(1)
        # try again
        (banana_pose, banana_found) = robot.find("banana")

        # if banana wasn't found, tell the user
        if not banana_found:
            robot.say("Can't find the banana!")
        else:
            robot.say("Found the banana!")
    else:
        robot.say("Found the banana!")

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        robot.wait(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 3.5568437576293945 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you see a screw, move ten centimeters above item
def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    # find the screw
    (screw_pose, screw_found) = robot.find("screw")

    # if screw wasn't found, tell the user
    if not screw_found:
        robot.say("Can't find the screw!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = screw_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.2618448734283447 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move 1.5 centimeters up
def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.167698860168457 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go 3.1 meters to the left
def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1660408973693848 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little to the left and then right, repeat three times
def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.078773021697998 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a little forwards
def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.008155345916748 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit more
def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.987835168838501 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say cheese
def say_cheese(robot):
    robot.say("cheese")

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.41345810890197754 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like puppies
def do_you_like_puppies(robot):
    robot.say("I like puppies")

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.5933451652526855 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: why do you like them
def why_do_you_like_them(robot):
    robot.say("Why do you like them?")

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.5698394775390625 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's your favourite book
def whats_your_favourite_book(robot):
    robot.say("My favourite book is The Hobbit")

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.6675355434417725 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: who's the author
def whos_the_author(robot):
    robot.say("I am ")

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.48932838439941406 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate a quarter turn anticlockwise
def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.6276485919952393 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate back the other way
def rotate_back_the_other_way(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.5848369598388672 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a random amount to the left, but less than a meters
def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meters

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.3180584907531738 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: again but half the distance
def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: again but half the distance

Isolated Source:


def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0693676471710205 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: half that again
def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()

Prompt: # define function: half that again

Isolated Source:


def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()


Got result in 0.5858101844787598 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like to work with humans
def do_you_like_to_work_with_humans(robot):
    robot.say("I like to work with humans")

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.6890316009521484 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: good job
def good_job(robot):
    robot.say("good job")

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.3927323818206787 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: build a house
def build_a_house(robot):
    # find the bin
    (small_bin_pose, small_bin_found) = robot.find("small bin")

    # if bin wasn't found, tell the user
    if not small_bin_found:
        robot.say("Can't find the small bin!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        # five centimeters left of the bin
        waypoint.position.y = small_bin_pose.position.y - 0.05
        # ten centimeters above the bin
        waypoint.position.z = small_bin_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: build a house

Isolated Source:


def build_a_house(robot):
    (small_bin_pose, small_bin_found) = robot.find('small bin')
    if (not small_bin_found):
        robot.say("Can't find the small bin!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        waypoint.position.y = (small_bin_pose.position.y - 0.05)
        waypoint.position.z = (small_bin_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.4841256141662598 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: push the red button
def push_the_red_button(robot):
    robot.push_button("red")

Prompt: # define function: push the red button

Isolated Source:


def push_the_red_button(robot):
    robot.push_button('red')


Got result in 0.4900178909301758 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the battery and place it on the base plate
def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

Prompt: # define function: pick up the battery and place it on the base plate

Isolated Source:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')


Got result in 0.9148464202880859 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten screws
def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say("I should use a screwdriver to tighten screws")

Prompt: # define function: what tool should i use to tighten screws

Isolated Source:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')


Got result in 0.8583085536956787 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten bolts to correct torque
def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say("I would use a torque wrench to tighten bolts to the correct torque.")

Prompt: # define function: what tool should i use to tighten bolts to correct torque

Isolated Source:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')


Got result in 1.1086504459381104 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say hello
def say_hello(robot):
    robot.say("hello")

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 0.374053955078125 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like ice cream
def do_you_like_ice_cream(robot):
    robot.say("I like ice cream")

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.5916779041290283 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tell me the first law of robotics
def tell_me_the_first_law_of_robotics(robot):
    robot.say("A robot may not injure a human being or, through inaction, allow a human being to come to harm.")

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 1.0111932754516602 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: can you find an apple
def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find("apple")

    if apple_found:
        robot.say("I found an apple!")
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 1.2792141437530518 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little left
def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0256290435791016 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move ten centimeters up
def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0489428043365479 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go one hundred and fifty millimeters backwards
def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.2029914855957031 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move fifteen centimeters above the die
def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.165539026260376 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: look at the die
def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.5102014541625977 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the die
def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.471393346786499 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate 33 degrees clockwise
def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.5941808223724365 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tilt seventy degrees forwards
def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.6319797039031982 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go ten centimeters up and fifteen centimeters backwards
def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.5286827087402344 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw an ellipse with radii five and four centimeters
def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.04 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.5429162979125977 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up and then draw a small pentagon
def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

    waypoints = 5

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.1 * math.cos(2 * math.pi * i / 5)
        waypoint.position.y += 0.1 * math.sin(2 * math.pi * i / 5)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.1820449829101562 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing
def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    # find the hammer
    (hammer_pose, hammer_found) = robot.find("hammer")

    # find the nails
    (nails_pose, nails_found) = robot.find("nails")

    # if both were found, say tools found
    if hammer_found and nails_found:
        robot.say("Tools found!")

    # if hammer was found but nails were not, say hammer found
    elif hammer_found and not nails_found:
        robot.say("Hammer found!")

    # if nails were found but hammer was not, say nails found
    elif not hammer_found and nails_found:
        robot.say("Nails found!")

    # if neither were found, say nothing found
    else:
        robot.say("Nothing found!")

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 4.164611339569092 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: five centimeters up and four down
def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.757124900817871 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up
def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0506000518798828 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: point four centimeters down
def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.071427345275879 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's the cube root of three rounded to two decimal points
def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, 1/3), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 1.0124232769012451 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw a small circle
def draw_a_small_circle(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.05 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.291773796081543 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: place held item on the table
def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.5540614128112793 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little backwards
def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0462470054626465 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit back the other way
def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1100609302520752 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little forwards and then to the left
def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_forwards(robot)
def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.7702791690826416 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: wait five seconds, then move a little up
def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_up(robot)
def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.6814885139465332 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you can't find a banana, wait a little and try one more time
def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    # find the banana
    (banana_pose, banana_found) = robot.find("banana")

    # if banana wasn't found, tell the user
    if not banana_found:
        robot.say("Can't find the banana!")
        robot.wait(1)
        # try again
        (banana_pose, banana_found) = robot.find("banana")

        # if banana wasn't found, tell the user
        if not banana_found:
            robot.say("Can't find the banana!")
        else:
            robot.say("Found the banana!")
    else:
        robot.say("Found the banana!")

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        robot.wait(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 3.56011962890625 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you see a screw, move ten centimeters above item
def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    # find the screw
    (screw_pose, screw_found) = robot.find("screw")

    # if screw wasn't found, tell the user
    if not screw_found:
        robot.say("Can't find the screw!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = screw_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.265253782272339 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move 1.5 centimeters up
def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1673214435577393 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go 3.1 meters to the left
def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1674318313598633 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little to the left and then right, repeat three times
def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.0911426544189453 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a little forwards
def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0093603134155273 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit more
def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.9881765842437744 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say cheese
def say_cheese(robot):
    robot.say("cheese")

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.4161250591278076 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like puppies
def do_you_like_puppies(robot):
    robot.say("I like puppies")

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.5945844650268555 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: why do you like them
def why_do_you_like_them(robot):
    robot.say("Why do you like them?")

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.5710008144378662 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's your favourite book
def whats_your_favourite_book(robot):
    robot.say("My favourite book is The Hobbit")

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.6682076454162598 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: who's the author
def whos_the_author(robot):
    robot.say("I am ")

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.4903419017791748 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate a quarter turn anticlockwise
def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.6286129951477051 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate back the other way
def rotate_back_the_other_way(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.5850214958190918 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a random amount to the left, but less than a meters
def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meters

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.3183248043060303 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: again but half the distance
def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: again but half the distance

Isolated Source:


def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0709199905395508 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: half that again
def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()

Prompt: # define function: half that again

Isolated Source:


def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()


Got result in 0.5858237743377686 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like to work with humans
def do_you_like_to_work_with_humans(robot):
    robot.say("I like to work with humans")

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.6899118423461914 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: good job
def good_job(robot):
    robot.say("good job")

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.39385533332824707 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: build a house
def build_a_house(robot):
    # find the bin
    (small_bin_pose, small_bin_found) = robot.find("small bin")

    # if bin wasn't found, tell the user
    if not small_bin_found:
        robot.say("Can't find the small bin!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        # five centimeters left of the bin
        waypoint.position.y = small_bin_pose.position.y - 0.05
        # ten centimeters above the bin
        waypoint.position.z = small_bin_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: build a house

Isolated Source:


def build_a_house(robot):
    (small_bin_pose, small_bin_found) = robot.find('small bin')
    if (not small_bin_found):
        robot.say("Can't find the small bin!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        waypoint.position.y = (small_bin_pose.position.y - 0.05)
        waypoint.position.z = (small_bin_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.4860243797302246 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: push the red button
def push_the_red_button(robot):
    robot.push_button("red")

Prompt: # define function: push the red button

Isolated Source:


def push_the_red_button(robot):
    robot.push_button('red')


Got result in 0.4890139102935791 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the battery and place it on the base plate
def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

Prompt: # define function: pick up the battery and place it on the base plate

Isolated Source:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')


Got result in 0.9168453216552734 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten screws
def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say("I should use a screwdriver to tighten screws")

Prompt: # define function: what tool should i use to tighten screws

Isolated Source:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')


Got result in 0.8554770946502686 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten bolts to correct torque
def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say("I would use a torque wrench to tighten bolts to the correct torque.")

Prompt: # define function: what tool should i use to tighten bolts to correct torque

Isolated Source:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')


Got result in 1.1100409030914307 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say hello
def say_hello(robot):
    robot.say("hello")

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 0.3745114803314209 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like ice cream
def do_you_like_ice_cream(robot):
    robot.say("I like ice cream")

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.591097354888916 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tell me the first law of robotics
def tell_me_the_first_law_of_robotics(robot):
    robot.say("A robot may not injure a human being or, through inaction, allow a human being to come to harm.")

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 1.0109772682189941 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: can you find an apple
def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find("apple")

    if apple_found:
        robot.say("I found an apple!")
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 1.279695987701416 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little left
def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0278606414794922 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move ten centimeters up
def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.049879789352417 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go one hundred and fifty millimeters backwards
def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.2048137187957764 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move fifteen centimeters above the die
def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.164665937423706 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: look at the die
def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.5094895362854004 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the die
def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.4720268249511719 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate 33 degrees clockwise
def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.5942902565002441 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tilt seventy degrees forwards
def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.6312620639801025 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go ten centimeters up and fifteen centimeters backwards
def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.529268503189087 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw an ellipse with radii five and four centimeters
def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.04 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.5447616577148438 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up and then draw a small pentagon
def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

    waypoints = 5

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.1 * math.cos(2 * math.pi * i / 5)
        waypoint.position.y += 0.1 * math.sin(2 * math.pi * i / 5)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.180706024169922 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing
def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    # find the hammer
    (hammer_pose, hammer_found) = robot.find("hammer")

    # find the nails
    (nails_pose, nails_found) = robot.find("nails")

    # if both were found, say tools found
    if hammer_found and nails_found:
        robot.say("Tools found!")

    # if hammer was found but nails were not, say hammer found
    elif hammer_found and not nails_found:
        robot.say("Hammer found!")

    # if nails were found but hammer was not, say nails found
    elif not hammer_found and nails_found:
        robot.say("Nails found!")

    # if neither were found, say nothing found
    else:
        robot.say("Nothing found!")

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 4.165000915527344 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: five centimeters up and four down
def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.7585015296936035 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up
def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0515775680541992 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: point four centimeters down
def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0740852355957031 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's the cube root of three rounded to two decimal points
def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, 1/3), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 1.0126659870147705 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw a small circle
def draw_a_small_circle(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.05 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.2932186126708984 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: place held item on the table
def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.5554652214050293 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little backwards
def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0462796688079834 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit back the other way
def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.111067295074463 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little forwards and then to the left
def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_forwards(robot)
def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.7706058025360107 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: wait five seconds, then move a little up
def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_up(robot)
def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.6777269840240479 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you can't find a banana, wait a little and try one more time
def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    # find the banana
    (banana_pose, banana_found) = robot.find("banana")

    # if banana wasn't found, tell the user
    if not banana_found:
        robot.say("Can't find the banana!")
        robot.wait(1)
        # try again
        (banana_pose, banana_found) = robot.find("banana")

        # if banana wasn't found, tell the user
        if not banana_found:
            robot.say("Can't find the banana!")
        else:
            robot.say("Found the banana!")
    else:
        robot.say("Found the banana!")

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        robot.wait(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 3.5587146282196045 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you see a screw, move ten centimeters above item
def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    # find the screw
    (screw_pose, screw_found) = robot.find("screw")

    # if screw wasn't found, tell the user
    if not screw_found:
        robot.say("Can't find the screw!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = screw_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.2638332843780518 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move 1.5 centimeters up
def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1677427291870117 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go 3.1 meters to the left
def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.166682481765747 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little to the left and then right, repeat three times
def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.082634449005127 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a little forwards
def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.008652925491333 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit more
def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.98624587059021 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say cheese
def say_cheese(robot):
    robot.say("cheese")

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.41512417793273926 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like puppies
def do_you_like_puppies(robot):
    robot.say("I like puppies")

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.5942082405090332 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: why do you like them
def why_do_you_like_them(robot):
    robot.say("Why do you like them?")

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.5707318782806396 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's your favourite book
def whats_your_favourite_book(robot):
    robot.say("My favourite book is The Hobbit")

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.6682412624359131 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: who's the author
def whos_the_author(robot):
    robot.say("I am ")

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.4897501468658447 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate a quarter turn anticlockwise
def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.6290972232818604 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate back the other way
def rotate_back_the_other_way(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.585465669631958 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a random amount to the left, but less than a meters
def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meters

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.3190407752990723 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: again but half the distance
def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: again but half the distance

Isolated Source:


def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0697441101074219 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: half that again
def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()

Prompt: # define function: half that again

Isolated Source:


def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()


Got result in 0.5867881774902344 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like to work with humans
def do_you_like_to_work_with_humans(robot):
    robot.say("I like to work with humans")

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.6880993843078613 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: good job
def good_job(robot):
    robot.say("good job")

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.39350223541259766 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: build a house
def build_a_house(robot):
    # find the bin
    (small_bin_pose, small_bin_found) = robot.find("small bin")

    # if bin wasn't found, tell the user
    if not small_bin_found:
        robot.say("Can't find the small bin!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        # five centimeters left of the bin
        waypoint.position.y = small_bin_pose.position.y - 0.05
        # ten centimeters above the bin
        waypoint.position.z = small_bin_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: build a house

Isolated Source:


def build_a_house(robot):
    (small_bin_pose, small_bin_found) = robot.find('small bin')
    if (not small_bin_found):
        robot.say("Can't find the small bin!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        waypoint.position.y = (small_bin_pose.position.y - 0.05)
        waypoint.position.z = (small_bin_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.481107711791992 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: push the red button
def push_the_red_button(robot):
    robot.push_button("red")

Prompt: # define function: push the red button

Isolated Source:


def push_the_red_button(robot):
    robot.push_button('red')


Got result in 0.49005961418151855 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the battery and place it on the base plate
def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

Prompt: # define function: pick up the battery and place it on the base plate

Isolated Source:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')


Got result in 0.9167180061340332 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten screws
def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say("I should use a screwdriver to tighten screws")

Prompt: # define function: what tool should i use to tighten screws

Isolated Source:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')


Got result in 0.8569390773773193 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten bolts to correct torque
def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say("I would use a torque wrench to tighten bolts to the correct torque.")

Prompt: # define function: what tool should i use to tighten bolts to correct torque

Isolated Source:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')


Got result in 1.109093427658081 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say hello
def say_hello(robot):
    robot.say("hello")

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 0.37525320053100586 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like ice cream
def do_you_like_ice_cream(robot):
    robot.say("I like ice cream")

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.5921761989593506 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tell me the first law of robotics
def tell_me_the_first_law_of_robotics(robot):
    robot.say("A robot may not injure a human being or, through inaction, allow a human being to come to harm.")

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 1.0119919776916504 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: can you find an apple
def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find("apple")

    if apple_found:
        robot.say("I found an apple!")
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 1.2793118953704834 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little left
def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0253942012786865 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move ten centimeters up
def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0503044128417969 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go one hundred and fifty millimeters backwards
def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.204237937927246 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move fifteen centimeters above the die
def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1650869846343994 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: look at the die
def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.5101561546325684 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the die
def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.47202467918395996 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate 33 degrees clockwise
def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.5940427780151367 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tilt seventy degrees forwards
def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.6317007541656494 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go ten centimeters up and fifteen centimeters backwards
def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.527531385421753 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw an ellipse with radii five and four centimeters
def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.04 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.543663501739502 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up and then draw a small pentagon
def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

    waypoints = 5

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.1 * math.cos(2 * math.pi * i / 5)
        waypoint.position.y += 0.1 * math.sin(2 * math.pi * i / 5)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.1833083629608154 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing
def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    # find the hammer
    (hammer_pose, hammer_found) = robot.find("hammer")

    # find the nails
    (nails_pose, nails_found) = robot.find("nails")

    # if both were found, say tools found
    if hammer_found and nails_found:
        robot.say("Tools found!")

    # if hammer was found but nails were not, say hammer found
    elif hammer_found and not nails_found:
        robot.say("Hammer found!")

    # if nails were found but hammer was not, say nails found
    elif not hammer_found and nails_found:
        robot.say("Nails found!")

    # if neither were found, say nothing found
    else:
        robot.say("Nothing found!")

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 4.164853811264038 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: five centimeters up and four down
def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.7570829391479492 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up
def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.051199197769165 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: point four centimeters down
def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.071519374847412 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's the cube root of three rounded to two decimal points
def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, 1/3), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 1.0140275955200195 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw a small circle
def draw_a_small_circle(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.05 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.2924792766571045 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: place held item on the table
def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.5524067878723145 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little backwards
def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0450160503387451 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit back the other way
def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.111954689025879 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little forwards and then to the left
def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_forwards(robot)
def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.7705278396606445 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: wait five seconds, then move a little up
def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_up(robot)
def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.681035041809082 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you can't find a banana, wait a little and try one more time
def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    # find the banana
    (banana_pose, banana_found) = robot.find("banana")

    # if banana wasn't found, tell the user
    if not banana_found:
        robot.say("Can't find the banana!")
        robot.wait(1)
        # try again
        (banana_pose, banana_found) = robot.find("banana")

        # if banana wasn't found, tell the user
        if not banana_found:
            robot.say("Can't find the banana!")
        else:
            robot.say("Found the banana!")
    else:
        robot.say("Found the banana!")

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        robot.wait(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 3.559521436691284 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you see a screw, move ten centimeters above item
def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    # find the screw
    (screw_pose, screw_found) = robot.find("screw")

    # if screw wasn't found, tell the user
    if not screw_found:
        robot.say("Can't find the screw!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = screw_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.265101909637451 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move 1.5 centimeters up
def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.168353796005249 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go 3.1 meters to the left
def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1676156520843506 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little to the left and then right, repeat three times
def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.083038091659546 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a little forwards
def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0091469287872314 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit more
def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.9883625507354736 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say cheese
def say_cheese(robot):
    robot.say("cheese")

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.4131910800933838 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like puppies
def do_you_like_puppies(robot):
    robot.say("I like puppies")

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.5943822860717773 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: why do you like them
def why_do_you_like_them(robot):
    robot.say("Why do you like them?")

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.5700540542602539 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's your favourite book
def whats_your_favourite_book(robot):
    robot.say("My favourite book is The Hobbit")

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.6676127910614014 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: who's the author
def whos_the_author(robot):
    robot.say("I am ")

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.48917055130004883 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate a quarter turn anticlockwise
def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.6292495727539062 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate back the other way
def rotate_back_the_other_way(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.5850114822387695 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a random amount to the left, but less than a meters
def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meters

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.319525957107544 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: again but half the distance
def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: again but half the distance

Isolated Source:


def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0700407028198242 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: half that again
def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()

Prompt: # define function: half that again

Isolated Source:


def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()


Got result in 0.5863246917724609 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like to work with humans
def do_you_like_to_work_with_humans(robot):
    robot.say("I like to work with humans")

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.6896867752075195 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: good job
def good_job(robot):
    robot.say("good job")

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.3932993412017822 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: build a house
def build_a_house(robot):
    # find the bin
    (small_bin_pose, small_bin_found) = robot.find("small bin")

    # if bin wasn't found, tell the user
    if not small_bin_found:
        robot.say("Can't find the small bin!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        # five centimeters left of the bin
        waypoint.position.y = small_bin_pose.position.y - 0.05
        # ten centimeters above the bin
        waypoint.position.z = small_bin_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: build a house

Isolated Source:


def build_a_house(robot):
    (small_bin_pose, small_bin_found) = robot.find('small bin')
    if (not small_bin_found):
        robot.say("Can't find the small bin!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        waypoint.position.y = (small_bin_pose.position.y - 0.05)
        waypoint.position.z = (small_bin_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.4854109287261963 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: push the red button
def push_the_red_button(robot):
    robot.push_button("red")

Prompt: # define function: push the red button

Isolated Source:


def push_the_red_button(robot):
    robot.push_button('red')


Got result in 0.49023890495300293 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the battery and place it on the base plate
def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

Prompt: # define function: pick up the battery and place it on the base plate

Isolated Source:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')


Got result in 0.9166231155395508 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten screws
def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say("I should use a screwdriver to tighten screws")

Prompt: # define function: what tool should i use to tighten screws

Isolated Source:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')


Got result in 0.8576343059539795 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten bolts to correct torque
def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say("I would use a torque wrench to tighten bolts to the correct torque.")

Prompt: # define function: what tool should i use to tighten bolts to correct torque

Isolated Source:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')


Got result in 1.1080622673034668 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say hello
def say_hello(robot):
    robot.say("hello")

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 0.3748142719268799 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like ice cream
def do_you_like_ice_cream(robot):
    robot.say("I like ice cream")

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.5928640365600586 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tell me the first law of robotics
def tell_me_the_first_law_of_robotics(robot):
    robot.say("A robot may not injure a human being or, through inaction, allow a human being to come to harm.")

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 1.012721061706543 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: can you find an apple
def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find("apple")

    if apple_found:
        robot.say("I found an apple!")
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 1.2800486087799072 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little left
def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0283875465393066 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move ten centimeters up
def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0507862567901611 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go one hundred and fifty millimeters backwards
def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.2051944732666016 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move fifteen centimeters above the die
def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1671388149261475 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: look at the die
def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.5101785659790039 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the die
def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.4712789058685303 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate 33 degrees clockwise
def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.5951080322265625 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tilt seventy degrees forwards
def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.6319165229797363 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go ten centimeters up and fifteen centimeters backwards
def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.5289969444274902 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw an ellipse with radii five and four centimeters
def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.04 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.544642210006714 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up and then draw a small pentagon
def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

    waypoints = 5

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.1 * math.cos(2 * math.pi * i / 5)
        waypoint.position.y += 0.1 * math.sin(2 * math.pi * i / 5)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.189741373062134 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing
def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    # find the hammer
    (hammer_pose, hammer_found) = robot.find("hammer")

    # find the nails
    (nails_pose, nails_found) = robot.find("nails")

    # if both were found, say tools found
    if hammer_found and nails_found:
        robot.say("Tools found!")

    # if hammer was found but nails were not, say hammer found
    elif hammer_found and not nails_found:
        robot.say("Hammer found!")

    # if nails were found but hammer was not, say nails found
    elif not hammer_found and nails_found:
        robot.say("Nails found!")

    # if neither were found, say nothing found
    else:
        robot.say("Nothing found!")

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 4.16614031791687 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: five centimeters up and four down
def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.7591588497161865 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up
def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0512914657592773 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: point four centimeters down
def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0743753910064697 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's the cube root of three rounded to two decimal points
def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, 1/3), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 1.0134849548339844 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw a small circle
def draw_a_small_circle(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.05 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.2927751541137695 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: place held item on the table
def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.5542464256286621 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little backwards
def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.045358419418335 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit back the other way
def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1117675304412842 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little forwards and then to the left
def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_forwards(robot)
def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.7704625129699707 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: wait five seconds, then move a little up
def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_up(robot)
def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.685028314590454 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you can't find a banana, wait a little and try one more time
def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    # find the banana
    (banana_pose, banana_found) = robot.find("banana")

    # if banana wasn't found, tell the user
    if not banana_found:
        robot.say("Can't find the banana!")
        robot.wait(1)
        # try again
        (banana_pose, banana_found) = robot.find("banana")

        # if banana wasn't found, tell the user
        if not banana_found:
            robot.say("Can't find the banana!")
        else:
            robot.say("Found the banana!")
    else:
        robot.say("Found the banana!")

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        robot.wait(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 3.5604419708251953 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you see a screw, move ten centimeters above item
def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    # find the screw
    (screw_pose, screw_found) = robot.find("screw")

    # if screw wasn't found, tell the user
    if not screw_found:
        robot.say("Can't find the screw!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = screw_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.264009475708008 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move 1.5 centimeters up
def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1689209938049316 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go 3.1 meters to the left
def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1683712005615234 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little to the left and then right, repeat three times
def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.0889241695404053 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a little forwards
def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.009117603302002 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit more
def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.9879052639007568 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say cheese
def say_cheese(robot):
    robot.say("cheese")

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.415726900100708 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like puppies
def do_you_like_puppies(robot):
    robot.say("I like puppies")

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.5937905311584473 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: why do you like them
def why_do_you_like_them(robot):
    robot.say("Why do you like them?")

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.5709471702575684 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's your favourite book
def whats_your_favourite_book(robot):
    robot.say("My favourite book is The Hobbit")

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.6692690849304199 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: who's the author
def whos_the_author(robot):
    robot.say("I am ")

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.490933895111084 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate a quarter turn anticlockwise
def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.6299784183502197 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate back the other way
def rotate_back_the_other_way(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.5849804878234863 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a random amount to the left, but less than a meters
def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meters

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.3193318843841553 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: again but half the distance
def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: again but half the distance

Isolated Source:


def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.070408582687378 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: half that again
def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()

Prompt: # define function: half that again

Isolated Source:


def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()


Got result in 0.5857117176055908 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like to work with humans
def do_you_like_to_work_with_humans(robot):
    robot.say("I like to work with humans")

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.6892743110656738 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: good job
def good_job(robot):
    robot.say("good job")

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.39365148544311523 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: build a house
def build_a_house(robot):
    # find the bin
    (small_bin_pose, small_bin_found) = robot.find("small bin")

    # if bin wasn't found, tell the user
    if not small_bin_found:
        robot.say("Can't find the small bin!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        # five centimeters left of the bin
        waypoint.position.y = small_bin_pose.position.y - 0.05
        # ten centimeters above the bin
        waypoint.position.z = small_bin_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: build a house

Isolated Source:


def build_a_house(robot):
    (small_bin_pose, small_bin_found) = robot.find('small bin')
    if (not small_bin_found):
        robot.say("Can't find the small bin!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        waypoint.position.y = (small_bin_pose.position.y - 0.05)
        waypoint.position.z = (small_bin_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.4885542392730713 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: push the red button
def push_the_red_button(robot):
    robot.push_button("red")

Prompt: # define function: push the red button

Isolated Source:


def push_the_red_button(robot):
    robot.push_button('red')


Got result in 0.489825963973999 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the battery and place it on the base plate
def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

Prompt: # define function: pick up the battery and place it on the base plate

Isolated Source:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')


Got result in 0.9176452159881592 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten screws
def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say("I should use a screwdriver to tighten screws")

Prompt: # define function: what tool should i use to tighten screws

Isolated Source:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')


Got result in 0.8571689128875732 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten bolts to correct torque
def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say("I would use a torque wrench to tighten bolts to the correct torque.")

Prompt: # define function: what tool should i use to tighten bolts to correct torque

Isolated Source:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')


Got result in 1.1086077690124512 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say hello
def say_hello(robot):
    robot.say("hello")

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 0.37407445907592773 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like ice cream
def do_you_like_ice_cream(robot):
    robot.say("I like ice cream")

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.5923285484313965 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tell me the first law of robotics
def tell_me_the_first_law_of_robotics(robot):
    robot.say("A robot may not injure a human being or, through inaction, allow a human being to come to harm.")

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 1.0121185779571533 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: can you find an apple
def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find("apple")

    if apple_found:
        robot.say("I found an apple!")
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 1.2806761264801025 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little left
def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0267181396484375 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move ten centimeters up
def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0496599674224854 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go one hundred and fifty millimeters backwards
def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.2040674686431885 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move fifteen centimeters above the die
def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1654794216156006 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: look at the die
def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.5089774131774902 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the die
def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.470836877822876 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate 33 degrees clockwise
def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.5950219631195068 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tilt seventy degrees forwards
def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.6319329738616943 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go ten centimeters up and fifteen centimeters backwards
def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.5294525623321533 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw an ellipse with radii five and four centimeters
def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.04 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.5452687740325928 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up and then draw a small pentagon
def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

    waypoints = 5

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.1 * math.cos(2 * math.pi * i / 5)
        waypoint.position.y += 0.1 * math.sin(2 * math.pi * i / 5)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.182264566421509 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing
def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    # find the hammer
    (hammer_pose, hammer_found) = robot.find("hammer")

    # find the nails
    (nails_pose, nails_found) = robot.find("nails")

    # if both were found, say tools found
    if hammer_found and nails_found:
        robot.say("Tools found!")

    # if hammer was found but nails were not, say hammer found
    elif hammer_found and not nails_found:
        robot.say("Hammer found!")

    # if nails were found but hammer was not, say nails found
    elif not hammer_found and nails_found:
        robot.say("Nails found!")

    # if neither were found, say nothing found
    else:
        robot.say("Nothing found!")

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 4.168916702270508 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: five centimeters up and four down
def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.7597172260284424 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up
def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.052302598953247 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: point four centimeters down
def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0727181434631348 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's the cube root of three rounded to two decimal points
def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, 1/3), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 1.013547420501709 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw a small circle
def draw_a_small_circle(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.05 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.2938058376312256 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: place held item on the table
def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.5542404651641846 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little backwards
def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0461299419403076 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit back the other way
def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1114864349365234 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little forwards and then to the left
def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_forwards(robot)
def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.772273302078247 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: wait five seconds, then move a little up
def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_up(robot)
def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.678363561630249 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you can't find a banana, wait a little and try one more time
def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    # find the banana
    (banana_pose, banana_found) = robot.find("banana")

    # if banana wasn't found, tell the user
    if not banana_found:
        robot.say("Can't find the banana!")
        robot.wait(1)
        # try again
        (banana_pose, banana_found) = robot.find("banana")

        # if banana wasn't found, tell the user
        if not banana_found:
            robot.say("Can't find the banana!")
        else:
            robot.say("Found the banana!")
    else:
        robot.say("Found the banana!")

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        robot.wait(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 3.5611367225646973 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you see a screw, move ten centimeters above item
def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    # find the screw
    (screw_pose, screw_found) = robot.find("screw")

    # if screw wasn't found, tell the user
    if not screw_found:
        robot.say("Can't find the screw!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = screw_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.2636430263519287 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move 1.5 centimeters up
def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1681373119354248 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go 3.1 meters to the left
def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1674273014068604 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little to the left and then right, repeat three times
def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.083564043045044 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a little forwards
def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0093367099761963 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit more
def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.9872803688049316 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say cheese
def say_cheese(robot):
    robot.say("cheese")

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.41523146629333496 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like puppies
def do_you_like_puppies(robot):
    robot.say("I like puppies")

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.5943853855133057 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: why do you like them
def why_do_you_like_them(robot):
    robot.say("Why do you like them?")

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.569422721862793 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's your favourite book
def whats_your_favourite_book(robot):
    robot.say("My favourite book is The Hobbit")

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.6674351692199707 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: who's the author
def whos_the_author(robot):
    robot.say("I am ")

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.4892299175262451 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate a quarter turn anticlockwise
def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.6280982494354248 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate back the other way
def rotate_back_the_other_way(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.5852792263031006 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a random amount to the left, but less than a meters
def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meters

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.3212461471557617 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: again but half the distance
def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: again but half the distance

Isolated Source:


def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0699682235717773 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: half that again
def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()

Prompt: # define function: half that again

Isolated Source:


def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()


Got result in 0.5855028629302979 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like to work with humans
def do_you_like_to_work_with_humans(robot):
    robot.say("I like to work with humans")

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.6892280578613281 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: good job
def good_job(robot):
    robot.say("good job")

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.3932507038116455 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: build a house
def build_a_house(robot):
    # find the bin
    (small_bin_pose, small_bin_found) = robot.find("small bin")

    # if bin wasn't found, tell the user
    if not small_bin_found:
        robot.say("Can't find the small bin!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        # five centimeters left of the bin
        waypoint.position.y = small_bin_pose.position.y - 0.05
        # ten centimeters above the bin
        waypoint.position.z = small_bin_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: build a house

Isolated Source:


def build_a_house(robot):
    (small_bin_pose, small_bin_found) = robot.find('small bin')
    if (not small_bin_found):
        robot.say("Can't find the small bin!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        waypoint.position.y = (small_bin_pose.position.y - 0.05)
        waypoint.position.z = (small_bin_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.4885876178741455 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: push the red button
def push_the_red_button(robot):
    robot.push_button("red")

Prompt: # define function: push the red button

Isolated Source:


def push_the_red_button(robot):
    robot.push_button('red')


Got result in 0.49016833305358887 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the battery and place it on the base plate
def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

Prompt: # define function: pick up the battery and place it on the base plate

Isolated Source:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')


Got result in 0.9161956310272217 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten screws
def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say("I should use a screwdriver to tighten screws")

Prompt: # define function: what tool should i use to tighten screws

Isolated Source:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')


Got result in 0.8565278053283691 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten bolts to correct torque
def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say("I would use a torque wrench to tighten bolts to the correct torque.")

Prompt: # define function: what tool should i use to tighten bolts to correct torque

Isolated Source:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')


Got result in 1.1104958057403564 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say hello
def say_hello(robot):
    robot.say("hello")

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 0.3751823902130127 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like ice cream
def do_you_like_ice_cream(robot):
    robot.say("I like ice cream")

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.5907566547393799 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tell me the first law of robotics
def tell_me_the_first_law_of_robotics(robot):
    robot.say("A robot may not injure a human being or, through inaction, allow a human being to come to harm.")

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 1.0122895240783691 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: can you find an apple
def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find("apple")

    if apple_found:
        robot.say("I found an apple!")
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 1.2801876068115234 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little left
def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0263619422912598 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move ten centimeters up
def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0505096912384033 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go one hundred and fifty millimeters backwards
def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.2054383754730225 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move fifteen centimeters above the die
def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.167175531387329 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: look at the die
def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.5087587833404541 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the die
def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.4703409671783447 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate 33 degrees clockwise
def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.5946455001831055 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tilt seventy degrees forwards
def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.6321835517883301 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go ten centimeters up and fifteen centimeters backwards
def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.5282082557678223 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw an ellipse with radii five and four centimeters
def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.04 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.5461835861206055 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up and then draw a small pentagon
def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

    waypoints = 5

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.1 * math.cos(2 * math.pi * i / 5)
        waypoint.position.y += 0.1 * math.sin(2 * math.pi * i / 5)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.1823742389678955 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing
def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    # find the hammer
    (hammer_pose, hammer_found) = robot.find("hammer")

    # find the nails
    (nails_pose, nails_found) = robot.find("nails")

    # if both were found, say tools found
    if hammer_found and nails_found:
        robot.say("Tools found!")

    # if hammer was found but nails were not, say hammer found
    elif hammer_found and not nails_found:
        robot.say("Hammer found!")

    # if nails were found but hammer was not, say nails found
    elif not hammer_found and nails_found:
        robot.say("Nails found!")

    # if neither were found, say nothing found
    else:
        robot.say("Nothing found!")

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 4.168083190917969 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: five centimeters up and four down
def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.7588536739349365 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up
def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0512635707855225 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: point four centimeters down
def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0719714164733887 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's the cube root of three rounded to two decimal points
def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, 1/3), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 1.0131497383117676 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw a small circle
def draw_a_small_circle(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.05 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.2933826446533203 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: place held item on the table
def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.5542080402374268 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little backwards
def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0456993579864502 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit back the other way
def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1114082336425781 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little forwards and then to the left
def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_forwards(robot)
def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.770320415496826 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: wait five seconds, then move a little up
def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_up(robot)
def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.678847312927246 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you can't find a banana, wait a little and try one more time
def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    # find the banana
    (banana_pose, banana_found) = robot.find("banana")

    # if banana wasn't found, tell the user
    if not banana_found:
        robot.say("Can't find the banana!")
        robot.wait(1)
        # try again
        (banana_pose, banana_found) = robot.find("banana")

        # if banana wasn't found, tell the user
        if not banana_found:
            robot.say("Can't find the banana!")
        else:
            robot.say("Found the banana!")
    else:
        robot.say("Found the banana!")

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        robot.wait(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 3.5627853870391846 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you see a screw, move ten centimeters above item
def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    # find the screw
    (screw_pose, screw_found) = robot.find("screw")

    # if screw wasn't found, tell the user
    if not screw_found:
        robot.say("Can't find the screw!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = screw_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.271034002304077 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move 1.5 centimeters up
def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1709473133087158 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go 3.1 meters to the left
def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.170342206954956 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little to the left and then right, repeat three times
def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.092470645904541 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a little forwards
def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0140395164489746 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit more
def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.9892380237579346 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say cheese
def say_cheese(robot):
    robot.say("cheese")

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.41463494300842285 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like puppies
def do_you_like_puppies(robot):
    robot.say("I like puppies")

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.5940854549407959 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: why do you like them
def why_do_you_like_them(robot):
    robot.say("Why do you like them?")

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.571413516998291 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's your favourite book
def whats_your_favourite_book(robot):
    robot.say("My favourite book is The Hobbit")

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.666701078414917 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: who's the author
def whos_the_author(robot):
    robot.say("I am ")

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.4908468723297119 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate a quarter turn anticlockwise
def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.6305422782897949 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate back the other way
def rotate_back_the_other_way(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.5865120887756348 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a random amount to the left, but less than a meters
def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meters

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.320122480392456 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: again but half the distance
def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: again but half the distance

Isolated Source:


def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0701777935028076 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: half that again
def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()

Prompt: # define function: half that again

Isolated Source:


def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()


Got result in 0.5853805541992188 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like to work with humans
def do_you_like_to_work_with_humans(robot):
    robot.say("I like to work with humans")

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.6888570785522461 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: good job
def good_job(robot):
    robot.say("good job")

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.3935878276824951 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: build a house
def build_a_house(robot):
    # find the bin
    (small_bin_pose, small_bin_found) = robot.find("small bin")

    # if bin wasn't found, tell the user
    if not small_bin_found:
        robot.say("Can't find the small bin!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        # five centimeters left of the bin
        waypoint.position.y = small_bin_pose.position.y - 0.05
        # ten centimeters above the bin
        waypoint.position.z = small_bin_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: build a house

Isolated Source:


def build_a_house(robot):
    (small_bin_pose, small_bin_found) = robot.find('small bin')
    if (not small_bin_found):
        robot.say("Can't find the small bin!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        waypoint.position.y = (small_bin_pose.position.y - 0.05)
        waypoint.position.z = (small_bin_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.483313798904419 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: push the red button
def push_the_red_button(robot):
    robot.push_button("red")

Prompt: # define function: push the red button

Isolated Source:


def push_the_red_button(robot):
    robot.push_button('red')


Got result in 0.4902946949005127 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the battery and place it on the base plate
def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

Prompt: # define function: pick up the battery and place it on the base plate

Isolated Source:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')


Got result in 0.9166224002838135 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten screws
def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say("I should use a screwdriver to tighten screws")

Prompt: # define function: what tool should i use to tighten screws

Isolated Source:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')


Got result in 0.8590915203094482 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten bolts to correct torque
def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say("I would use a torque wrench to tighten bolts to the correct torque.")

Prompt: # define function: what tool should i use to tighten bolts to correct torque

Isolated Source:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')


Got result in 1.1086513996124268 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say hello
def say_hello(robot):
    robot.say("hello")

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 0.37438225746154785 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like ice cream
def do_you_like_ice_cream(robot):
    robot.say("I like ice cream")

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.5921616554260254 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tell me the first law of robotics
def tell_me_the_first_law_of_robotics(robot):
    robot.say("A robot may not injure a human being or, through inaction, allow a human being to come to harm.")

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 1.0129880905151367 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: can you find an apple
def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find("apple")

    if apple_found:
        robot.say("I found an apple!")
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 1.2808077335357666 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little left
def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0267341136932373 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move ten centimeters up
def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0498552322387695 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go one hundred and fifty millimeters backwards
def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.2047290802001953 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move fifteen centimeters above the die
def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1653008460998535 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: look at the die
def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.5093564987182617 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the die
def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.4716165065765381 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate 33 degrees clockwise
def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.5941162109375 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: tilt seventy degrees forwards
def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.632094144821167 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go ten centimeters up and fifteen centimeters backwards
def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.5289392471313477 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw an ellipse with radii five and four centimeters
def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.04 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.545985460281372 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up and then draw a small pentagon
def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

    waypoints = 5

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.1 * math.cos(2 * math.pi * i / 5)
        waypoint.position.y += 0.1 * math.sin(2 * math.pi * i / 5)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.1831352710723877 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing
def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    # find the hammer
    (hammer_pose, hammer_found) = robot.find("hammer")

    # find the nails
    (nails_pose, nails_found) = robot.find("nails")

    # if both were found, say tools found
    if hammer_found and nails_found:
        robot.say("Tools found!")

    # if hammer was found but nails were not, say hammer found
    elif hammer_found and not nails_found:
        robot.say("Hammer found!")

    # if nails were found but hammer was not, say nails found
    elif not hammer_found and nails_found:
        robot.say("Nails found!")

    # if neither were found, say nothing found
    else:
        robot.say("Nothing found!")

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 4.166337728500366 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: five centimeters up and four down
def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.7599685192108154 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up
def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0517911911010742 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: point four centimeters down
def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0718262195587158 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's the cube root of three rounded to two decimal points
def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, 1/3), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 1.0146725177764893 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: draw a small circle
def draw_a_small_circle(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.05 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.2922699451446533 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: place held item on the table
def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.5517847537994385 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little backwards
def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0461626052856445 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit back the other way
def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.110562801361084 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little forwards and then to the left
def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_forwards(robot)
def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.7716550827026367 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: wait five seconds, then move a little up
def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_up(robot)
def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.6827991008758545 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you can't find a banana, wait a little and try one more time
def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    # find the banana
    (banana_pose, banana_found) = robot.find("banana")

    # if banana wasn't found, tell the user
    if not banana_found:
        robot.say("Can't find the banana!")
        robot.wait(1)
        # try again
        (banana_pose, banana_found) = robot.find("banana")

        # if banana wasn't found, tell the user
        if not banana_found:
            robot.say("Can't find the banana!")
        else:
            robot.say("Found the banana!")
    else:
        robot.say("Found the banana!")

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        robot.wait(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 3.567148447036743 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: if you see a screw, move ten centimeters above item
def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    # find the screw
    (screw_pose, screw_found) = robot.find("screw")

    # if screw wasn't found, tell the user
    if not screw_found:
        robot.say("Can't find the screw!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = screw_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.2759463787078857 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move 1.5 centimeters up
def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1739749908447266 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: go 3.1 meters to the left
def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.170912742614746 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a little to the left and then right, repeat three times
def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.095335006713867 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a little forwards
def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.012699842453003 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: a bit more
def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.9928278923034668 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: say cheese
def say_cheese(robot):
    robot.say("cheese")

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.41585612297058105 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like puppies
def do_you_like_puppies(robot):
    robot.say("I like puppies")

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.593792200088501 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: why do you like them
def why_do_you_like_them(robot):
    robot.say("Why do you like them?")

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.570749044418335 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what's your favourite book
def whats_your_favourite_book(robot):
    robot.say("My favourite book is The Hobbit")

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.6678183078765869 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: who's the author
def whos_the_author(robot):
    robot.say("I am ")

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.4893643856048584 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate a quarter turn anticlockwise
def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.6281988620758057 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: rotate back the other way
def rotate_back_the_other_way(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.5845315456390381 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: move a random amount to the left, but less than a meters
def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meters

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.3191096782684326 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: again but half the distance
def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: again but half the distance

Isolated Source:


def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0715010166168213 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: half that again
def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()

Prompt: # define function: half that again

Isolated Source:


def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()


Got result in 0.5859448909759521 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: do you like to work with humans
def do_you_like_to_work_with_humans(robot):
    robot.say("I like to work with humans")

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.6902463436126709 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: good job
def good_job(robot):
    robot.say("good job")

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.3929016590118408 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: build a house
def build_a_house(robot):
    # find the bin
    (small_bin_pose, small_bin_found) = robot.find("small bin")

    # if bin wasn't found, tell the user
    if not small_bin_found:
        robot.say("Can't find the small bin!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        # five centimeters left of the bin
        waypoint.position.y = small_bin_pose.position.y - 0.05
        # ten centimeters above the bin
        waypoint.position.z = small_bin_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: build a house

Isolated Source:


def build_a_house(robot):
    (small_bin_pose, small_bin_found) = robot.find('small bin')
    if (not small_bin_found):
        robot.say("Can't find the small bin!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = small_bin_pose.position.x
        waypoint.position.y = (small_bin_pose.position.y - 0.05)
        waypoint.position.z = (small_bin_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.4901154041290283 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: push the red button
def push_the_red_button(robot):
    robot.push_button("red")

Prompt: # define function: push the red button

Isolated Source:


def push_the_red_button(robot):
    robot.push_button('red')


Got result in 0.4909327030181885 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: pick up the battery and place it on the base plate
def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')

Prompt: # define function: pick up the battery and place it on the base plate

Isolated Source:


def pick_up_the_battery_and_place_it_on_the_base_plate(robot):
    pick(robot, 'battery')
    place(robot, 'base plate')


Got result in 0.9162635803222656 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten screws
def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say("I should use a screwdriver to tighten screws")

Prompt: # define function: what tool should i use to tighten screws

Isolated Source:


def what_tool_should_i_use_to_tighten_screws(robot):
    robot.say('I should use a screwdriver to tighten screws')


Got result in 0.8563201427459717 seconds!

Generation successful, saving cache!

No matches in cache, generating!

Searching generated block:
# define function: what tool should i use to tighten bolts to correct torque
def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say("I would use a torque wrench to tighten bolts to the correct torque.")

Prompt: # define function: what tool should i use to tighten bolts to correct torque

Isolated Source:


def what_tool_should_i_use_to_tighten_bolts_to_correct_torque(robot):
    robot.say('I would use a torque wrench to tighten bolts to the correct torque.')


Got result in 1.1103053092956543 seconds!

Generation successful, saving cache!
