1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eno1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
    link/ether 88:ae:dd:41:db:1b brd ff:ff:ff:ff:ff:ff
    altname enp6s0f0
    inet 130.230.37.119/26 brd 130.230.37.127 scope global dynamic noprefixroute eno1
       valid_lft 6490sec preferred_lft 6490sec
    inet6 fe80::deb9:3e55:9518:d77c/64 scope link noprefixroute 
       valid_lft forever preferred_lft forever
3: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default 
    link/ether 02:42:d0:c3:8c:18 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0
       valid_lft forever preferred_lft forever
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eno1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
    link/ether 88:ae:dd:41:db:1b brd ff:ff:ff:ff:ff:ff
    altname enp6s0f0
    inet 130.230.37.119/26 brd 130.230.37.127 scope global dynamic noprefixroute eno1
       valid_lft 6478sec preferred_lft 6478sec
    inet6 fe80::deb9:3e55:9518:d77c/64 scope link noprefixroute 
       valid_lft forever preferred_lft forever
3: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default 
    link/ether 02:42:d0:c3:8c:18 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0
       valid_lft forever preferred_lft forever
Filename not defined, loading from temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: say hello
def say_hello(robot):
    robot.say("hello")

Prompt: # define function: say hello

Isolated Source:


def say_hello(robot):
    robot.say('hello')


Got result in 1.4135839939117432 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: do you like ice cream
def do_you_like_ice_cream(robot):
    robot.say("I like ice cream")

Prompt: # define function: do you like ice cream

Isolated Source:


def do_you_like_ice_cream(robot):
    robot.say('I like ice cream')


Got result in 0.5939874649047852 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: tell me the first law of robotics
def tell_me_the_first_law_of_robotics(robot):
    robot.say("A robot may not injure a human being or, through inaction, allow a human being to come to harm.")

Prompt: # define function: tell me the first law of robotics

Isolated Source:


def tell_me_the_first_law_of_robotics(robot):
    robot.say('A robot may not injure a human being or, through inaction, allow a human being to come to harm.')


Got result in 1.0623631477355957 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: can you find an apple
def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find("apple")

    if apple_found:
        robot.say("I found an apple!")
    else:
        robot.say("I couldn't find an apple!")

Prompt: # define function: can you find an apple

Isolated Source:


def can_you_find_an_apple(robot):
    (apple_pose, apple_found) = robot.find('apple')
    if apple_found:
        robot.say('I found an apple!')
    else:
        robot.say("I couldn't find an apple!")


Got result in 1.2829718589782715 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: move a little left
def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little left

Isolated Source:


def move_a_little_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0093457698822021 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: move ten centimeters up
def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move ten centimeters up

Isolated Source:


def move_ten_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.091184139251709 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: go one hundred and fifty millimeters backwards
def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go one hundred and fifty millimeters backwards

Isolated Source:


def go_one_hundred_and_fifty_millimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1766879558563232 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: move fifteen centimeters above the die
def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move fifteen centimeters above the die

Isolated Source:


def move_fifteen_centimeters_above_the_die(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.2459115982055664 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: look at the die
def look_at_the_die(robot):
    look_at(robot, 'die')

Prompt: # define function: look at the die

Isolated Source:


def look_at_the_die(robot):
    look_at(robot, 'die')


Got result in 0.5422372817993164 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: pick up the die
def pick_up_the_die(robot):
    pick(robot, 'die')

Prompt: # define function: pick up the die

Isolated Source:


def pick_up_the_die(robot):
    pick(robot, 'die')


Got result in 0.4593632221221924 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: rotate 33 degrees clockwise
def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)

Prompt: # define function: rotate 33 degrees clockwise

Isolated Source:


def rotate_33_degrees_clockwise(robot):
    rotate(robot, 'z', 33)


Got result in 0.5796995162963867 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: tilt seventy degrees forwards
def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)

Prompt: # define function: tilt seventy degrees forwards

Isolated Source:


def tilt_seventy_degrees_forwards(robot):
    rotate(robot, 'x', 70)


Got result in 0.6157851219177246 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: go ten centimeters up and fifteen centimeters backwards
def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go ten centimeters up and fifteen centimeters backwards

Isolated Source:


def go_ten_centimeters_up_and_fifteen_centimeters_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.1
    waypoint.position.x -= 0.15
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.4938926696777344 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: draw an ellipse with radii five and four centimeters
def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.04 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw an ellipse with radii five and four centimeters

Isolated Source:


def draw_an_ellipse_with_radii_five_and_four_centimeters(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.04 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.4991865158081055 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up and then draw a small pentagon
def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

    waypoints = 5

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.1 * math.cos(2 * math.pi * i / 5)
        waypoint.position.y += 0.1 * math.sin(2 * math.pi * i / 5)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: move point five meters up and then draw a small pentagon

Isolated Source:


def move_point_five_meters_up_and_then_draw_a_small_pentagon(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()
    waypoints = 5
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.1 * math.cos((((2 * math.pi) * i) / 5)))
        waypoint.position.y += (0.1 * math.sin((((2 * math.pi) * i) / 5)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 3.2042083740234375 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing
def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    # find the hammer
    (hammer_pose, hammer_found) = robot.find("hammer")

    # find the nails
    (nails_pose, nails_found) = robot.find("nails")

    # if both were found, say tools found
    if hammer_found and nails_found:
        robot.say("Tools found!")

    # if hammer was found but nails were not, say hammer found
    elif hammer_found and not nails_found:
        robot.say("Hammer found!")

    # if nails were found but hammer was not, say nails found
    elif not hammer_found and nails_found:
        robot.say("Nails found!")

    # if neither were found, say nothing found
    else:
        robot.say("Nothing found!")

Prompt: # define function: if you find a hammer and nails, say tools found, otherwise tell me what's missing

Isolated Source:


def if_you_find_a_hammer_and_nails_say_tools_found_otherwise_tell_me_whats_missing(robot):
    (hammer_pose, hammer_found) = robot.find('hammer')
    (nails_pose, nails_found) = robot.find('nails')
    if (hammer_found and nails_found):
        robot.say('Tools found!')
    elif (hammer_found and (not nails_found)):
        robot.say('Hammer found!')
    elif ((not hammer_found) and nails_found):
        robot.say('Nails found!')
    else:
        robot.say('Nothing found!')


Got result in 4.0928053855896 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: five centimeters up and four down
def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: five centimeters up and four down

Isolated Source:


def five_centimeters_up_and_four_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.752387285232544 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: move point five meters up
def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move point five meters up

Isolated Source:


def move_point_five_meters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.5
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0404179096221924 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: point four centimeters down
def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: point four centimeters down

Isolated Source:


def point_four_centimeters_down(robot):
    waypoint = robot.get_pose()
    waypoint.position.z -= 0.04
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0571982860565186 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: what's the cube root of three rounded to two decimal points
def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, 1/3), 2))

Prompt: # define function: what's the cube root of three rounded to two decimal points

Isolated Source:


def whats_the_cube_root_of_three_rounded_to_two_decimal_points(robot):
    robot.say(round(math.pow(3, (1 / 3)), 2))


Got result in 0.9986996650695801 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: draw a small circle
def draw_a_small_circle(robot):
    waypoints = 25

    for i in range(waypoints + 1):
        waypoint = robot.get_pose()
        waypoint.position.x += 0.05 * math.cos(2 * math.pi * i / 25)
        waypoint.position.y += 0.05 * math.sin(2 * math.pi * i / 25)
        robot.add_waypoint(waypoint)

    robot.go()

Prompt: # define function: draw a small circle

Isolated Source:


def draw_a_small_circle(robot):
    waypoints = 25
    for i in range((waypoints + 1)):
        waypoint = robot.get_pose()
        waypoint.position.x += (0.05 * math.cos((((2 * math.pi) * i) / 25)))
        waypoint.position.y += (0.05 * math.sin((((2 * math.pi) * i) / 25)))
        robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.2636122703552246 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: place held item on the table
def place_held_item_on_the_table(robot):
    place(robot, 'table')

Prompt: # define function: place held item on the table

Isolated Source:


def place_held_item_on_the_table(robot):
    place(robot, 'table')


Got result in 0.5456554889678955 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: move a little backwards
def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a little backwards

Isolated Source:


def move_a_little_backwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0321180820465088 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: a bit back the other way
def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit back the other way

Isolated Source:


def a_bit_back_the_other_way(robot):
    waypoint = robot.get_pose()
    waypoint.position.x -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1623859405517578 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: move a little forwards and then to the left
def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)

Prompt: # define function: move a little forwards and then to the left

Isolated Source:


def move_a_little_forwards_and_then_to_the_left(robot):
    move_a_little_forwards(robot)
    move_a_little_to_the_left(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_forwards(robot)
def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_forwards(robot)
def move_a_little_forwards(
Isolated Source:


def move_a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.7312052249908447 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: wait five seconds, then move a little up
def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)

Prompt: # define function: wait five seconds, then move a little up

Isolated Source:


def wait_five_seconds_then_move_a_little_up(robot):
    robot.wait(5)
    move_a_little_up(robot)



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_up(robot)
def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_up(robot)
def move_a_little_up(
Isolated Source:


def move_a_little_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.650588035583496 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: if you can't find a banana, wait a little and try one more time
def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    # find the banana
    (banana_pose, banana_found) = robot.find("banana")

    # if banana wasn't found, tell the user
    if not banana_found:
        robot.say("Can't find the banana!")
        robot.wait(1)
        # try again
        (banana_pose, banana_found) = robot.find("banana")

        # if banana wasn't found, tell the user
        if not banana_found:
            robot.say("Can't find the banana!")
        else:
            robot.say("Found the banana!")
    else:
        robot.say("Found the banana!")

Prompt: # define function: if you can't find a banana, wait a little and try one more time

Isolated Source:


def if_you_cant_find_a_banana_wait_a_little_and_try_one_more_time(robot):
    (banana_pose, banana_found) = robot.find('banana')
    if (not banana_found):
        robot.say("Can't find the banana!")
        robot.wait(1)
        (banana_pose, banana_found) = robot.find('banana')
        if (not banana_found):
            robot.say("Can't find the banana!")
        else:
            robot.say('Found the banana!')
    else:
        robot.say('Found the banana!')


Got result in 3.4975574016571045 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: if you see a screw, move ten centimeters above item
def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    # find the screw
    (screw_pose, screw_found) = robot.find("screw")

    # if screw wasn't found, tell the user
    if not screw_found:
        robot.say("Can't find the screw!")
    
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = screw_pose.position.z + 0.1

        robot.add_waypoint(waypoint)
        robot.go()

Prompt: # define function: if you see a screw, move ten centimeters above item

Isolated Source:


def if_you_see_a_screw_move_ten_centimeters_above_item(robot):
    (screw_pose, screw_found) = robot.find('screw')
    if (not screw_found):
        robot.say("Can't find the screw!")
    else:
        waypoint = robot.get_pose()
        waypoint.position.x = screw_pose.position.x
        waypoint.position.y = screw_pose.position.y
        waypoint.position.z = (screw_pose.position.z + 0.1)
        robot.add_waypoint(waypoint)
        robot.go()


Got result in 3.206792116165161 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: move 1.5 centimeters up
def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move 1.5 centimeters up

Isolated Source:


def move_1_point_5_centimeters_up(robot):
    waypoint = robot.get_pose()
    waypoint.position.z += 0.015
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1467087268829346 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: go 3.1 meters to the left
def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: go 3.1 meters to the left

Isolated Source:


def go_3_point_1_meters_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 3.1
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.1460113525390625 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: move a little to the left and then right, repeat three times
def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)

Prompt: # define function: move a little to the left and then right, repeat three times

Isolated Source:


def move_a_little_to_the_left_and_then_right_repeat_three_times(robot):
    for i in range(3):
        move_a_little_to_the_left(robot)
        move_a_little_to_the_right(robot)



Found cached result!

Searching generated block:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_left(robot)
def move_a_little_to_the_left(
Isolated Source:


def move_a_little_to_the_left(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= 0.05
    robot.add_waypoint(waypoint)
    robot.go()



No matches in cache, generating!

Searching generated block:
# define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move_a_little_to_the_right(robot)
def move_a_little_to_the_right(
Isolated Source:


def move_a_little_to_the_right(robot):
    waypoint = robot.get_pose()
    waypoint.position.y += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 2.2310636043548584 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: a little forwards
def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a little forwards

Isolated Source:


def a_little_forwards(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.9928476810455322 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: a bit more
def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: a bit more

Isolated Source:


def a_bit_more(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 0.9715871810913086 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: say cheese
def say_cheese(robot):
    robot.say("cheese")

Prompt: # define function: say cheese

Isolated Source:


def say_cheese(robot):
    robot.say('cheese')


Got result in 0.40529870986938477 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: do you like puppies
def do_you_like_puppies(robot):
    robot.say("I like puppies")

Prompt: # define function: do you like puppies

Isolated Source:


def do_you_like_puppies(robot):
    robot.say('I like puppies')


Got result in 0.5831170082092285 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: why do you like them
def why_do_you_like_them(robot):
    robot.say("Why do you like them?")

Prompt: # define function: why do you like them

Isolated Source:


def why_do_you_like_them(robot):
    robot.say('Why do you like them?')


Got result in 0.5610029697418213 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: what's your favourite book
def whats_your_favourite_book(robot):
    robot.say("My favourite book is The Hobbit")

Prompt: # define function: what's your favourite book

Isolated Source:


def whats_your_favourite_book(robot):
    robot.say('My favourite book is The Hobbit')


Got result in 0.6559193134307861 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: who's the author
def whos_the_author(robot):
    robot.say("I am ")

Prompt: # define function: who's the author

Isolated Source:


def whos_the_author(robot):
    robot.say('I am ')


Got result in 0.48232555389404297 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: rotate a quarter turn anticlockwise
def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate a quarter turn anticlockwise

Isolated Source:


def rotate_a_quarter_turn_anticlockwise(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.618981122970581 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: rotate back the other way
def rotate_back_the_other_way(robot):
    rotate(robot, 'z', -90)

Prompt: # define function: rotate back the other way

Isolated Source:


def rotate_back_the_other_way(robot):
    rotate(robot, 'z', (- 90))


Got result in 0.5771431922912598 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: move a random amount to the left, but less than a meters
def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: move a random amount to the left, but less than a meters

Isolated Source:


def move_a_random_amount_to_the_left_but_less_than_a_meter(robot):
    waypoint = robot.get_pose()
    waypoint.position.y -= random.random()
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.3050401210784912 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: again but half the distance
def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()

Prompt: # define function: again but half the distance

Isolated Source:


def again_but_half_the_distance(robot):
    waypoint = robot.get_pose()
    waypoint.position.x += 0.05
    robot.add_waypoint(waypoint)
    robot.go()


Got result in 1.0583343505859375 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: half that again
def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()

Prompt: # define function: half that again

Isolated Source:


def half_that_again(robot):
    robot.set_speed(0.5)
    robot.go()


Got result in 0.5769116878509521 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: do you like to work with humans
def do_you_like_to_work_with_humans(robot):
    robot.say("I like to work with humans")

Prompt: # define function: do you like to work with humans

Isolated Source:


def do_you_like_to_work_with_humans(robot):
    robot.say('I like to work with humans')


Got result in 0.6804976463317871 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
# define function: good job
def good_job(robot):
    robot.say("good job")

Prompt: # define function: good job

Isolated Source:


def good_job(robot):
    robot.say('good job')


Got result in 0.3872182369232178 seconds!

Generation successful, saving cache!
Filename not defined, saving to temporary checkpoint!

No matches in cache, generating!

Searching generated block:
